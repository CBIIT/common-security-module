<project name="csm-securityws" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>CSM Security Web Service Project Build File</description>

	<property name="ivy.settings.dir" value="${basedir}/../common" />
	<property name="common.dir" value="${basedir}/../" />
	<property name="target.dir" value="${common.dir}/target/securityws" />
	<property name="local.repo.dir" value="${common.dir}/local-ivy-repo" />
	<property name="ivy.settings.file" location="${common.dir}/common/ivysettings.xml" />

	<!-- set global properties for this build -->
	<property name="src.dir" location="src" />
	<property name="lib.dir" value="${common.dir}/lib/" />

	<!-- This will be removed once all jars are retrieved from Ivy -->
	<property name="web.dir" value="${basedir}/WebRoot" />
	<property name="webinf.dir" value="${web.dir}/WEB-INF" />
	<property name="build.dir" value="build" />
	<property name="classes.dir" value="${webinf.dir}/classes" />
	<property name="war.file" value="securityws.war" />

	<!-- Paths -->
	<path id="common.classpath">
		<fileset dir="${common.dir}/lib">
			<include name="ivy-core-2.0.0-beta2.jar" />
			<include name="ivy-2.0.0-beta2.jar" />
		</fileset>
	</path>

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/securityws/compile">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="common.classpath" />

	<!-- Targets -->

	<target name="ivy-settings" depends="-init">
		<ivy:settings file="${ivy.settings.file}" />
	</target>

	<target name="ivy-compile" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="compile" />
		<ivy:retrieve pattern="${common.dir}/lib/securityws/[conf]/[artifact]-[revision].[ext]" conf="compile" />
	</target>

	<target name="ivy-runtime" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="runtime" />
		<ivy:retrieve pattern="${common.dir}/lib/securityws/[conf]/[artifact]-[revision].[ext]" conf="runtime" />
	</target>

	<target name="ivy-clean-cache" description="Cleans project Ivy cache">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:cleancache />
	</target>

	<target name="-pre-clean" depends="ivy-clean-cache" description="Performs all necessary clean-up before a build">
		<delete dir="${classes.dir}" quiet="false" />
	</target>

	<target name="-init" description="Initializes the system before a build">
		<!-- Create the time stamp -->
		<tstamp />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/WEB-INF" />
		<mkdir dir="${build.dir}/WEB-INF/classes" />
		<mkdir dir="${build.dir}/WEB-INF/tld" />
		<mkdir dir="${build.dir}/WEB-INF/conf" />
		<mkdir dir="${build.dir}/WEB-INF/lib" />
		<mkdir dir="${build.dir}/META-INF" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${lib.dir}/securityws/compile" />
		<mkdir dir="${lib.dir}/securityws/runtime" />
	</target>

	<target name="compile" depends="-pre-clean, ivy-compile" description="Compiles all the files in the project">
		<javac srcdir="${src.dir}" destdir="${build.dir}/WEB-INF/classes" debug="true" deprecation="true" classpathref="project.compile.classpath" />
	</target>

	<target name="-post-compile" depends="compile" description="Compiles all the files in the project">
		<copy todir="${build.dir}">
			<fileset dir="${web.dir}" />
		</copy>
		<copy todir="${build.dir}/WEB-INF/">
			<fileset dir="${webinf.dir}" />
		</copy>
		<copy todir="${build.dir}/WEB-INF/classes">
			<fileset dir="${src.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="dist" depends="compile, -post-compile, ivy-runtime" description="Generate the distribution">
		<jar jarfile="${target.dir}/${war.file}" basedir="${build.dir}" />
	</target>

	<target name="-post-clean" description="Performs necessary clean-up after a build">
		<delete dir="${classes.dir}" quiet="false" />
		<delete dir="${build.dir}" quiet="false" />
	</target>

	<target name="all" depends="dist, -post-clean" description="Default project target" />

</project>
