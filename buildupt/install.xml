<?xml version="1.0" encoding="utf-8" ?>

<project name="csmupt-installer" default="upgrade" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="jboss.grid.configure" value="false"/>
	<property name="tomcat.grid.configure" value="false"/>

	<import file="bda-master-install.xml" />

	<!-- *-ds.xml and WAR -->
	<property name="backwards.compatible.upt.dist" value="${basedir}/${backwards.compatible.upt.dist.relative.dir}" />
	<property name="upt.app-sec-conf.file" value="ApplicationSecurityConfig.xml" />

	<property name="bkwards-upt-webapp.name" value="uptlogin" />

	<target name="-set:jboss:backwards-compatible-upt:application:url">
		<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${bkwards-upt-webapp.name}"/>
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss" depends="
		-set:jboss:backwards-compatible-upt:application:url,
		common:jboss:init,
		common:init,
		install:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:backwards-compatible-upt-ear,
		install:jboss:backwards-compatible-upt-ear:configure,
		install:jboss:configure,
		install:jboss:configure:login:config,
		install:jboss:configure:application:context,
		install:backwards-compatible-upt:databases,		
		install:jboss:configure:datasources,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		">
	</target>
	
	<target name="install:jboss:backwards-compatible-upt-ear" description="Deploy backwards-compatible-upt and common libraries to jboss installation" unless="exclude.jboss" depends="common:init,re-configure-ear">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />
		<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
		<move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}" failonerror="false" />

		<copy file="${backwards.compatible.upt.dist}/${dist.relative.ear.dir}/${upt.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
	</target>

	<target name="install:jboss:backwards-compatible-upt-ear:configure" depends="common:init">
		<available file="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" property="application.security.config.file.present"/>
		<if>
			<equals arg1="${application.security.config.file.present}" arg2="true"/>
			<then>
				<move file="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" tofile="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml.orginal" overwrite="true"/>
			</then>
		</if>

		<if>
			<equals arg1="${upt.central.config}" arg2="true"/>
			<then>
				<filterset id="upt.31.filterset">
					<filter token="upt.version.database.url.prefix" value="${upt.central.database.url.prefix}" />
					<filter token="upt.version.database.server" value="${upt.central.database.server}" />
					<filter token="upt.version.database.port" value="${upt.central.database.port}" />
					<filter token="upt.version.database.name" value="${upt.central.database.name}" />
					<filter token="upt.version.database.user" value="${upt.central.database.user}" />
					<filter token="upt.version.database.password" value="${upt.central.database.password}" />
					<filter token="upt.version.database.dialect" value="${upt.central.database.dialect}" />
					<filter token="upt.version.database.driver.class" value="${upt.central.database.driver.class}" />
				</filterset>
			</then>
			<else>
				<filterset id="upt.31.filterset">
					<filter token="upt.version.database.url.prefix" value="${upt.31.database.url.prefix}" />
					<filter token="upt.version.database.server" value="${upt.31.database.server}" />
					<filter token="upt.version.database.port" value="${upt.31.database.port}" />
					<filter token="upt.version.database.name" value="${upt.31.database.name}" />
					<filter token="upt.version.database.user" value="${upt.31.database.user}" />
					<filter token="upt.version.database.password" value="${upt.31.database.password}" />
					<filter token="upt.version.database.dialect" value="${upt.31.database.dialect}" />
					<filter token="upt.version.database.driver.class" value="${upt.31.database.driver.class}" />
				</filterset>
			</else>
		</if>

		<copy todir="${jboss.home}/server/${jboss.server.name}/csmconfig" overwrite="true">
			<fileset dir="${basedir}">
				<include name="*ApplicationSecurityConfig.xml" />
			</fileset>
			<filterset>
				<filterset refid="upt.31.filterset"/>
				<filterset>
					<filtersfile file="${properties.file}"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>
		<if>
			<equals arg1="${upt.31.installed}" arg2="true"/>
			<then>
				<copy todir="${jboss.home}/server/${jboss.server.name}/csmconfig" overwrite="true">
					<fileset dir="${basedir}">
						<include name="*csmupt31.hibernate.cfg.xml" />
					</fileset>
					<filterset>
						<filterset refid="upt.31.filterset"/>
						<filterset>
							<filtersfile file="${properties.file}"/>
							<filtersfile file="project.properties"/>
						</filterset>
					</filterset>
				</copy>
			</then>
		</if>
		<available file="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" property="application.backwards-compatible-upt.ds.file.present"/>
		<if>
			<equals arg1="${application.backwards-compatible-upt.ds.file.present}" arg2="true"/>
			<then>
				<move file="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml.orginal" overwrite="true"/>
			</then>
		</if>
		<copy file="${basedir}/upt-ds-template.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" overwrite="true"/>

		<var name="property.block" value="gov.nih.nci.security.configFile=${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml${line.separator}" />
		<copy file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.orig" overwrite="true" />
		<jboss-update-properties-service property.block="${property.block}" />
	</target>

	<target name="install:jboss:configure:login:config" description="Configure login config software/common/resource/jboss-conf/login-config.block.xml" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<property name="login-config-template.xml" value="${basedir}/login-config-template.xml"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml.orginal" overwrite="true"/>
		<echo
			message="Inserting ${login-config-template.xml} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
		<xmltask preservetype="true"
			source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
			dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
			<xmlcatalog refid="bda.xml.catalog" />
			<remove
				path="//policy/application-policy[@name='${application.context.name}']" />
		</xmltask>
		<xmltask preservetype="true" failWithoutMatch="true"
			source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
			dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
			<xmlcatalog refid="bda.xml.catalog" />
			<insert path="//policy" file="${login-config-template.xml}" />
		</xmltask>
		<if>
			<and>
				<equals arg1="${upt.central.config}" arg2="true"  casesensitive="false"/>
				<not>
					<equals arg1="${upt.central.authentication.type}" arg2="NONE" />
				</not>
			</and>
			<then>
				<configure-login-config 
				 		authentication.type="${upt.central.authentication.type}"
						database.driver="${upt.central.database.driver.class}" database.url="${upt.central.database.url}"
						database.user="${upt.central.database.user}" database.password="${upt.central.database.password}"
						database.encrypt.enabled="${upt.central.database.encrypt.enabled}" 
						ldaps.url="${upt.central.ldaps.url}" ldaps.basedn="${upt.central.ldaps.basedn}" ldaps.userid.label="${upt.central.ldaps.userid.label}"
						ldap.url="${upt.central.ldap.url}" ldap.searchable.base="${upt.central.ldap.searchable.base}"	ldap.userid.label="${upt.central.ldap.userid.label}"
						ldap.admin.user.name="${upt.central.ldap.admin.user.name}" ldap.admin.user.password="${upt.central.ldap.admin.user.password}"
				/>
			</then>
			<else>
				<if>
					<and>
						<equals arg1="${upt.31.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.31.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config 
						 		authentication.type="${upt.31.authentication.type}"
								database.driver="${upt.31.database.driver.class}" database.url="${upt.31.database.url}"
								database.user="${upt.31.database.user}" database.password="${upt.31.database.password}"
								database.encrypt.enabled="${upt.31.database.encrypt.enabled}" 
								ldaps.url="${upt.31.ldaps.url}" ldaps.basedn="${upt.31.ldaps.basedn}" ldaps.userid.label="${upt.31.ldaps.userid.label}"
								ldap.url="${upt.31.ldap.url}" ldap.searchable.base="${upt.31.ldap.searchable.base}"	ldap.userid.label="${upt.31.ldap.userid.label}"
								ldap.admin.user.name="${upt.31.ldap.admin.user.name}" ldap.admin.user.password="${upt.31.ldap.admin.user.password}"
						/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.32.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.32.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config 
						 		authentication.type="${upt.32.authentication.type}"
								database.driver="${upt.32.database.driver.class}" database.url="${upt.32.database.url}"
								database.user="${upt.32.database.user}" database.password="${upt.32.database.password}"
								database.encrypt.enabled="${upt.32.database.encrypt.enabled}" 
								ldaps.url="${upt.32.ldaps.url}" ldaps.basedn="${upt.32.ldaps.basedn}" ldaps.userid.label="${upt.32.ldaps.userid.label}"
								ldap.url="${upt.32.ldap.url}" ldap.searchable.base="${upt.32.ldap.searchable.base}"	ldap.userid.label="${upt.32.ldap.userid.label}"
								ldap.admin.user.name="${upt.32.ldap.admin.user.name}" ldap.admin.user.password="${upt.32.ldap.admin.user.password}"
						/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.40.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.40.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.40.authentication.type}"
								database.driver="${upt.40.database.driver.class}" database.url="${upt.40.database.url}"
								database.user="${upt.40.database.user}" database.password="${upt.40.database.password}"
								database.encrypt.enabled="${upt.40.database.encrypt.enabled}"
								ldaps.url="${upt.40.ldaps.url}" ldaps.basedn="${upt.40.ldaps.basedn}" ldaps.userid.label="${upt.40.ldaps.userid.label}"
								ldap.url="${upt.40.ldap.url}" ldap.searchable.base="${upt.40.ldap.searchable.base}"	ldap.userid.label="${upt.40.ldap.userid.label}"
								ldap.admin.user.name="${upt.40.ldap.admin.user.name}" ldap.admin.user.password="${upt.40.ldap.admin.user.password}"

						/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.41.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.41.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.41.authentication.type}"
								database.driver="${upt.41.database.driver.class}" database.url="${upt.41.database.url}"
								database.user="${upt.41.database.user}" database.password="${upt.41.database.password}"
								database.encrypt.enabled="${upt.41.database.encrypt.enabled}"
								ldaps.url="${upt.41.ldaps.url}" ldaps.basedn="${upt.41.ldaps.basedn}" ldaps.userid.label="${upt.41.ldaps.userid.label}"
								ldap.url="${upt.41.ldap.url}" ldap.searchable.base="${upt.41.ldap.searchable.base}"	ldap.userid.label="${upt.41.ldap.userid.label}"
								ldap.admin.user.name="${upt.41.ldap.admin.user.name}" ldap.admin.user.password="${upt.41.ldap.admin.user.password}"
						/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.42.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.42.authentication.type}" arg2="NONE" />						
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.42.authentication.type}"
								database.driver="${upt.42.database.driver.class}" database.url="${upt.42.database.url}"
								database.user="${upt.42.database.user}" database.password="${upt.42.database.password}"
								database.encrypt.enabled="${upt.42.database.encrypt.enabled}"
								ldaps.url="${upt.42.ldaps.url}" ldaps.basedn="${upt.42.ldaps.basedn}" ldaps.userid.label="${upt.42.ldaps.userid.label}"
								ldap.url="${upt.42.ldap.url}" ldap.searchable.base="${upt.42.ldap.searchable.base}"	ldap.userid.label="${upt.42.ldap.userid.label}"
								ldap.admin.user.name="${upt.42.ldap.admin.user.name}" ldap.admin.user.password="${upt.42.ldap.admin.user.password}"
						/>
					</then>
				</if>
			</else>
		</if>
	</target>

	<target name="install:jboss:configure:datasources" description="Configure login config /deploy/backwards_compatible_upt-ds.xml" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<if>
			<equals arg1="${upt.central.config}" arg2="true" />
			<then>
				<configure-datasources 	database.url="${upt.central.database.url}" 
					database.user="${upt.central.database.user}" 
					database.password="${upt.central.database.password}" jndi.name="${upt.central.jndi.name}"
					driver.class="${upt.central.database.driver.class}"
				/>
			</then>
			<else>
				<if>
					<equals arg1="${upt.31.installed}" arg2="true" />
					<then>
						<configure-datasources 	database.url="${upt.31.database.url}"
							database.user="${upt.31.database.user}"
							database.password="${upt.31.database.password}" jndi.name="${upt.31.jndi.name}"
							driver.class="${upt.31.database.driver.class}"
						/>
					</then>
				</if>
				<if>
					<equals arg1="${upt.32.installed}" arg2="true" />
					<then>
						<configure-datasources 	database.url="${upt.32.database.url}" 
							database.user="${upt.32.database.user}"
							database.password="${upt.32.database.password}" jndi.name="${upt.32.jndi.name}"
							driver.class="${upt.32.database.driver.class}"
						/>
					</then>
				</if>
				<if>
					<equals arg1="${upt.40.installed}" arg2="true" />
					<then>
						<configure-datasources 	database.url="${upt.40.database.url}"
							database.user="${upt.40.database.user}"
							database.password="${upt.40.database.password}" jndi.name="${upt.40.jndi.name}"
							driver.class="${upt.40.database.driver.class}"
						/>
					</then>
				</if>
				<if>
					<equals arg1="${upt.41.installed}" arg2="true" />
					<then>
						<configure-datasources 	database.url="${upt.41.database.url}"
							database.user="${upt.41.database.user}"
							database.password="${upt.41.database.password}" jndi.name="${upt.41.jndi.name}"
							driver.class="${upt.41.database.driver.class}"
						/>
					</then>
				</if>
				<if>
					<equals arg1="${upt.42.installed}" arg2="true" />
					<then>
						<configure-datasources database.url="${upt.42.database.url}"
							database.user="${upt.42.database.user}"
							database.password="${upt.42.database.password}" jndi.name="${upt.42.jndi.name}"
							driver.class="${upt.42.database.driver.class}"
						/>
					</then>
				</if>
			</else>
		</if>
	</target>

	<target name="install:jboss:configure:application:context"
			description="Configure application context config ${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml"
			unless="exclude.jboss" depends="common:jboss:init,common:init">

		<xmltask preservetype="true"
					source="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml"
					dest="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml">
			<xmlcatalog refid="bda.xml.catalog" />
			<remove
					path="//security-config/backwards-compatibility/upt-application-list/text()" />
		</xmltask>
		<if>
			<equals arg1="${upt.31.installed}" arg2="true" />
			<then>
				<xmltask preservetype="true" failWithoutMatch="true" source="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" dest="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml">
					<xmlcatalog refid="bda.xml.catalog" />
					<insert path="/security-config/application-list" position="under">
						<![CDATA[
							<application>
						<context-name>${upt.31.context.name}</context-name>
						<authentication>
							<authentication-provider-class/>
							<lockout-time>6000</lockout-time>
							<allowed-login-time>6000</allowed-login-time>
							<allowed-attempts>3</allowed-attempts>
						</authentication>
						<authorization>
							<authorization-provider-class>
							</authorization-provider-class>
							<hibernate-config-file>${jboss.home}/server/${jboss.server.name}/csmconfig/${upt.31.hibernate.config.file}</hibernate-config-file>
						</authorization>
					</application>
						]]>
				     </insert>
				</xmltask>
			</then>
		</if>
		<if>
			<equals arg1="${upt.central.config}" arg2="true" />
			<then>
				<configure-application-context
						context.name="${upt.central.context.name}" url.context.name="${upt.central.url.context.name}"
						hibernate.config.file="${upt.central.hibernate.config.file}" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.31.installed}" arg2="true" />
			<then>
				<configure-application-context
						context.name="${upt.31.context.name}" url.context.name="${upt.31.url.context.name}"
						hibernate.config.file="${upt.31.hibernate.config.file}" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.32.installed}" arg2="true" />
			<then>
				<configure-application-context
						context.name="${upt.32.context.name}" url.context.name="${upt.32.url.context.name}"
						hibernate.config.file="${upt.32.hibernate.config.file}" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.40.installed}" arg2="true" />
			<then>
				<configure-application-context
						context.name="${upt.40.context.name}" url.context.name="${upt.40.url.context.name}"
						hibernate.config.file="${upt.40.hibernate.config.file}" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.41.installed}" arg2="true" />
			<then>
				<configure-application-context
						context.name="${upt.41.context.name}" url.context.name="${upt.41.url.context.name}"
						hibernate.config.file="${upt.41.hibernate.config.file}" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.42.installed}" arg2="true" />
			<then>
				<configure-application-context
						context.name="${upt.42.context.name}" url.context.name="${upt.42.url.context.name}"
						hibernate.config.file="${upt.42.hibernate.config.file}" />
			</then>
		</if>
	</target>

	<target name="install:backwads-compatible-upt:database:validation:pre-install">
		<property name="database.type" value="${database.type}"/>
		<property name="database.port" value="${database.port}"/>
		<property name="database.server" value="${database.server}"/>
		<property name="database.re-create" value="${database.re-create}"/>
	
		<validate-pre-install-database
					database.driver="${database.driver}" database.system.url="${database.system.url}" 
					database.system.user="${database.system.user}" database.system.password="${database.system.password}" 
					database.url="${database.url}" database.user="${database.user}" 
					database.password="${database.password}" 
					database.name="${database.name}" database.type="${database.type}"
				/>
	</target>
	<!-- common:init -->
	<target name="install:backwards-compatible-upt:database:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
				depends="
				install:common:validation:pre-install
				">
		<if>
			<equals arg1="${upt.central.config}" arg2="true" />
			<then>
				<antcall target="install:backwads-compatible-upt:database:validation:pre-install" inheritall="true">
					<param name="database.driver" value="${upt.central.database.driver.class}"/>
					<param name="database.system.url" value="${upt.central.database.system.url}"/>
					<param name="database.system.user" value="${upt.central.database.system.user}"/>
					<param name="database.system.password" value="${upt.central.database.system.password}"/>
					<param name="database.url" value="${upt.central.database.url}"/>
					<param name="database.user" value="${upt.central.database.user}"/>
					<param name="database.password" value="${upt.central.database.password}"/>
					<param name="database.name" value="${upt.central.database.name}"/>
					<param name="database.type" value="${upt.central.database.type}"/>
	
					<param name="database.re-create" value="${upt.central.database.re-create}"/>
					<param name="database.port" value="${upt.central.database.port}"/>
					<param name="database.server" value="${upt.central.database.server}"/>
				</antcall>
			</then>
			<else>
				<if>
					<equals arg1="${upt.31.installed}" arg2="true" />
					<then>
						<antcall target="install:backwads-compatible-upt:database:validation:pre-install" inheritall="true">
							<param name="database.driver" value="${upt.31.database.driver.class}"/>
							<param name="database.system.url" value="${upt.31.database.system.url}"/>
							<param name="database.system.user" value="${upt.31.database.system.user}"/>
							<param name="database.system.password" value="${upt.31.database.system.password}"/>
							<param name="database.url" value="${upt.31.database.url}"/>
							<param name="database.user" value="${upt.31.database.user}"/>
							<param name="database.password" value="${upt.31.database.password}"/>
							<param name="database.name" value="${upt.31.database.name}"/>
							<param name="database.type" value="${upt.31.database.type}"/>
	
							<param name="database.re-create" value="${upt.31.database.re-create}"/>
							<param name="database.port" value="${upt.31.database.port}"/>
							<param name="database.server" value="${upt.31.database.server}"/>
						</antcall>
					</then>
				</if>
				<if>
					<equals arg1="${upt.32.installed}" arg2="true" />
					<then>
						<antcall target="install:backwads-compatible-upt:database:validation:pre-install" inheritall="true">
							<param name="database.driver" value="${upt.32.database.driver.class}"/>
							<param name="database.system.url" value="${upt.32.database.system.url}"/>
							<param name="database.system.user" value="${upt.32.database.system.user}"/>
							<param name="database.system.password" value="${upt.32.database.system.password}"/>
							<param name="database.url" value="${upt.32.database.url}"/>
							<param name="database.user" value="${upt.32.database.user}"/>
							<param name="database.password" value="${upt.32.database.password}"/>
							<param name="database.name" value="${upt.32.database.name}"/>
							<param name="database.type" value="${upt.32.database.type}"/>
	
							<param name="database.re-create" value="${upt.32.database.re-create}"/>
							<param name="database.port" value="${upt.32.database.port}"/>
							<param name="database.server" value="${upt.32.database.server}"/>
						</antcall>
					</then>
				</if>
				<if>
					<equals arg1="${upt.40.installed}" arg2="true" />
					<then>
						<antcall target="install:backwads-compatible-upt:database:validation:pre-install" inheritall="true">
							<param name="database.driver" value="${upt.40.database.driver.class}"/>
							<param name="database.system.url" value="${upt.40.database.system.url}"/>
							<param name="database.system.user" value="${upt.40.database.system.user}"/>
							<param name="database.system.password" value="${upt.40.database.system.password}"/>
							<param name="database.url" value="${upt.40.database.url}"/>
							<param name="database.user" value="${upt.40.database.user}"/>
							<param name="database.password" value="${upt.40.database.password}"/>
							<param name="database.name" value="${upt.40.database.name}"/>
							<param name="database.type" value="${upt.40.database.type}"/>
	
							<param name="database.re-create" value="${upt.40.database.re-create}"/>
							<param name="database.port" value="${upt.40.database.port}"/>
							<param name="database.server" value="${upt.40.database.server}"/>
						</antcall>
					</then>
				</if>
				<if>
					<equals arg1="${upt.41.installed}" arg2="true" />
					<then>
						<antcall target="install:backwads-compatible-upt:database:validation:pre-install" inheritall="true">
							<param name="database.driver" value="${upt.41.database.driver.class}"/>
							<param name="database.system.url" value="${upt.41.database.url}"/>
							<param name="database.system.user" value="${upt.41.database.system.user}"/>
							<param name="database.system.password" value="${upt.41.database.system.password}"/>
							<param name="database.url" value="${upt.41.database.url}"/>
							<param name="database.user" value="${upt.41.database.user}"/>
							<param name="database.password" value="${upt.41.database.password}"/>
							<param name="database.name" value="${upt.41.database.name}"/>
							<param name="database.type" value="${upt.41.database.type}"/>
	
							<param name="database.re-create" value="${upt.41.database.re-create}"/>
							<param name="database.port" value="${upt.41.database.port}"/>
							<param name="database.server" value="${upt.41.database.server}"/>
						</antcall>
					</then>
				</if>
				<if>
					<equals arg1="${upt.42.installed}" arg2="true" />
					<then>
						<antcall target="install:backwads-compatible-upt:database:validation:pre-install" inheritall="true">
							<param name="database.driver" value="${upt.42.database.driver.class}"/>
							<param name="database.system.url" value="${upt.42.database.url}"/>
							<param name="database.system.user" value="${upt.42.database.system.user}"/>
							<param name="database.system.password" value="${upt.42.database.system.password}"/>
							<param name="database.url" value="${upt.42.database.url}"/>
							<param name="database.user" value="${upt.42.database.user}"/>
							<param name="database.password" value="${upt.42.database.password}"/>
							<param name="database.name" value="${upt.42.database.name}"/>
							<param name="database.type" value="${upt.42.database.type}"/>
	
							<param name="database.re-create" value="${upt.42.database.re-create}"/>
							<param name="database.port" value="${upt.42.database.port}"/>
							<param name="database.server" value="${upt.42.database.server}"/>
						</antcall>
					</then>
				</if>
			</else>
		</if>
	</target>
	
	<target name="install:backwards-compatible-upt:databases" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database">
		<if>
			<and>
				<equals arg1="${upt.central.database.re-create}" arg2="true" />
				<equals arg1="${upt.central.config}" arg2="true" />
			</and>
			<then>
				<install-backwards-compatible-upt-database 	
							database.driver="${upt.central.database.driver.class}" database.system.url="${upt.central.database.system.url}" 
							database.system.user="${upt.central.database.system.user}" database.system.password="${upt.central.database.system.password}" 
							database.url="${upt.central.database.url}" database.user="${upt.central.database.user}" 
							database.password="${upt.central.database.password}" database.version="${upt.central.database.version}" 
							database.name="${upt.central.database.name}" database.type="${upt.central.database.type}"
							database.schema="${upt.central.database.schema}"  database.re-create="${upt.central.database.re-create}"
							database.drop-schema="${upt.central.database.drop-schema}"
							db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/uptcentral"
							database.dir.src="${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/uptcentral"
							db.install.create.oracle.file.list="${upt.central.db.install.create.oracle.file.list}"
							db.install.create.mysql.file.list="${upt.central.db.install.create.mysql.file.list}"
							db.install.create.postgresql.file.list="${upt.central.db.install.create.postgres.file.list}"
						/>
			</then>
			<else>
				<if>
					<and>
						<equals arg1="${upt.31.database.re-create}" arg2="true" />
						<equals arg1="${upt.31.installed}" arg2="true" />
					</and>
					<then>
						<install-backwards-compatible-upt-database 	
									database.driver="${upt.31.database.driver.class}" database.system.url="${upt.31.database.system.url}" 
									database.system.user="${upt.31.database.system.user}" database.system.password="${upt.31.database.system.password}" 
									database.url="${upt.31.database.url}" database.user="${upt.31.database.user}" 
									database.password="${upt.31.database.password}" database.version="${upt.31.database.version}" 
									database.name="${upt.31.database.name}" database.type="${upt.31.database.type}"
									database.schema="${upt.31.database.schema}"  database.re-create="${upt.31.database.re-create}"
									database.drop-schema="${upt.31.database.drop-schema}"
									db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt31"
									database.dir.src="${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt31"
									db.install.create.oracle.file.list="${upt.31.db.install.create.oracle.file.list}"
									db.install.create.mysql.file.list="${upt.31.db.install.create.mysql.file.list}"
									db.install.create.postgresql.file.list="${upt.31.db.install.create.postgres.file.list}"
								/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.32.database.re-create}" arg2="true" />
						<equals arg1="${upt.32.installed}" arg2="true" />
					</and>
					<then>
						<install-backwards-compatible-upt-database 	
									database.driver="${upt.32.database.driver.class}" database.system.url="${upt.32.database.system.url}" 
									database.system.user="${upt.32.database.system.user}" database.system.password="${upt.32.database.system.password}" 
									database.url="${upt.32.database.url}" database.user="${upt.32.database.user}" 
									database.password="${upt.32.database.password}" database.version="${upt.32.database.version}" 
									database.name="${upt.32.database.name}" database.type="${upt.32.database.type}"
									database.schema="${upt.32.database.schema}" database.re-create="${upt.32.database.re-create}"
									database.drop-schema="${upt.32.database.drop-schema}"
									db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt32"
									database.dir.src="${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt32"
									db.install.create.oracle.file.list="${upt.32.db.install.create.oracle.file.list}"
									db.install.create.mysql.file.list="${upt.32.db.install.create.mysql.file.list}"
									db.install.create.postgresql.file.list="${upt.32.db.install.create.postgres.file.list}"
								/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.40.database.re-create}" arg2="true" />
						<equals arg1="${upt.40.installed}" arg2="true" />
					</and>
					<then>
						<install-backwards-compatible-upt-database 	
									database.driver="${upt.40.database.driver.class}" database.system.url="${upt.40.database.system.url}" 
									database.system.user="${upt.40.database.system.user}" database.system.password="${upt.40.database.system.password}" 
									database.url="${upt.40.database.url}" database.user="${upt.40.database.user}" 
									database.password="${upt.40.database.password}" database.version="${upt.40.database.version}" 
									database.name="${upt.40.database.name}" database.type="${upt.40.database.type}"
									database.schema="${upt.40.database.schema}" database.re-create="${upt.40.database.re-create}"
									database.drop-schema="${upt.40.database.drop-schema}"
									db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt40"
									database.dir.src="${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt40"
									db.install.create.oracle.file.list="${upt.40.db.install.create.oracle.file.list}"
									db.install.create.mysql.file.list="${upt.40.db.install.create.mysql.file.list}"
									db.install.create.postgresql.file.list="${upt.40.db.install.create.postgres.file.list}"
								/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.41.database.re-create}" arg2="true" />
						<equals arg1="${upt.41.installed}" arg2="true" />
					</and>
					<then>
						<install-backwards-compatible-upt-database 	
									database.driver="${upt.41.database.driver.class}" database.system.url="${upt.41.database.system.url}" 
									database.system.user="${upt.41.database.system.user}" database.system.password="${upt.41.database.system.password}" 
									database.url="${upt.41.database.url}" database.user="${upt.41.database.user}" 
									database.password="${upt.41.database.password}" database.version="${upt.41.database.version}" 
									database.name="${upt.41.database.name}" database.type="${upt.41.database.type}"
									database.schema="${upt.41.database.schema}"  database.re-create="${upt.41.database.re-create}"
									database.drop-schema="${upt.41.database.drop-schema}"
									db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt41"
									database.dir.src="${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt41"
									db.install.create.oracle.file.list="${upt.41.db.install.create.oracle.file.list}"
									db.install.create.mysql.file.list="${upt.41.db.install.create.mysql.file.list}"
									db.install.create.postgresql.file.list="${upt.41.db.install.create.postgres.file.list}"
								/>
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${upt.42.database.re-create}" arg2="true" />
						<equals arg1="${upt.42.installed}" arg2="true" />
					</and>
					<then>
						<install-backwards-compatible-upt-database 	
									database.driver="${upt.42.database.driver.class}" database.system.url="${upt.42.database.system.url}"
									database.system.user="${upt.42.database.system.user}" database.system.password="${upt.42.database.system.password}" 
									database.url="${upt.42.database.url}" database.user="${upt.42.database.user}" 
									database.password="${upt.42.database.password}" database.version="${upt.42.database.version}" 
									database.name="${upt.42.database.name}" database.type="${upt.42.database.type}"
									database.schema="${upt.42.database.schema}"  database.re-create="true" 
									database.drop-schema="${upt.42.database.drop-schema}"
									db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt42"
									database.dir.src="${db-install.dist.relative.dir}/db-install/${backwards.compatible.upt.dist.relative.dir}/upt42"
									db.install.create.oracle.file.list="${upt.42.db.install.create.oracle.file.list}"
									db.install.create.mysql.file.list="${upt.42.db.install.create.mysql.file.list}"
									db.install.create.postgresql.file.list="${upt.42.db.install.create.postgres.file.list}"
								/>
					</then>
				</if>
			</else>
		</if>
	</target>
	
	<macrodef name="configure-login-config">
		<attribute name="authentication.type" default="NOT SET" />
		<attribute name="ldaps.url" default="NOT SET" />
		<attribute name="ldaps.basedn" default="NOT SET" />
		<attribute name="ldaps.userid.label" default="NOT SET" />
		<attribute name="ldap.url" default="NOT SET" />
		<attribute name="ldap.searchable.base" default="NOT SET" />
		<attribute name="ldap.userid.label" default="NOT SET" />
		<attribute name="ldap.admin.user.name" default="NOT SET" />
		<attribute name="ldap.admin.user.password" default="NOT SET" />
		<attribute name="database.driver" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.encrypt.enabled" default="NOT SET" />
	
		<sequential>
			<if>
				<equals arg1="@{authentication.type}" arg2="ldaps" />
				<then>
					<xmltask preservetype="true" failWithoutMatch="true"
							source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
							dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
						<xmlcatalog refid="bda.xml.catalog" />
						<insert
								path="//policy/application-policy[@name='${application.context.name}']/authentication"
								position="under">
							<![CDATA[
									<login-module
										code="gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule" flag="sufficient">
							<module-option name="ldapHost">@{ldaps.url}@</module-option>
							<module-option name="ldapSearchableBase">@{ldaps.basedn}@</module-option>
							<module-option name="ldapUserIdLabel">@{ldaps.userid.label}@</module-option>
						</login-module>
								]]>
							</insert>
				</xmltask>
			</then>
			<elseif>
				<equals arg1="@{authentication.type}" arg2="ldap" />
				<then>
					<xmltask preservetype="true" failWithoutMatch="true"
									source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
									dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
						<xmlcatalog refid="bda.xml.catalog" />
						<insert
										path="//policy/application-policy[@name='${application.context.name}']/authentication"
										position="under">
							<![CDATA[			
									 <login-module
										code="gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule" flag="sufficient">
							<module-option name="ldapHost">@{ldap.url}@</module-option>
							<module-option name="ldapSearchableBase">@{ldap.searchable.base}@</module-option>
							<module-option name="ldapUserIdLabel">@{ldap.userid.label}</module-option>
							<module-option name="ldapAdminUserName">@{ldap.userid.label}</module-option>
							<module-option name="ldapAdminPassword">@{ldap.userid.password}</module-option>
						</login-module>
									]]>
									</insert>
				</xmltask>
			</then>
		</elseif>
		<elseif>
			<equals arg1="@{authentication.type}" arg2="db" />
			<then>
				<xmltask preservetype="true" failWithoutMatch="true"
									source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
									dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
					<xmlcatalog refid="bda.xml.catalog" />
					<insert
										path="//policy/application-policy[@name='${application.context.name}']/authentication"
										position="under">
						<![CDATA[			
									 <login-module
										code="gov.nih.nci.security.authentication.loginmodules.RDBMSLoginModule" flag="sufficient">
						<module-option name="driver">@{database.driver}</module-option>
						<module-option name="url">@{database.url}</module-option>
						<module-option name="user">@{database.user}</module-option>
						<module-option name="passwd">@{database.password}</module-option>
						<module-option name="query">SELECT * FROM CSM_USER WHERE LOGIN_NAME=? and PASSWORD=?</module-option>
						<module-option name="encryption-enabled">@{database.encrypt.enabled}</module-option>
					</login-module>
									]]>
									</insert>
				</xmltask>
			</then>
		</elseif>
		<else>
			<fail message="@{authentication.type} is not a valid authentiation type, please change to db or ldap and re-run the build." />
		</else>
		</if>	
		</sequential>
	</macrodef>
	
	<macrodef name="configure-datasources">
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="jndi.name" default="NOT SET" />
		<attribute name="driver.class" default="NOT SET" />
	
		<sequential>
		
			<xmltask preservetype="true" failWithoutMatch="true"
				source="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml"
				dest="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml">
				<xmlcatalog refid="bda.xml.catalog" />
					<insert path="//datasources" position="under">
						<![CDATA[						
						<local-tx-datasource>
							<jndi-name>@{jndi.name}</jndi-name>
							<driver-class>@{driver.class}</driver-class>
							<connection-url>@{database.url}</connection-url>
							<user-name>@{database.user}</user-name>
							<password>@{database.password}</password>
						</local-tx-datasource>
						]]>
					</insert>
			</xmltask>
		</sequential>
	</macrodef>
	
	<macrodef name="configure-application-context">
		<attribute name="context.name" default="NOT SET" />
		<attribute name="url.context.name" default="NOT SET" />
		<attribute name="hibernate.config.file" default="NOT SET" />
	
		<sequential>
			<xmltask preservetype="true" failWithoutMatch="true" source="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" dest="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml">
			<xmlcatalog refid="bda.xml.catalog" />
			<insert path="//security-config/backwards-compatibility/upt-application-list" position="under">
				<![CDATA[
				<upt-application>
					<context-name>@{context.name}</context-name>
					<url-context-name>@{url.context.name}</url-context-name>
					<authorization>
						<authorization-provider-class>String</authorization-provider-class>
						<hibernate-config-file>@{hibernate.config.file}</hibernate-config-file>
					</authorization>
				</upt-application>
				]]>
			</insert>
			</xmltask>
		</sequential>
	</macrodef>
		
	<!-- <database-upgrade
					database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			 />
			 <database-tag/>							
		-->
	<macrodef name="install-backwards-compatible-upt-database">
		<attribute name="database.driver" default="NOT SET" />
		<attribute name="database.system.url" default="NOT SET" />
		<attribute name="database.system.user" default="NOT SET" />
		<attribute name="database.system.password" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.version" default="NOT SET" />
		<attribute name="database.name" default="NOT SET" />
		<attribute name="database.type" default="NOT SET"/>
		<attribute name="database.dir.src" default="NOT SET"/>
		
		<attribute name="database.schema" default="NOT SET"/>
		<attribute name="database.re-create" default="NOT SET"/>
		<attribute name="database.drop-schema" default="NOT SET"/>
		
		<attribute name="db.install.dir" default="NOT SET"/>
		<attribute name="db.install.create.oracle.file.list" default="NOT SET"/>
		<attribute name="db.install.create.mysql.file.list" default="NOT SET"/>
		<attribute name="db.install.create.postgresql.file.list" default="NOT SET"/>
	
		<sequential>
			<switch value="${database.type}">
				<case value="oracle">
					<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				</case>
				<case value="mysql">
					<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
					<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				</case>
				<case value="postgresql">
					<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar"/>
					<property name="database.driver" value="org.postgresql.Driver"/>
				</case>
				<default>
					<fail message="Invalid database type ${database.type}"/>
				</default>
			</switch>
			<antcall target="install:database:prep" inheritall="true">
				<param name="database.url" value="@{database.url}"/>
				<param name="database.user" value="@{database.user}"/>
				<param name="database.password" value="@{database.password}"/>
				<param name="database.name" value="@{database.name}"/>
				<param name="database.type" value="@{database.type}"/>
				<param name="db.dir.dest" value="${basedir}/working/@{database.dir.src}"/>
				<param name="db.dir.src" value="${basedir}/@{database.dir.src}"/>				
			</antcall>
			<validate-pre-install-database 
				database.driver="@{database.driver}" database.system.url="@{database.system.url}" 
				database.system.user="@{database.system.user}" database.system.password="@{database.system.password}" 
				database.url="@{database.url}" database.user="@{database.user}" 
				database.password="@{database.password}" database.version="@{database.version}" 
				database.name="@{database.name}" database.type="@{database.type}" />
			<echo message="${database.driver.file}"/>
			<database-clean	 
				database.driver="@{database.driver}" database.system.url="@{database.system.url}" 
				database.system.user="@{database.system.user}" database.system.password="@{database.system.password}" 
				database.url="@{database.url}" database.user="@{database.user}" 
				database.password="@{database.password}" database.version="@{database.version}" 
				database.name="@{database.name}" database.schema="@{database.schema}" 
				database.re-create="@{database.re-create}" 
				database.drop-schema="@{database.drop-schema}" 
				/>
			
			<switch value="${database.type}">
				<case value="oracle">
				   <database-install		
						db.install.create.file.list="@{db.install.create.oracle.file.list}"
						db-install.dir="@{db.install.dir}"
						sql.delimiter="/" sql.delimitertype="row"
						database.url="@{database.url}"
						database.user="@{database.user}"
						database.password="@{database.password}"						
					/>
				</case>
				<case value="postgresql">
					<database-install
						db.install.create.file.list="@{db.install.create.postgresql.file.list}"
						db-install.dir="@{db.install.dir}" 
						sql.delimiter="/" sql.delimitertype="row"
						database.url="@{database.url}"
						database.user="@{database.user}"
						database.password="@{database.password}"							
					/>
				</case>
				<case value="mysql">
					<database-install
						db.install.create.file.list="@{db.install.create.mysql.file.list}"
						db-install.dir="@{db.install.dir}"
						database.url="@{database.url}"
						database.user="@{database.user}"
						database.password="@{database.password}"
					 />
				</case>
			</switch>	
		  </sequential>
	</macrodef>
	
	<target name="re-configure-ear">
		<property name="temp.ear.dir" value="tempEAR"/>
		<copy file="${backwards.compatible.upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}" tofile="${backwards.compatible.upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}.org"/>
		<unzip dest="${temp.ear.dir}" src="${backwards.compatible.upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}"/>
	
		<if>
			<equals arg1="${upt.31.installed}" arg2="false" />
			<then>
				<re-configure-application-xml upt.context.name="${upt.31.url.context.name}" temp.dir="${temp.ear.dir}"/>
				<delete file="${temp.ear.dir}/${upt.31.url.context.name}.war"/>
			</then>
		</if>
		<if>
			<equals arg1="${upt.32.installed}" arg2="false" />
			<then>
				<re-configure-application-xml upt.context.name="${upt.32.url.context.name}" temp.dir="${temp.ear.dir}"/>
				<delete file="${temp.ear.dir}/${upt.32.url.context.name}.war"/>
			</then>
		</if>
		<if>
			<equals arg1="${upt.40.installed}" arg2="false" />
			<then>
				<re-configure-application-xml upt.context.name="${upt.40.url.context.name}" temp.dir="${temp.ear.dir}"/>
				<delete file="${temp.ear.dir}/${upt.40.url.context.name}.war"/>
			</then>
		</if>
		<if>
			<equals arg1="${upt.41.installed}" arg2="false" />
			<then>
				<re-configure-application-xml upt.context.name="${upt.41.url.context.name}" temp.dir="${temp.ear.dir}"/>
				<delete file="${temp.ear.dir}/${upt.41.url.context.name}.war"/>
			</then>
		</if>
		<if>
			<equals arg1="${upt.42.installed}" arg2="false" />
			<then>
				<re-configure-application-xml upt.context.name="${upt.42.url.context.name}" temp.dir="${temp.ear.dir}"/>
				<delete quiet="true" file="${temp.ear.dir}/${upt.42.url.context.name}.war"/>
			</then>
		</if>
		<!-- Create ear file and place in ear directory -->
		<jar jarfile="${backwards.compatible.upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}" basedir="${temp.ear.dir}" />
		<delete dir="${temp.ear.dir}" quiet="true"/>
	</target>
	
	<macrodef name="re-configure-application-xml">
		<attribute name="upt.context.name" default="NOT SET" />
		<attribute name="temp.dir" default="NOT SET" />
		<sequential>
			<xmltask preservetype="true" failWithoutMatch="true"
							source="@{temp.dir}/META-INF/application.xml"
							dest="@{temp.dir}/META-INF/application.xml">
				<remove path="/application/module[@id='@{upt.context.name}']" />
			</xmltask>
		</sequential>
	</macrodef>

	<target name="upgrade:jboss:readers:bda" if="jboss.exists">
	</target>

	<target name="common:init" depends="common:init:pre">
		<property name="install.running" value="true"/>
		<!-- bda-blueprints-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"/>
		<property name="properties.template.file" value="${basedir}/properties.template" />
		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
	</target>

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		-set:jboss:backwards-compatible-upt:application:url,
		upgrade:common:init,
		common:init,
		common:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		upgrade:backwards-compatible-upt:databases,
		upgrade:jboss
		">
	</target>
	
	<target name="upgrade:database:readers:bda" depends="upgrade:jboss:init:prep" if="jboss.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>
		<!--<jboss-read-dbconfig
			jboss.home="${read.jboss.home}"
			jboss.ds-xml.file="bda-blueprints-ds.xml"
			/>-->
	</target>
	
	<target name="upgrade:common:init" depends="upgrade:jboss:init" unless="install.running">
	</target>
	
	<!-- Upgrade with No Container Modification (NCM) -->
	<target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:backwards-compatible-upt-ear,
		install:jboss:backwards-compatible-upt-ear:configure,
		install:jboss:configure:login:config,
		install:jboss:configure:application:context,
		upgrade:backwards-compatible-upt:databases,		
		install:jboss:configure:datasources,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		">
	</target>
	
	<target name="upgrade:backwards-compatible-upt:databases" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database">
		<if>
			<equals arg1="${upt.central.config}" arg2="true" />
			<then>
				<mkdir dir="${os.temp.dir}/${project.name}"/>
				<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
					<fileset dir="${db-install.dist.relative.dir}/db-upgrade/${backwards.compatible.upt.dist.relative.dir}/42">
						<include name="**/db-upgrade*.xml"/>
						<include name="**/MigrationScript*.xml"/>
					</fileset>
					<filterset>
						<filter token="os.temp.dir" value="${os.temp.dir}" />
						<filter token="project.name" value="${project.name}" />
					</filterset>
				</copy>

				<upgrade-backwards-compatible-upt-database
					database.system.url="${upt.central.database.system.url}" database.name="${upt.central.database.name}" 
				  	database.system.password="${upt.central.database.system.password}"  
				  	database.system.user="${upt.central.database.system.user}"
				 	database.url="${upt.central.database.url}" 
					database.user="${upt.central.database.user}" 
					database.password="${upt.central.database.password}" 
					database.type="${upt.central.database.type}" 
					database.upgrade.schema.file="MigrationScript${upgrade.upt.central.db.previous.version}MySQL.xml" />
			</then>
			<else>
				<echo message="execute for non central database"/>				
			</else>
		</if>
	</target>
	
	<macrodef name="upgrade-backwards-compatible-upt-database">
		<attribute name="database.system.url" default="NOT SET" />
		<attribute name="database.system.user" default="NOT SET" />
		<attribute name="database.system.password" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.name" default="NOT SET" />
		<attribute name="database.type" default="NOT SET"/>
		<attribute name="database.upgrade.schema.file" default="NOT SET"/>
		
		<sequential>
			<switch value="@{database.type}">
				<case value="oracle">
					<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
					<property name="database.upgrade.driver" value="oracle.jdbc.driver.OracleDriver"/>
				</case>
				<case value="mysql">
					<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
					<property name="database.upgrade.driver" value="com.mysql.jdbc.Driver"/>
				</case>
				<case value="postgresql">
					<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar"/>
					<property name="database.upgrade.driver" value="org.postgresql.Driver"/>
				</case>
				<default>
					<fail message="Invalid database type ${database.type}"/>
				</default>
			</switch>
			<validate-pre-install-database
						database.driver="${database.upgrade.driver}" database.system.url="@{database.system.url}" 
						database.system.user="@{database.system.user}" database.system.password="@{database.system.password}" 
						database.url="@{database.url}" database.user="@{database.user}" 
						database.password="@{database.password}"
						database.name="@{database.name}" database.type="@{database.type}"
			/>

			<database-upgrade database.driver="${database.upgrade.driver}" database.url="@{database.url}" 
							  database.user="@{database.user}" database.password="@{database.password}" 
							  database.schema="@{database.name}"
							  database.changelog.file="${os.temp.dir}/${project.name}/@{database.upgrade.schema.file}"/>
			
			<database-tag database.driver="${database.upgrade.driver}" database.url="@{database.url}"
						  database.user="@{database.user}" database.password="@{database.password}" 
						  database.schema="@{database.name}" />				
	   </sequential>
	</macrodef>
</project>