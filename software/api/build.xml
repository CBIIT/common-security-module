<project name="csm-api" default="run" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>CSM API Project Build File</description>

	<property name="common.dir" value="${basedir}/.." />
	<property name="target.dir" value="${common.dir}/target/dist/exploded/csmapi" />
	<property name="local.repo.dir" value="${basedir}/../local-ivy-repo/${ant.project.name}" />

	<property name="ivy.settings.file" location="${common.dir}/common/ivysettings.xml" />

	<!-- set global properties for this build -->
	<property name="src.dir" location="src" />

	<property name="lib.dir" value="${common.dir}/target/lib" />

	<!-- This will be removed once all jars are retrieved from Ivy -->
	<property name="local.lib.dir" value="lib" />
	<property name="base.lib.dir" value="${common.dir}/target/lib" />

	<property name="data.dir" location="${basedir}/data" />
	<property name="classes.dir" location="${basedir}/classes" />
	<property name="common.resources" location="../common/resources/jboss-conf" />
	<property name="jar.name" value="csmapi.jar" />

	<!-- Paths -->
	<path id="common.classpath">
		<fileset dir="${common.dir}/target/lib">
			<include name="ivy-core-2.0.0-beta2.jar" />
			<include name="ivy-2.0.0-beta2.jar" />
		</fileset>
	</path>

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/api/compile">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${local.lib.dir}">
			<include name="*.jar" />

		</fileset>
	</path>


	<target name="-init" description="Initializes the system before a build">
		<!-- Create the time stamp -->
		<tstamp />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${local.repo.dir}" />
	</target>

	<target name="compile" depends="-init" description="compile the source ">

		<!-- Compile the java code from ${src.dir} into ${classes.dir} -->
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true" deprecation="true" classpathref="project.compile.classpath" />

		<copy todir="${classes.dir}/gov/nih/nci/security/authorization/domainobjects">
			<fileset dir="${src.dir}/gov/nih/nci/security/authorization/domainobjects">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<copy todir="${classes.dir}/gov/nih/nci/security/dao/hibernate">
			<fileset dir="${src.dir}/gov/nih/nci/security/dao/hibernate">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<!---<copy file="${src.dir}/hibernate.properties" todir="${classes.dir}" />-->
		<copy file="${common.resources}/ObjectStateLoggerConfig.xml" todir="${classes.dir}" />
		<copy file="${src.dir}/ApplicationSecurityConfig.xsd" todir="${classes.dir}" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
			
	</target>

	<target name="jar" depends="compile" description="generate the distribution">
		<jar jarfile="${target.dir}/${jar.name}" basedir="${classes.dir}" />
	</target>

	<target name="dist" depends="jar" description="generate the distribution">
		<copy todir="${target.dir}">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<copy todir="${target.dir}">
			<fileset dir="${common.resources}" />
			<fileset dir="resources" />
		</copy>

		<delete quiet="true" file="${target.dir}/ObjectStateLoggerConfig.xml" />
	</target>

	<target name="-post-clean" description="Performs necessary clean-up after a build">
		<delete dir="${classes.dir}" quiet="false" />
		<delete dir="${build.dir}" quiet="false" />
		<delete dir="${data.dir}" quiet="false" />
	</target>

	<target name="run" depends="dist, -post-clean" description="Default project target" />

</project>
