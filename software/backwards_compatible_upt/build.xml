<project name="backwards-compatible-upt" basedir="./" default="clean">
	<description>Backwards Compatible UPT Project Build File</description>


	<property name="ivy.settings.dir" value="${basedir}/../common" />
	<property name="common.dir" value="${basedir}/../" />
	<property name="target.dir" value="${common.dir}/target/backwards_compatible_upt" />
	<property name="exploded.dir" value="${common.dir}/target/dist/exploded/backwards_compatible_upt" />
	<property name="local.repo.dir" value="${common.dir}/local-ivy-repo" />
	<property name="ivy.settings.file" location="${common.dir}/common/ivysettings.xml" />
	<property name="bda-utils.dir" location="${common.dir}/build/bda-utils" />

	<!-- set global properties for this build -->
	<!-- This will be removed once all jars are retrieved from Ivy -->
	<property file="../build/install-backwards-compatible-upt.properties" />
	<property name="properties.file" location="../build/project.properties">
	</property>
	<fail unless="properties.file" message="The ${properties.file} file does not exist." />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />

	<!-- Paths -->
	<path id="common.classpath">
		<fileset dir="${common.dir}/target/lib">
			<include name="ivy-core-2.0.0-beta2.jar" />
			<include name="ivy-2.0.0-beta2.jar" />
		</fileset>
	</path>

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/upt/compile">
			<include name="*.jar" />
		</fileset>
	</path>

	<macrodef name="executeUPT">
		<attribute name="app.name" default="NOT SET"/>
		<attribute name="war.file" default="@{app.name}"/>
		<sequential>
			<property name="app.name" value="@{app.name}" />
			<property name="src.home" value="${target.dir}/svncheckout/${app.name}/webapp/src" />
			<property name="web.home" value="${target.dir}/svncheckout/${app.name}/webapp/public_html" />
			<property name="webinf.home" value="${web.home}/WEB-INF" />
			<property name="lib.home" value="${webinf.home}/lib" />
			<property name="otherlib.home" value="${target.dir}/svncheckout/${app.name}/otherlib" />
			<property name="build.home" value="${basedir}/build/${app.name}" />
			<property name="dist.home" value="${basedir}/dist/${app.name}" />
			<property name="classes.home" value="${webinf.home}/classes" />
			<property name="war.file" value="${dist.home}/@{war.file}.war" />

			<if>
				<or>
					<equals arg1="${app.name}" arg2="upt40" />
					<equals arg1="${app.name}" arg2="upt32" />
					<equals arg1="${app.name}" arg2="upt31" />
				</or>
				<then>
					<copy todir="${lib.home}">
						<fileset dir="${otherlib.home}">
						</fileset>
					</copy>
				</then>
			</if>

			<antcall target="build" inheritall="true"/>
		</sequential>
	</macrodef>

	<target name="clean" description="Delete the Build and Dist directories">
		<delete dir="${basedir}/build" />
		<delete dir="${basedir}/dist" />
	</target>

	<target name="prepareDir">
		<mkdir dir="${build.home}" />
		<mkdir dir="${build.home}/WEB-INF" />
		<mkdir dir="${build.home}/WEB-INF/tld" />
		<mkdir dir="${build.home}/WEB-INF/conf" />
		<mkdir dir="${build.home}/WEB-INF/lib" />
		<mkdir dir="${build.home}/META-INF" />
		<mkdir dir="${classes.home}" />
		<mkdir dir="${dist.home}" />
	</target>

	<target name="prepareBuild" depends="prepareDir">
		<copy todir="${build.home}">
			<fileset dir="${web.home}" />
		</copy>
		<copy todir="${build.home}/WEB-INF/">
			<fileset dir="${webinf.home}" />
		</copy>
		<echo message="${lib.home}" />
		<copy todir="${build.home}/WEB-INF/lib">
			<fileset dir="${lib.home}" includes="**/*.jar" />
		</copy>
		<delete quiet="true" file="${build.home}/WEB-INF/lib/commons-logging.jar" />
		<delete quiet="true" file="${build.home}/WEB-INF/lib/commons-logging-1.0.4.jar" />
		<delete quiet="true" file="${build.home}/WEB-INF/lib/log4j-1.2.9.jar" />
		<delete quiet="true" file="${build.home}/WEB-INF/lib/jta.jar" />
		<delete quiet="true" file="${build.home}/WEB-INF/lib/clm.jar" />
	</target>

	<target name="prepare" depends="prepareDir,prepareBuild" />

	<target name="compile" depends="prepare" description="Compiles all the files in the project">

		<echo message="${src.home} ${build.home}  ${lib.home}" />
		<javac srcdir="${src.home}" destdir="${build.home}/WEB-INF/classes" debug="true" deprecation="true">
			<classpath>
				<fileset dir="${lib.home}" includes="*.jar" />
			</classpath>
		</javac>
		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${src.home}" excludes="**/*.java" />
		</copy>
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/upt/resources/ApplicationSecurityConfig.xml" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/upt/resources/csmupt.hibernate.cfg.xml" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/upt/resources/security.hibernate.cfg.xml" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/upt/resources/hibernate.properties" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/upt/resources/ObjectStateLoggerConfig.xml" />
	</target>

	<target name="build" depends="compile" description="Creates war file">
		<copy todir="${dist.home}/${app.name}">
			<fileset dir="${target.dir}/svncheckout/${app.name}/resources">
				<exclude name="ObjectStateLoggerConfig.xml" />
			</fileset>
		</copy>
		<jar jarfile="${war.file}" basedir="${build.home}" />
	</target>

	<!-- -->
	<target name="dist41">
		<executeUPT app.name="upt41" war.file="upt41"/>
	</target>

	<target name="dist40">
		<executeUPT app.name="upt40" war.file="upt40"/>
	</target>

	<target name="dist32">
		<executeUPT app.name="upt32" war.file="upt32"/>
	</target>

	<target name="dist31">
		<executeUPT app.name="upt31" war.file="upt31"/>
	</target>

	<macrodef name="executeSVNCheckout">
		<attribute name="app.name" default="NOT SET"/>
		<attribute name="tag" default="NOT SET"/>
		<sequential>
			<property name="app.name" value="@{app.name}" />
			<property name="tag" value="@{tag}" />
			<property name="svn.checkout.home" value="${target.dir}/svncheckout/${app.name}" />

			<available file="${svn.checkout.home}" property="svn.checkout.home.exists"/>
			<if>
				<isset property="svn.checkout.home.exists"/>
				<then>
					<svn-update svn.update.dir="${svn.checkout.home}"/>
				</then>
				<else>
					<svn-co 
						svn.checkout.url="https://gforge.nci.nih.gov/svnroot/security/tags/${tag}/upt"		
						svn.checkout.dir="${svn.checkout.home}"
						svn.checkout.user="anonymous"
						svn.checkout.pass=""
						delete="true"
						/>
				</else>
			</if>
			<copy todir="${svn.checkout.home}" overwrite="true">
				<fileset dir="${basedir}/${app.name}" />
			</copy>
		</sequential>
	</macrodef>

	<target name="svnCheckout">
		<if>
			<equals arg1="${upt.41.installed}" arg2="true" />
			<then>
				<antcall target="svnCheckout41" inheritall="false" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.40.installed}" arg2="true" />
			<then>
				<antcall target="svnCheckout40" inheritall="false" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.32.installed}" arg2="true" />
			<then>
				<antcall target="svnCheckout32" inheritall="false" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.31.installed}" arg2="true" />
			<then>
				<antcall target="svnCheckout31" inheritall="false" />
			</then>
		</if>
	</target>

	<target name="svnCheckout41">
		<executeSVNCheckout app.name="upt41" tag="CSM_4_1_RELEASE_11_14_2008" />
	</target>

	<target name="svnCheckout40">
		<executeSVNCheckout app.name="upt40" tag="CSM_UPT_40_PROD_11022007" />
	</target>

	<target name="svnCheckout32">
		<executeSVNCheckout app.name="upt32" tag="CSM_UPT_32_PROD_12152006_V1" />
	</target>

	<target name="svnCheckout31">
		<executeSVNCheckout app.name="upt31" tag="CSMUPT_31_PROD_03222006_V1" />
	</target>

	<target name="dist">
		<if>
			<equals arg1="${upt.41.installed}" arg2="true" />
			<then>
				<antcall target="dist41" inheritall="false" />
			</then>
		</if>
		<if>
			<equals arg1="${upt.40.installed}" arg2="true" />
			<then>
				<antcall target="dist40" inheritall="false" />
			</then>
		</if>

		<if>
			<equals arg1="${upt.32.installed}" arg2="true" />
			<then>
				<antcall target="dist32" inheritall="false" />
			</then>
		</if>

		<if>
			<equals arg1="${upt.31.installed}" arg2="true" />
			<then>
				<antcall target="dist31" inheritall="false" />
			</then>
		</if>
		<antcall target="distLogin" inheritall="false" />
	</target>

	<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
	<!-- seperate targets for upt login no need for macro-->
	<target name="initLogin">
		<property name="app.name" value="uptlogin" />
		<property name="src.home" value="${basedir}/${app.name}/webapp/src" />
		<property name="web.home" value="${basedir}/${app.name}/webapp/public_html" />
		<property name="webinf.home" value="${web.home}/WEB-INF" />
		<property name="lib.home" value="${webinf.home}/lib" />

		<property name="build.home" value="${basedir}/build/${app.name}" />
		<property name="dist.home" value="${basedir}/dist/${app.name}" />
		<property name="classes.home" value="${webinf.home}/classes" />
		<property name="war.file" value="${dist.home}/${app.name}.war" />
	</target>

	<target name="cleanLogin" depends="initLogin" description="Delete the Build and Dist directories">
		<delete dir="${build.home}" />
		<delete dir="${dist.home}" />
	</target>

	<target name="prepareDirLogin" depends="initLogin">
		<mkdir dir="${build.home}" />
		<mkdir dir="${build.home}/WEB-INF" />
		<mkdir dir="${build.home}/WEB-INF/tld" />
		<mkdir dir="${build.home}/WEB-INF/conf" />
		<mkdir dir="${build.home}/WEB-INF/lib" />
		<mkdir dir="${build.home}/META-INF" />
		<mkdir dir="${classes.home}" />
		<mkdir dir="${dist.home}" />
	</target>

	<target name="prepareBuildLogin" depends="prepareDirLogin">
		<copy todir="${build.home}">
			<fileset dir="${web.home}" />
		</copy>
		<delete quiet="true" file="${build.home}/webapp/public_html/WEB-INF/lib/commons-logging.jar" />
		<delete quiet="true" file="${build.home}/webapp/public_html/WEB-INF/lib/commons-logging-1.0.4.jar" />
		<delete quiet="true" file="${build.home}/webapp/public_html/WEB-INF/lib/log4j-1.2.9.jar" />
		<delete quiet="true" file="${build.home}/webapp/public_html/WEB-INF/lib/jta.jar" />
		<delete quiet="true" file="${build.home}/webapp/public_html/WEB-INF/lib/clm.jar" />
	</target>


	<target name="prepareLogin" depends="prepareDirLogin,prepareBuildLogin" />

	<target name="compileLogin" depends="initLogin,prepareLogin" description="Compiles all the files in the project">
		<javac srcdir="${src.home}" destdir="${build.home}/WEB-INF/classes" debug="true" deprecation="true">
			<classpath>
				<fileset dir="${lib.home}" includes="*.jar" />
			</classpath>
		</javac>
		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${src.home}" excludes="**/*.java" />
		</copy>
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/uptlogin/resources/ApplicationSecurityConfig.xml" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/uptlogin/resources/csmupt.hibernate.cfg.xml" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/uptlogin/resources/security.hibernate.cfg.xml" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/uptlogin/resources/hibernate.properties" />
		<delete quiet="true" file="${build.home}/WEB-INF/classes/gov/nih/nci/security/uptlogin/resources/ObjectStateLoggerConfig.xml" />
	</target>

	<target name="distLogin" depends="initLogin,compileLogin" description="Creates war file">
		<delete file="${build.home}/WEB-INF/lib/commons-logging-1.0.4.jar"/>
		<delete file="${build.home}/WEB-INF/lib/log4j-1.2.9.jar"/>

		<jar jarfile="${war.file}" basedir="${build.home}" />
	</target>

	<target name="cleanupLogin" depends="distLogin" description="Delete the Build directory">
		<delete dir="${build.home}" />
	</target>
	<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
	<!-- Create the EAR File -->
	<target name="initEar">
		<property name="build.home.ear" value="${basedir}/build/uptEAR" />
		<property name="dist.home.ear" value="${exploded.dir}/uptEAR" />
	</target>

	<target name="prepareDirEar" depends="initEar">
		<mkdir dir="${dist.home.ear}" />
		<!-- Create Meta-inf and classes directories -->
		<mkdir dir="${build.home.ear}/META-INF" />
	</target>

	<macrodef name="configure-application-xml">
		<attribute name="upt.war" default="NOT SET" />
		<attribute name="context.root" default="NOT SET" />
		<sequential>
			<xmltask preservetype="true" failWithoutMatch="true"
				source="${build.home.ear}/META-INF/application.xml"
				dest="${build.home.ear}/META-INF/application.xml">
				<insert
					path="//application/display-name"
					position="after">
					<![CDATA[
					<module >
						<web>
							<web-uri>@{upt.war}</web-uri>
							<context-root>/@{context.root}</context-root>
						</web>
					</module>    
					]]>
				</insert>
			</xmltask>
	</sequential>
</macrodef>

<target name="buildEar" depends="prepareDirEar">
	<copy  file="${basedir}/uptEAR/META-INF/application-template.xml" tofile="${build.home.ear}/META-INF/application.xml" overwrite="true"/>
	<copy todir="${build.home.ear}/META-INF">
		<fileset dir="${basedir}/uptEAR/META-INF" includes="MANIFEST.MF" />
	</copy>
	<if>
		<equals arg1="${upt.31.installed}" arg2="true" />
		<then>
			<configure-application-xml context.root="${upt.31.context.name}" upt.war="upt31.war"/>
			<copy todir="${build.home.ear}">
				<fileset dir="${basedir}/dist/upt31" includes="upt31.war" />
			</copy>
		</then>
	</if>
	<if>
		<equals arg1="${upt.32.installed}" arg2="true" />
		<then>
			<configure-application-xml context.root="${upt.32.context.name}" upt.war="upt32.war"/>
			<copy todir="${build.home.ear}">
				<fileset dir="${basedir}/dist/upt32" includes="upt32.war" />
			</copy>
		</then>
	</if>
	<if>
		<equals arg1="${upt.40.installed}" arg2="true" />
		<then>
			<configure-application-xml context.root="${upt.40.context.name}" upt.war="upt40.war"/>
			<copy todir="${build.home.ear}">
				<fileset dir="${basedir}/dist/upt40" includes="upt40.war" />
			</copy>
		</then>
	</if>
	<if>
		<equals arg1="${upt.41.installed}" arg2="true" />
		<then>
			<configure-application-xml context.root="${upt.41.context.name}" upt.war="upt41.war"/>
			<copy todir="${build.home.ear}">
				<fileset dir="${basedir}/dist/upt41" includes="upt41.war" />
			</copy>
		</then>
	</if>
	<if>
		<equals arg1="${upt.42.installed}" arg2="true" />
		<then>
			<configure-application-xml context.root="${upt.42.context.name}" upt.war="upt42.war"/>
			<copy todir="${build.home.ear}">
				<fileset dir="${basedir}/dist/upt42" includes="upt42.war" />
			</copy>
		</then>
	</if>
	<copy todir="${build.home.ear}">
		<fileset dir="${basedir}/dist/uptlogin" includes="uptlogin.war" />
	</copy>
	<!-- Create ear file and place in ear directory -->
	<jar jarfile="${dist.home.ear}/uptEAR.ear" basedir="${build.home.ear}" />
</target>

<target name="all" depends="clean,svnCheckout,dist,buildEar,cleanupLogin" description="Builds and deploys the entire application by cleaning the build and dist directories" />
</project>