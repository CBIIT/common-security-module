<?xml version="1.0" encoding="utf-8" ?>

<project name="csmupt-installer" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="jboss.grid.configure" value="false"/>
	<property name="tomcat.grid.configure" value="false"/>

	<import file="build-master-install.xml" />

	<!-- *-ds.xml and WAR -->
	<property name="upt.dist" value="${basedir}/${upt.dist.relative.dir}" />
	<property name="upt.app-sec-conf.file" value="ApplicationSecurityConfig.xml" />

	<property name="upt-webapp.name" value="${upt.central.url.context.name}" />

	<target name="-set:jboss:upt:application:url">
		<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${upt-webapp.name}"/>
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	
	<target name="install:jboss:upt-ear" description="Deploy upt and common libraries to jboss installation" unless="exclude.jboss" depends="common:init,re-configure-ear">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />
		<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
		<move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}" failonerror="false" />

		<copy file="${upt.dist}/${dist.relative.ear.dir}/${upt.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.driver.file" value="${build-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
				<property name="database.schema" value="${database.user}"/>
			</case>
			<case value="mysql">
				<property name="database.driver.file" value="${build-utils.dir}/mysql-connector-java-5.1.13.jar"/>
			</case>
			<case value="postgresql">
				<property name="database.driver.file" value="${build-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>
		<copy todir="${jboss.home}/server/${jboss.server.name}/lib" file="${database.driver.file}"/>
	</target>

	<target name="install:jboss:upt-ear:configure" depends="common:init">
		<available file="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" property="application.security.config.file.present"/>
		<if>
			<equals arg1="${application.security.config.file.present}" arg2="true"/>
			<then>
				<move file="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" tofile="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml.orginal" overwrite="true"/>
			</then>
		</if>
		<filterset id="upt.filterset">
			<filter token="upt.version.database.url.prefix" value="${upt.central.database.url.prefix}" />
			<filter token="upt.version.database.server" value="${upt.central.database.server}" />
			<filter token="upt.version.database.port" value="${upt.central.database.port}" />
			<filter token="upt.version.database.name" value="${upt.central.database.name}" />
			<filter token="upt.version.database.user" value="${upt.central.database.user}" />
			<filter token="upt.version.database.password" value="${upt.central.database.password}" />
			<filter token="upt.version.database.dialect" value="${upt.central.database.dialect}" />
			<filter token="upt.version.database.driver.class" value="${upt.central.database.driver.class}" />
		</filterset>

		<filterset id="upt.context.filterset">
			<filter token="upt.context.name" value="csmupt" />
		</filterset>

		<copy todir="${jboss.home}/server/${jboss.server.name}/csmconfig" overwrite="true">
			<fileset dir="${basedir}">
				<include name="*ApplicationSecurityConfig.xml" />
			</fileset>
			<filterset>
				<filterset refid="upt.filterset"/>
				<filterset refid="upt.context.filterset"/>				
				<filterset>
					<filtersfile file="${properties.file}"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>
		<available file="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" property="application.upt.ds.file.present"/>
		<if>
			<equals arg1="${application.upt.ds.file.present}" arg2="true"/>
			<then>
				<move file="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml.orginal" overwrite="true"/>
			</then>
		</if>
		<copy file="${basedir}/upt-ds-template.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" overwrite="true"/>

		<var name="property.block" value="gov.nih.nci.security.configFile=${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml${line.separator}" />
		<copy file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml" tofile="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.orig" overwrite="true" />
		<jboss-update-properties-service property.block="${property.block}" />
	</target>
	
	<target name="install:jboss:configure:login:config" description="Configure login config software/common/resource/jboss-conf/login-config.block.xml" unless="exclude.jboss" depends="common:jboss:init,common:init">
		
		<property name="login-config-template.xml" value="${basedir}/login-config-template.xml"/>
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml.orginal" overwrite="true"/>
		<echo
			message="Inserting ${login-config-template.xml} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
		<xmltask preservetype="true"
			source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
			dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
			<xmlcatalog refid="build.xml.catalog" />
			<remove
				path="//policy/application-policy[@name='${application.context.name}']" />
		</xmltask>
		<xmltask preservetype="true" failWithoutMatch="true"
			source="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml"
			dest="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml">
			<xmlcatalog refid="build.xml.catalog" />
			<insert path="//policy" file="${login-config-template.xml}" />
		</xmltask>
		<if>
			<not>
				<equals arg1="${upt.central.authentication.type}" arg2="NONE" />
			</not>
			<then>
				<configure-login-config 
				 		authentication.type="${upt.central.authentication.type}" application.context.name="${application.context.name}"
						database.driver="${upt.central.database.driver.class}" database.url="${upt.central.database.url}"
						database.user="${upt.central.database.user}" database.password="${upt.central.database.password}"
						database.encrypt.enabled="${upt.central.database.encrypt.enabled}" 
						ldaps.url="${upt.central.ldaps.url}" ldaps.basedn="${upt.central.ldaps.basedn}" ldaps.userid.label="${upt.central.ldaps.userid.label}"
						ldap.url="${upt.central.ldap.url}" ldap.searchable.base="${upt.central.ldap.searchable.base}"	ldap.userid.label="${upt.central.ldap.userid.label}"
						ldap.admin.user.name="${upt.central.ldap.admin.user.name}" ldap.admin.user.password="${upt.central.ldap.admin.user.password}"
				/>
			</then>
			<else>
				<if>
					<and>
						<equals arg1="${upt.45.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.45.authentication.type}" arg2="NONE" />						
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.45.authentication.type}" application.context.name="${application.context.name}"
								database.driver="${upt.45.database.driver.class}" database.url="${upt.45.database.url}"
								database.user="${upt.45.database.user}" database.password="${upt.45.database.password}"
								database.encrypt.enabled="${upt.45.database.encrypt.enabled}"
								ldaps.url="${upt.45.ldaps.url}" ldaps.basedn="${upt.45.ldaps.basedn}" ldaps.userid.label="${upt.45.ldaps.userid.label}"
								ldap.url="${upt.45.ldap.url}" ldap.searchable.base="${upt.45.ldap.searchable.base}"	ldap.userid.label="${upt.45.ldap.userid.label}"
								ldap.admin.user.name="${upt.45.ldap.admin.user.name}" ldap.admin.user.password="${upt.45.ldap.admin.user.password}"
						/>
					</then>
				
				<elseif>
					<and>
						<equals arg1="${upt.42.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.42.authentication.type}" arg2="NONE" />						
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.42.authentication.type}" application.context.name="${application.context.name}"
								database.driver="${upt.42.database.driver.class}" database.url="${upt.42.database.url}"
								database.user="${upt.42.database.user}" database.password="${upt.42.database.password}"
								database.encrypt.enabled="${upt.42.database.encrypt.enabled}"
								ldaps.url="${upt.42.ldaps.url}" ldaps.basedn="${upt.42.ldaps.basedn}" ldaps.userid.label="${upt.42.ldaps.userid.label}"
								ldap.url="${upt.42.ldap.url}" ldap.searchable.base="${upt.42.ldap.searchable.base}"	ldap.userid.label="${upt.42.ldap.userid.label}"
								ldap.admin.user.name="${upt.42.ldap.admin.user.name}" ldap.admin.user.password="${upt.42.ldap.admin.user.password}"
						/>
					</then>
				</elseif>
				<elseif>
					<and>
						<equals arg1="${upt.41.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.41.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.41.authentication.type}" application.context.name="${application.context.name}"
								database.driver="${upt.41.database.driver.class}" database.url="${upt.41.database.url}"
								database.user="${upt.41.database.user}" database.password="${upt.41.database.password}"
								database.encrypt.enabled="${upt.41.database.encrypt.enabled}"
								ldaps.url="${upt.41.ldaps.url}" ldaps.basedn="${upt.41.ldaps.basedn}" ldaps.userid.label="${upt.41.ldaps.userid.label}"
								ldap.url="${upt.41.ldap.url}" ldap.searchable.base="${upt.41.ldap.searchable.base}"	ldap.userid.label="${upt.41.ldap.userid.label}"
								ldap.admin.user.name="${upt.41.ldap.admin.user.name}" ldap.admin.user.password="${upt.41.ldap.admin.user.password}"
						/>
					</then>
				</elseif>
				<elseif>
					<and>
						<equals arg1="${upt.40.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.40.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config authentication.type="${upt.40.authentication.type}" application.context.name="${application.context.name}"
								database.driver="${upt.40.database.driver.class}" database.url="${upt.40.database.url}"
								database.user="${upt.40.database.user}" database.password="${upt.40.database.password}"
								database.encrypt.enabled="${upt.40.database.encrypt.enabled}"
								ldaps.url="${upt.40.ldaps.url}" ldaps.basedn="${upt.40.ldaps.basedn}" ldaps.userid.label="${upt.40.ldaps.userid.label}"
								ldap.url="${upt.40.ldap.url}" ldap.searchable.base="${upt.40.ldap.searchable.base}"	ldap.userid.label="${upt.40.ldap.userid.label}"
								ldap.admin.user.name="${upt.40.ldap.admin.user.name}" ldap.admin.user.password="${upt.40.ldap.admin.user.password}"

						/>
					</then>
				</elseif>
				<elseif>
					<and>
						<equals arg1="${upt.32.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.32.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config 
						 		authentication.type="${upt.32.authentication.type}" application.context.name="${application.context.name}"
								database.driver="${upt.32.database.driver.class}" database.url="${upt.32.database.url}"
								database.user="${upt.32.database.user}" database.password="${upt.32.database.password}"
								database.encrypt.enabled="${upt.32.database.encrypt.enabled}" 
								ldaps.url="${upt.32.ldaps.url}" ldaps.basedn="${upt.32.ldaps.basedn}" ldaps.userid.label="${upt.32.ldaps.userid.label}"
								ldap.url="${upt.32.ldap.url}" ldap.searchable.base="${upt.32.ldap.searchable.base}"	ldap.userid.label="${upt.32.ldap.userid.label}"
								ldap.admin.user.name="${upt.32.ldap.admin.user.name}" ldap.admin.user.password="${upt.32.ldap.admin.user.password}"
						/>
					</then>
				</elseif>
				<elseif>
					<and>
						<equals arg1="${upt.31.installed}" arg2="true"  casesensitive="false"/>
						<not>
							<equals arg1="${upt.31.authentication.type}" arg2="NONE" />
						</not>
					</and>
					<then>
						<configure-login-config 
						 		authentication.type="${upt.31.authentication.type}" application.context.name="${application.context.name}"
								database.driver="${upt.31.database.driver.class}" database.url="${upt.31.database.url}"
								database.user="${upt.31.database.user}" database.password="${upt.31.database.password}"
								database.encrypt.enabled="${upt.31.database.encrypt.enabled}" 
								ldaps.url="${upt.31.ldaps.url}" ldaps.basedn="${upt.31.ldaps.basedn}" ldaps.userid.label="${upt.31.ldaps.userid.label}"
								ldap.url="${upt.31.ldap.url}" ldap.searchable.base="${upt.31.ldap.searchable.base}"	ldap.userid.label="${upt.31.ldap.userid.label}"
								ldap.admin.user.name="${upt.31.ldap.admin.user.name}" ldap.admin.user.password="${upt.31.ldap.admin.user.password}"
						/>
					</then>
				</elseif>
			</if>
			</else>
		</if>
	</target>

	<target name="install:jboss:configure:datasources" description="Configure login config /deploy/upt-ds.xml" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<configure-datasources 	database.url="${upt.central.database.url}" 
			database.user="${upt.central.database.user}" 
			database.password="${upt.central.database.password}" jndi.name="${upt.central.jndi.name}"
			driver.class="${upt.central.database.driver.class}"
		/>
	</target>

	<target name="install:jboss:configure:application:context"
			description="Configure application context config ${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml"
			unless="exclude.jboss" depends="common:jboss:init,common:init">
		<xmltask preservetype="true"
					source="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml"
					dest="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml">
			<xmlcatalog refid="build.xml.catalog" />
			<remove
					path="//security-config/application-list/text()" />
			<remove
					path="//security-config/backwards-compatibility/upt-application-list/text()" />
		</xmltask>
		<configure-application-context-application context.name="${upt.central.context.name}" hibernate.config.file="" />
		<configure-application-context-upt-application
				context.name="${upt.central.context.name}" url.context.name="${upt.central.url.context.name}"
				hibernate.config.file="${upt.central.hibernate.config.file}" />
	</target>
	
	<target name="install:upt:databases" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database">
		
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db-install.dist.relative.dir}/db-upgrade/${upt.dist.relative.dir}">
				<include name="**/db-upgrade*.xml"/>
			</fileset>
			<filterset>
				<filter token="os.temp.dir" value="${os.temp.dir}" />
				<filter token="project.name" value="${project.name}" />
			</filterset>
		</copy>		
		<if>
			<or>
				<equals arg1="${upt.central.database.re-create}" arg2="true" />
				<equals arg1="${upt.central.database.drop-schema}" arg2="true" />
			</or>
			<then>
				<install-upt-database 	
							database.driver="${upt.central.database.driver.class}" database.system.url="${upt.central.database.system.url}" 
							database.server="${upt.central.database.server}"
							database.system.user="${upt.central.database.system.user}" database.system.password="${upt.central.database.system.password}" 
							database.url="${upt.central.database.url}" database.user="${upt.central.database.user}" 
							database.password="${upt.central.database.password}" database.version="${upt.central.database.version}" 
							database.name="${upt.central.database.name}" database.type="${upt.central.database.type}"
							database.schema="${upt.central.database.name}"  database.re-create="${upt.central.database.re-create}"
							database.drop-schema="${upt.central.database.drop-schema}"
							db.install.dir="${working.dir}/${db-install.dist.relative.dir}/db-install/${upt.dist.relative.dir}/uptcentral"
							database.dir.src="${db-install.dist.relative.dir}/db-install/${upt.dist.relative.dir}/uptcentral"
							db.install.create.oracle.file.list="${upt.central.db.install.create.oracle.file.list}"
							db.install.create.mysql.file.list="${upt.central.db.install.create.mysql.file.list}"
							db.install.create.postgresql.file.list="${upt.central.db.install.create.postgresql.file.list}"
							db.upgrade.non-central.file="${upt.central.db.upgrade.file}"
						/>
			</then>
		</if>
	</target>
	
	<macrodef name="configure-login-config">
		<attribute name="authentication.type" default="NOT SET" />
		<attribute name="application.context.name" default="NOT SET" />
		<attribute name="ldaps.url" default="NOT SET" />
		<attribute name="ldaps.basedn" default="NOT SET" />
		<attribute name="ldaps.userid.label" default="NOT SET" />
		<attribute name="ldap.url" default="NOT SET" />
		<attribute name="ldap.searchable.base" default="NOT SET" />
		<attribute name="ldap.userid.label" default="NOT SET" />
		<attribute name="ldap.admin.user.name" default="NOT SET" />
		<attribute name="ldap.admin.user.password" default="NOT SET" />
		<attribute name="database.driver" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.encrypt.enabled" default="NOT SET" />
		<attribute name="login.config.file" default="${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
			
		<sequential>
		<echo message="@{login.config.file}"/>
			<if>
				<equals arg1="@{authentication.type}" arg2="ldaps" />
				<then>
					<xmltask preservetype="true" failWithoutMatch="true"
							source="@{login.config.file}"
							dest="@{login.config.file}">
						<xmlcatalog refid="build.xml.catalog" />
						<insert
								path="//application-policy[@name='@{application.context.name}']/authentication"
								position="under">
							<![CDATA[
									<login-module
										code="gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule" flag="sufficient">
							<module-option name="ldapHost">@{ldaps.url}</module-option>
							<module-option name="ldapSearchableBase">@{ldaps.basedn}</module-option>
							<module-option name="ldapUserIdLabel">@{ldaps.userid.label}</module-option>
						</login-module>
								]]>
							</insert>
				</xmltask>
			</then>
			<elseif>
				<equals arg1="@{authentication.type}" arg2="ldap" />
				<then>
					<xmltask preservetype="true" failWithoutMatch="true"
									source="@{login.config.file}"
									dest="@{login.config.file}">
						<xmlcatalog refid="build.xml.catalog" />
						<insert
										path="//application-policy[@name='@{application.context.name}']/authentication"
										position="under">
							<![CDATA[			
							<login-module
								code="gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule" flag="sufficient">
								<module-option name="ldapHost">@{ldap.url}</module-option>
								<module-option name="ldapSearchableBase">@{ldap.searchable.base}</module-option>
								<module-option name="ldapUserIdLabel">@{ldap.userid.label}</module-option>
								<module-option name="ldapAdminUserName">@{ldap.admin.user.name}</module-option>
								<module-option name="ldapAdminPassword">@{ldap.admin.user.password}</module-option>
							</login-module>
							]]>
						</insert>
				</xmltask>
			</then>
		</elseif>
		<elseif>
			<equals arg1="@{authentication.type}" arg2="db" />
			<then>
				<xmltask preservetype="true" failWithoutMatch="true"
									source="@{login.config.file}"
									dest="@{login.config.file}">
					<xmlcatalog refid="build.xml.catalog" />
					<insert
										path="//application-policy[@name='@{application.context.name}']/authentication"
										position="under">
						<![CDATA[			
						<login-module
							code="gov.nih.nci.security.authentication.loginmodules.RDBMSLoginModule" flag="sufficient">
							<module-option name="driver">@{database.driver}</module-option>
							<module-option name="url">@{database.url}</module-option>
							<module-option name="user">@{database.user}</module-option>
							<module-option name="passwd">@{database.password}</module-option>
							<module-option name="query">SELECT * FROM CSM_USER WHERE LOGIN_NAME=? and PASSWORD=?</module-option>
							<module-option name="encryption-enabled">@{database.encrypt.enabled}</module-option>
						</login-module>
						]]>
					</insert>
				</xmltask>
			</then>
		</elseif>
		<else>
			<fail message="@{authentication.type} is not a valid authentiation type, please change to db or ldap and re-run the build." />
		</else>
		</if>	
		</sequential>
	</macrodef>
	
	<macrodef name="configure-datasources">
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="jndi.name" default="NOT SET" />
		<attribute name="driver.class" default="NOT SET" />
		<attribute name="datasource.file" default="${jboss.home}/server/${jboss.server.name}/deploy/upt-ds.xml" />
	
		<sequential>
		
			<xmltask preservetype="true" failWithoutMatch="true"
				source="@{datasource.file}"
				dest="@{datasource.file}">
				<xmlcatalog refid="build.xml.catalog" />
					<insert path="//datasources" position="under">
						<![CDATA[						
						<local-tx-datasource>
							<jndi-name>@{jndi.name}</jndi-name>
							<driver-class>@{driver.class}</driver-class>
							<connection-url>@{database.url}</connection-url>
							<user-name>@{database.user}</user-name>
							<password>@{database.password}</password>
						</local-tx-datasource>
						]]>
					</insert>
			</xmltask>
		</sequential>
	</macrodef>
	
	<macrodef name="configure-application-context-application">
		<attribute name="context.name" default="NOT SET" />
		<attribute name="hibernate.config.file" default="NOT SET" />
		<attribute name="application.context.file" default="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml" />
		
		<sequential>
			<xmltask preservetype="true" failWithoutMatch="true" source="@{application.context.file}" dest="@{application.context.file}">
			<xmlcatalog refid="build.xml.catalog" />
				<insert path="/security-config/application-list" position="under">
				<![CDATA[
					<application>
						<context-name>@{context.name}</context-name>
							<authentication>
								<authentication-provider-class/>
								<lockout-time>1800000</lockout-time>
								<allowed-login-time>60000</allowed-login-time>
								<allowed-attempts>3</allowed-attempts>
							</authentication>
							<authorization>
								<authorization-provider-class>
								</authorization-provider-class>
								<hibernate-config-file>@{hibernate.config.file}</hibernate-config-file>
							</authorization>
					</application>
				]]>
			    </insert>
	      </xmltask>		    
	  </sequential>
 	</macrodef>
			
	<macrodef name="configure-application-context-upt-application">
		<attribute name="context.name" default="NOT SET" />
		<attribute name="url.context.name" default="NOT SET" />
		<attribute name="hibernate.config.file" default="NOT SET" />
		<attribute name="application.context.file" default="${jboss.home}/server/${jboss.server.name}/csmconfig/ApplicationSecurityConfig.xml"/>
	
		<sequential>
			<xmltask preservetype="true" failWithoutMatch="true" source="@{application.context.file}" dest="@{application.context.file}">
			<xmlcatalog refid="build.xml.catalog" />
			<insert path="//security-config/backwards-compatibility/upt-application-list" position="under">
				<![CDATA[
				<upt-application>
					<context-name>@{context.name}</context-name>
					<url-context-name>@{url.context.name}</url-context-name>
					<authorization>
						<authorization-provider-class>String</authorization-provider-class>
						<hibernate-config-file>@{hibernate.config.file}</hibernate-config-file>
					</authorization>
				</upt-application>
				]]>
			</insert>
			</xmltask>
		</sequential>
	</macrodef>

	<macrodef name="install-upt-database">
		<attribute name="database.driver" default="NOT SET" />
		<attribute name="database.system.url" default="NOT SET" />
		<attribute name="database.system.user" default="NOT SET" />
		<attribute name="database.system.password" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.version" default="NOT SET" />
		<attribute name="database.name" default="NOT SET" />
		<attribute name="database.type" default="NOT SET"/>
		<attribute name="database.dir.src" default="NOT SET"/>
		<attribute name="database.server" default="NOT SET"/>
		
		<attribute name="database.schema" default="NOT SET"/>
		<attribute name="database.re-create" default="NOT SET"/>
		<attribute name="database.drop-schema" default="NOT SET"/>
		
		<attribute name="db.install.dir" default="NOT SET"/>
		<attribute name="db.install.create.oracle.file.list" default="NOT SET"/>
		<attribute name="db.install.create.mysql.file.list" default="NOT SET"/>
		<attribute name="db.install.create.postgresql.file.list" default="NOT SET"/>
		<attribute name="db.upgrade.non-central.file" default="NOT SET"/>
	
		<sequential>
			<switch value="${database.type}">
				<case value="oracle">
					<property name="database.driver.file" value="${build-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				</case>
				<case value="mysql">
					<property name="database.driver.file" value="${build-utils.dir}/mysql-connector-java-5.1.13.jar"/>
					<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				</case>
				<case value="postgresql">
					<property name="database.driver.file" value="${build-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
					<property name="database.driver" value="org.postgresql.Driver"/>
				</case>
				<default>
					<fail message="Invalid database type ${database.type}"/>
				</default>
			</switch>
			<antcall target="install:database:prep" inheritall="true">
				<param name="database.url" value="@{database.url}"/>
				<param name="database.user" value="@{database.user}"/>
				<param name="database.password" value="@{database.password}"/>
				<param name="database.name" value="@{database.name}"/>
				<param name="database.type" value="@{database.type}"/>
				<param name="db.dir.dest" value="${basedir}/working/@{database.dir.src}"/>
				<param name="db.dir.src" value="${basedir}/@{database.dir.src}"/>				
			</antcall>
			<validate-pre-install-database 
				database.driver="@{database.driver}" database.system.url="@{database.system.url}" 
				database.system.user="@{database.system.user}" database.system.password="@{database.system.password}" 
				database.url="@{database.url}" database.user="@{database.user}" 
				database.password="@{database.password}" database.version="@{database.version}" 
				database.name="@{database.name}" database.type="@{database.type}" />
			<database-clean	 
				database.driver="@{database.driver}" database.system.url="@{database.system.url}" 
				database.system.user="@{database.system.user}" database.system.password="@{database.system.password}" 
				database.url="@{database.url}" database.user="@{database.user}" 
				database.password="@{database.password}" database.version="@{database.version}" 
				database.name="@{database.name}" database.schema="@{database.schema}" 
				database.re-create="@{database.re-create}" 
				database.server="@{database.server}"
				database.drop-schema="@{database.drop-schema}" 
				/>
			
			<switch value="${database.type}">
				<case value="oracle">
				   <database-install		
						db.install.create.file.list="@{db.install.create.oracle.file.list}"
						db-install.dir="@{db.install.dir}"
						sql.delimiter="/" sql.delimitertype="row"
						database.url="@{database.url}"
						database.user="@{database.user}"
						database.password="@{database.password}"						
					/>
				</case>
				<case value="postgresql">
					<database-install
						db.install.create.file.list="@{db.install.create.postgresql.file.list}"
						db-install.dir="@{db.install.dir}" 
						sql.delimiter="/" sql.delimitertype="row"
						database.url="@{database.url}"
						database.user="@{database.user}"
						database.password="@{database.password}"							
					/>
				</case>
				<case value="mysql">
					<database-install
						db.install.create.file.list="@{db.install.create.mysql.file.list}"
						db-install.dir="@{db.install.dir}"
						database.url="@{database.url}"
						database.user="@{database.user}"
						database.password="@{database.password}"
					 />
				</case>
			</switch>
			
		  </sequential>
	</macrodef>
	
	<target name="re-configure-ear">
		<property name="temp.ear.dir" value="tempEAR"/>
		<available file="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}.org" property="upt.ear.org.present"/>
		<if>
			<equals arg1="${upt.ear.org.present}" arg2="true"/>
			<then>
				<copy file="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}.org" tofile="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}" overwrite="true"/>
			</then>
			<else>
				<copy file="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}" tofile="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}.org"/>
			</else>
		</if>
		<unzip dest="${temp.ear.dir}" src="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}"/>

		<if>
		<equals arg1="${SERVER_TYPE}" arg2="jboss" casesensitive="false"/>
			<then>
					<property name="upt.jndi.name.value" value="/${upt.central.jndi.name}"/>
					<property name="upt.database.dialect" value="${upt.central.database.dialect}"/>
			</then>
			<else>
					<property name="upt.jndi.name.value" value="comp/env/${upt.central.jndi.name}"/>
					<property name="upt.database.dialect" value="${upt.central.database.dialect}"/>
			</else>
		</if>
		
		<!-- unzip uptlogin.war and replace dialect, jndi, repackage war and delete temp dirs -->

		<filterset id="upt.database.dialect.filterset">
			<filter token="database.dialect" value="${upt.database.dialect}" />
		</filterset>
		<filterset id="upt.database.jndi.filterset">
			<filter token="datasource.jndi.name" value="${upt.jndi.name.value}" />
		</filterset>

		<unzip dest="${temp.ear.dir}/tempupt" src="${temp.ear.dir}/${upt.central.url.context.name}.war"/>
		<mkdir dir="${temp.ear.dir}/upt"/>
		<copy todir="${temp.ear.dir}/upt" overwrite="true">
				<fileset dir="${temp.ear.dir}/tempupt"/>
		</copy>
		<copy todir="${temp.ear.dir}/upt" overwrite="true">
				<fileset dir="${temp.ear.dir}/tempupt">
							<include name="**/*.csm.new.hibernate.cfg.xml" />
						</fileset>
				<filterset refid="upt.database.dialect.filterset"/>
				<filterset refid="upt.database.jndi.filterset"/>
		</copy>
		<if>
		<equals arg1="${SERVER_TYPE}" arg2="jboss" casesensitive="false"/>
		<then>
			<delete file="${temp.ear.dir}/upt/WEB-INF/lib/log4j-1.2.16.jar"/>
		</then>
		</if>
		<copy todir="${jboss.home}/server/${jboss.server.name}/lib" file="${temp.ear.dir}/upt/WEB-INF/lib/clm-4.1.1.jar"/>
		<copy todir="${jboss.home}/server/${jboss.server.name}/lib" file="${build-utils.dir}/bcprov-jdk15on-147.jar"/>
		<copy todir="${jboss.home}/server/${jboss.server.name}/csmconfig/" overwrite="true">
			<fileset dir="${temp.ear.dir}/upt/WEB-INF/classes">
				<include name="csmupt.csm.new.hibernate.cfg.xml" />
			</fileset>
		</copy>
		<jar jarfile="${temp.ear.dir}/${upt.central.url.context.name}.war" basedir="${temp.ear.dir}/upt" />
		<delete dir="${temp.ear.dir}/tempupt" quiet="true"/>
		<delete dir="${temp.ear.dir}/upt" quiet="true"/>

		<!-- Create ear file and place in ear directory -->
		<jar jarfile="${upt.dist.relative.dir}/${dist.relative.ear.dir}/${upt.ear.file}" basedir="${temp.ear.dir}" />
		<!--<delete dir="${temp.ear.dir}" quiet="true"/>-->
	</target>
	
	<macrodef name="re-configure-application-xml">
		<attribute name="upt.context.name" default="NOT SET" />
		<attribute name="temp.dir" default="NOT SET" />
		<sequential>
			<xmltask preservetype="true" failWithoutMatch="true"
							source="@{temp.dir}/META-INF/application.xml"
							dest="@{temp.dir}/META-INF/application.xml">
				<remove path="/application/module[@id='@{upt.context.name}']" />
			</xmltask>
		</sequential>
	</macrodef>

	<!--
	<target name="upgrade:jboss:readers:build" if="jboss.exists">
	</target>
	-->

	<target name="common:init" depends="common:init:pre">
		<property name="install.running" value="true"/>
		<!-- upt-ear can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"/>
		<property name="properties.template.file" value="${basedir}/properties.template" />
		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
	</target>

<!--
	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		-set:jboss:upt:application:url,
		upgrade:common:init,
		common:init,
		common:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		upgrade:upt:databases,
		upgrade:jboss
		">
	</target>
-->

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		-set:jboss:upt:application:url,
		common:init,
		install:jboss:init,
		common:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		upgrade:upt:databases,
		install:jboss:validation:pre-install:ports,
		install:common:clean,
		install:jboss,
		install:common:post,
		install:jboss:start,
		install:common:validation:post-install
		">
	</target>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application"
		depends="
		common:init,
		install:jboss:init,
		common:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:common:clean,
		install:upt:databases,
		install:jboss,
		install:common:post,
		install:jboss:start,
		install:common:validation:post-install
		">
	</target>
	
	<target name="upgrade:database:readers:build" depends="upgrade:jboss:init:prep" if="jboss.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>
		<!--<jboss-read-dbconfig
			jboss.home="${read.jboss.home}"
			jboss.ds-xml.file="build-blueprints-ds.xml"
			/>-->
	</target>
	
	<target name="upgrade:common:init" depends="upgrade:jboss:init" unless="install.running">
	</target>
	
	<!-- Upgrade with No Container Modification (NCM) -->
	<!--
	<target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:upt-ear,
		install:jboss:upt-ear:configure,
		install:jboss:configure:login:config,
		install:jboss:configure:application:context,
		upgrade:upt:databases,
		install:jboss:configure:datasources,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		">
	</target>
	-->
	
	<target name="upgrade:upt:databases" description="Upgrades database using build Datbase Upgrade process." unless="exclude.database">
		<echo message="execute for non central database"/>		
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db-install.dist.relative.dir}/db-upgrade/${upt.dist.relative.dir}/uptcentral">
				<include name="**/db-upgrade*.xml"/>
				<include name="**/MigrationScript*.xml"/>
			</fileset>
			<filterset>
				<filter token="os.temp.dir" value="${os.temp.dir}" />
				<filter token="project.name" value="${project.name}" />
			</filterset>
		</copy>

		<upgrade-upt-database
			database.system.url="${upt.central.database.system.url}" database.name="${upt.central.database.name}" 
			database.system.password="${upt.central.database.system.password}"  
			database.system.user="${upt.central.database.system.user}"
			database.url="${upt.central.database.url}" 
			database.user="${upt.central.database.user}" 
			database.password="${upt.central.database.password}" 
			database.type="${upt.central.database.type}" 
			database.upgrade.schema.file="${upt.central.db.upgrade.file}" />
	</target>
	
	<macrodef name="upgrade-upt-database">
		<attribute name="database.system.url" default="NOT SET" />
		<attribute name="database.system.user" default="NOT SET" />
		<attribute name="database.system.password" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.name" default="NOT SET" />
		<attribute name="database.type" default="NOT SET"/>
		<attribute name="database.upgrade.schema.file" default="NOT SET"/>
		
		<sequential>
			<switch value="@{database.type}">
				<case value="oracle">
					<property name="database.driver.file" value="${build-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
					<property name="database.upgrade.driver" value="oracle.jdbc.driver.OracleDriver"/>
				</case>
				<case value="mysql">
					<property name="database.driver.file" value="${build-utils.dir}/mysql-connector-java-5.1.13.jar"/>
					<property name="database.upgrade.driver" value="com.mysql.jdbc.Driver"/>
				</case>
				<case value="postgresql">
					<property name="database.driver.file" value="${build-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
					<property name="database.upgrade.driver" value="org.postgresql.Driver"/>
				</case>
				<default>
					<fail message="Invalid database type ${database.type}"/>
				</default>
			</switch>
			<echo message="database.driver=${database.upgrade.driver}"/>
            <echo message="database.system.url=@{database.system.url} "/>
            <echo message="database.system.user=@{database.system.user}"/>
            <echo message="database.system.password=@{database.system.password} "/>
            <echo message="database.url=@{database.url}"/>
            <echo message="database.user=@{database.user} "/>
            <echo message="database.password=@{database.password}"/>
            <echo message="database.name=@{database.name}"/>
            <echo message="database.type=@{database.type}"/>
			<validate-pre-install-database
						database.driver="${database.upgrade.driver}" database.system.url="@{database.system.url}" 
						database.system.user="@{database.system.user}" database.system.password="@{database.system.password}" 
						database.url="@{database.url}" database.user="@{database.user}" 
						database.password="@{database.password}"
						database.name="@{database.name}" database.type="@{database.type}"
			/>
			<database-upgrade database.driver="${database.upgrade.driver}" database.url="@{database.url}" 
							  database.user="@{database.user}" database.password="@{database.password}" 
							  database.schema="@{database.name}"
							  database.changelog.file="${os.temp.dir}/${project.name}/@{database.upgrade.schema.file}"/>

			<database-tag database.driver="${database.upgrade.driver}" database.url="@{database.url}"
						  database.user="@{database.user}" database.password="@{database.password}" 
						  database.schema="@{database.name}" />
	   </sequential>
	</macrodef>


<target name="install:jboss:upt-ear:re-configure" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." unless="exclude.jboss"  depends="common:init"/>

<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		common:init,
		install:jboss:init,
		common:jboss:init,
		-set:jboss:upt:application:url,
		install:jboss:validation:pre-install,
		install:common:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:upt-ear,
		install:jboss:upt-ear:configure,
		install:jboss:configure,
		install:jboss:configure:login:config,
		install:jboss:configure:application:context,
		install:jboss:configure:datasources,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>


	<!-- Upgrade with Disposable Application Conttainer (DAC) -->
	<target name="upgrade-dac:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		-set:jboss:upt:application:url,
		install:jboss:validation:pre-install,
		install:common:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:upt-ear,
		install:jboss:upt-ear:configure,
		install:jboss:configure,
		install:jboss:configure:login:config,
		install:jboss:configure:application:context,
		upgrade:upt:databases,
		install:jboss:configure:datasources,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>
	<target name="upgrade-dac" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:common:clean,
		upgrade:upt:databases,
		upgrade:jboss,
		install:common:post,
		install:jboss:start,
		install:common:validation:post-install
		">
	</target>
	<!-- Upgrade with Container Modification(CM) -->
	<target name="upgrade-cm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		-set:jboss:upt:application:url,
		install:jboss:validation:pre-install,
		install:common:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:upt-ear,
		install:jboss:upt-ear:configure,
		install:jboss:configure,
		install:jboss:configure:login:config,
		install:jboss:configure:application:context,
		install:jboss:configure:datasources,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>
	<target name="upgrade-cm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:jboss:init,
		install:common:validation:pre-install,
		install:jboss:validation:pre-install,
		install:database:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:common:clean,
		upgrade:database,
		upgrade:jboss,
		install:common:post,
		install:jboss:start,
		install:common:validation:post-install
		">
	</target>
	<!-- Upgrade with No Container Modification (NCM) -->
	<target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		-set:jboss:upt:application:url,
		install:jboss:validation:pre-install,
		install:common:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:upt-ear,
		install:jboss:upt-ear:configure,
		install:jboss:configure:application:context,
		install:jboss:configure:datasources,
		upgrade:post:jboss,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>


	<target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
		depends="
		upgrade:jboss:init,
		common:init,
		common:jboss:init,
		-set:jboss:upt:application:url,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:upt-ear,
		install:jboss:upt-ear:configure,
		install:jboss:configure:application:context,
		install:jboss:configure:datasources,
		install:jboss:start"
		 >
	</target>

	<target name="upgrade:jboss:readers:build" if="jboss.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,jboss.home,jboss.server.name"
			/>
		<!-- Set these -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="jboss.server.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="jboss.server.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<!-- Begin JBoss Readers -->
		<!-- Reader reqiures that you have only one data source defined in each *-ds.xml file -->
		<!--
		<jboss-read-dbconfig
			jboss.home="${read.jboss.home}"
			jboss.ds-xml.file="build-blueprints-ds.xml"
			/>
		<jboss-read-ldapconfig
			jboss.home="${read.jboss.home}"
			/>
		-->
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-read-bindings-file-location jboss.home="${read.jboss.home}"/>
                <jboss-read-ports/>
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <jboss51-read-default-portconfig/>
                <jboss51-read-ports-nci/>
            </then>
        </if>
		<!-- for tier installs, should be done first, since it is set first it will be the one used if it exists -->
		<jboss-read-java_opts
			jboss.bin.dir="${read.jboss.home}/server/${jboss.server.name}/bin"
			/>
		<jboss-read-java_opts
			jboss.home="${read.jboss.home}"
			/>
	</target>
	 <target name="upgrade:post:jboss">
	 </target>
	 
	<target name="migration:set-classpath" description="">
		<unzip dest="./tempEAR/${upt.central.url.context.name}" src="./tempEAR/${upt.central.url.context.name}.war"/>
	</target>

	<target name="migration:run" depends="migration:set-classpath" description="">
		<path id="project.classpath">
			<fileset dir="./tempEAR/${upt.central.url.context.name}/WEB-INF/lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${build-utils.dir}">
				<include name="**/*.jar" />
			</fileset>			
		</path>
	       <java classname="gov.nih.nci.migration.MigrationDriver"	       		
			classpathref="project.classpath">
			
			<arg value="${upt.central.database.type}"/>
			<arg value="${upt.central.database.user}"/>
			<arg value="${upt.central.database.password}"/>
			
			<arg value="${upt.central.database.server}"/>
			<arg value="${upt.central.database.port}"/>
			<arg value="${upt.central.database.name}"/>
		</java>
	</target>	 
</project>
