<?xml version="1.0" encoding="utf-8" ?>

<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC, SAIC-Frederick

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/common-security-module/LICENSE.txt for details.
L-->

<project name="csm-bkwrds" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		Builds the CSM/UPT application.
	</description>
	<property file="local.properties" />
	<property file="project.properties" />

	<property name="software.dir" location=".." />
	<property name="db.src.dir" value="${software.dir}/${db-install.dist.relative.dir}" />

	<property name="upt.dir" value="${software.dir}/upt" />
	<property name="upt.central.scripts.dir" value="${upt.dir}/uptEAR/scripts/" />

	<property name="build-blueprints-webapp.install.zip.file" value="${csm.install.zip.file}"/>
    <property name="build-blueprints-webapp.upgrade.zip.file" value="${csm.upgrade.zip.file}"/>
    <property name="csmupt.install.zip.file" value="${csm.install.zip.file}"/>
    <property name="csmupt.upgrade.zip.file" value="${csm.upgrade.zip.file}"/>


	<property name="db-upgrade.dist.dir" value="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />

	<property name="ivy.settings.dir" value="${basedir}/../common" />
	<property name="ivy.settings.file" value="ivysettings.xml" />

	<import file="build-master-build.xml"/>
	
	<!--<import file="install.xml"/>-->

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<!-- Working directory passed to Ant tasks -->
	<property name="upt.base.dir" location="${software.dir}/upt" />
	<property name="upt.resources.dir" location="${upt.base.dir}/uptEAR/resources" />
	<property name="upt.build.file" value="build.xml" />
	<property name="upt.dist.dir" location="${dist.exploded.dir}/${upt.dist.relative.dir}" />

	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
		<delete dir="${target.dir}" failonerror="false"/>
	</target>

	<target name="init"  description="Sets up build are and initalizes variables">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${upt.dist.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${target.dir}/artifacts" />
		<mkdir dir="${target.dir}/modules" />
		<mkdir dir="${target.dir}/csmconfig" />
		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${jbosscp.dest.file}" property="jbosscp.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
		<!-- If jboss is required to build, then check for jboss in jboss.home, then check for in jboss in working directory, if not found then download it into this that directory.  If found at any point set local.jboss.home to where it is found.  This can be passed to sub-projects so then can compile code against distribution.  This is especially important on AntHillPro server which will not have jboss present, thus will have to use a copy in the working area.  This also makes it easier to start the project, if the developer does not yet have jboss installed, build will download it and install it so build can proceed. -->
		<if>
			<equals arg1="${require.jboss}" arg2="true" />
			<then>
				<available file="${jboss.home}/lib/commons-httpclient.jar" property="rt.jboss.exists" />
				<if>
					<isset property="rt.jboss.exists" />
					<then>
						<property name="local.jboss.home" location="${jboss.home}" />
						<echo message="JBOSS_HOME exists ${jboss.home}" />
					</then>
					<else>
						<property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}" />
						<available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists" />
						<echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}" />
						<if>
							<not>
								<isset property="local.jboss.exists" />
							</not>
							<then>
								<echo message="LOCAL_JBOSS_HOME not found downloading." />
								<antcall target="dist:tools:retrieve:jboss" />
								<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
									<arg line="-installGroup ejb3 installpath=${local.jboss.home}" />
								</java>
							</then>
							<else>
								<echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}" />
							</else>
						</if>
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="build:upt" depends="init,clean">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="all" dir="${upt.base.dir}">
		</ant>
	</target>

	<target name="compile:all" description="Used by static-analysis, required since dist target cleans up generated classes that are required by some static analysis tools" depends="
			init,
			compile:upt
	"/>

	<target name="compile:upt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="compile" dir="${upt.base.dir}" />
	</target>

	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:upt">
	</target>

	<target name="dist:installer:prep"  description="Copies artifacts not generated by sub-project builds into the install distribution area">

		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="build-master-install.xml" />
			</fileset>
			<fileset dir="${software.dir}/common/resources/jboss-eap">
				<include name="*.*" />
			</fileset>
			<filterset>
				<filterset>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>

		<!-- copies sql files to exploded folder for application : upt31,upt32,upt40,upt41,upt42,uptcentral and required xml and properties files -->
		<!-- <copyInstallSQLFiles upt.version="uptcentral" input.dir="${software.dir}/common/resources/db/db-install"/> -->

		<!-- <copyUpgradeSQLFiles upt.version="uptcentral" input.dir="${software.dir}/common/resources/db/db-upgrade"/> -->
		
		<dist-prep />
		
	</target>

	<target name="dist:installer" depends="build:all,dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${csmupt.install.zip.file}" />
		<!-- Set environment name to external -->
		<delete file="${dist.exploded.dir}/upgrade.properties"/>
		<replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="jboss.base.path.windows,jboss.base.path.linux,application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
			optional.property.list="ldap.url,ldap.basedn"
			delete.property.list="exclude.jboss.backup"
			/>
		<zip destfile="${dist.dir}/${csmupt.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<target name="dist" depends="dist:installer,dist:upgrader" description="Builds Install and Upgrade distribution files"/>


	<target name="dist:upgrader:prep" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<!-- Copy db-upgrade scripts from source into distribution area. The db files need to be under db-upgrade/${database.type}. This has not been moved to the macro because the source and dest structure may not be the same and thus this would need to be custom. -->
		<!-- upgrade sql scripts for remote deployment -->

		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="build-master-install.xml" />
			</fileset>
			<fileset dir="${upt.resources.dir}">
				<include name="*ApplicationSecurityConfig.xml" />
				<include name="*upt-ds-template.xml" />
				<include name="*login-config-template.xml" />
				<!--<include name="*csmupt*.csm.hibernate.cfg.xml" />-->
			</fileset>
			<filterset>
				<filterset>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>

		<!-- For non DAC upgrades -->
		<dist-prep
			copy.tools.flag="N"
			default.target="upgrade"
		/>


		<!-- For DAC upgrades -->
		<dist-prep
			copy.tools.flag="Y"
			default.target="upgrade"
			/>
		
	</target>

	<target name="dist:upgrader" depends="build:all,dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${csmupt.upgrade.zip.file}" />
		<!-- Set environment name to external -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>              
		</copy>         
		<delete file="${dist.exploded.dir}/install.properties"/>
		<replaceregexp file="${dist.exploded.dir}/upgrade.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />

		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/upgrade.properties"
			comment.property.list="application.base.path.windows,application.base.path.linux,jboss.relative.path,tomcat.relative.path"
			uncomment.property.list="application.base.path,tomcat.home,jboss.home"
			required.property.list="application.base.path,jboss.home,jboss.server.name,tomcat.home"
			optional.property.list=""
			delete.property.list=""
			/>
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />
		<zip destfile="${dist.dir}/${csmupt.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>

	<target name="deploy:ear" description="Configures UPT application, JBOSS CLI, creates database, and deploys application"
		depends="
		install:common:clean,
		install:jboss:configure:upt-ear,
		install:jboss:configure:application:context
		">
	</target>

	<target name="configure:eap" description="Configures UPT application, JBOSS CLI, creates database, and deploys application"
		depends="
		install:configure:eap,
		install:jboss:configure:login:config
		">
	</target>

	<target name="dist:anthill" depends="clean,init,configure:pre-build,build:upt,dist:anthill:prep,configure:eap,install:jboss:upt-ear:configure, dist:anthill:configure:application:context">
			
	</target>

	<target name="install:configure:eap" description="Deploy upt and common libraries to jboss installation" depends="common:init">
		<switch value="${database.type}">
			<case value="oracle">
				<mkdir dir="${target.dir}/modules/oracle"/>
				<copy todir="${target.dir}/modules/oracle" overwrite="true">
						<fileset dir="../common/resources/jboss-eap/modules/oracle"/>
				</copy>
				<property name="database.driver.file" value="${build-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
				<property name="database.schema" value="${database.user}"/>
				<property name="db.driver.name" value="oracle"/>
				<property name="db.module.name" value="oracle"/>
				<property name="db.connection.url" value="jdbc:oracle:thin:@${upt.central.database.server}:${upt.central.database.port}:${upt.central.database.name}"/>
				<property name="db.type" value="oracle"/>
				<property name="db.driver.jar" value="ojdbc14-10.2.0.3.0.jar"/>
			</case>
			<case value="mysql">
				<mkdir dir="${target.dir}/modules/mysql"/>
				<copy todir="${target.dir}/modules/mysql" overwrite="true">
						<fileset dir="../common/resources/jboss-eap/modules/mysql"/>
				</copy>
				<property name="database.driver.file" value="${build-utils.dir}/mysql-connector-java-5.1.32-bin.jar"/>
				<property name="db.driver.name" value="mysql"/>
				<property name="db.module.name" value="mysql"/>
				<property name="db.connection.url" value="jdbc:mysql://${upt.central.database.server}:${upt.central.database.port}/${upt.central.database.name}"/>
				<property name="db.type" value="mysql"/>
				<property name="db.driver.jar" value="mysql-connector-java-5.1.32-bin.jar"/>
			</case>
			<case value="postgresql">
				<mkdir dir="${target.dir}/modules/postgresql"/>
				<copy todir="${target.dir}/modules/postgresql" overwrite="true">
						<fileset dir="../common/resources/jboss-eap/modules/postgresql"/>
				</copy>
				<property name="database.driver.file" value="${build-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
				<property name="db.driver.name" value="postgresql"/>
				<property name="db.module.name" value="postgresql"/>
				<property name="db.connection.url" value="jdbc:postgresql://${upt.central.database.server}:${upt.central.database.port}/${upt.central.database.name}"/>
				<property name="db.type" value="postgresql"/>
				<property name="db.driver.jar" value="postgresql-8.4-701.jdbc3.jar"/>
			</case>
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>

		<filterset id="cli.filterset">
			<filter token="db.driver.name" value="${db.driver.name}" />
			<filter token="db.module.name" value="${db.module.name}" />
			<filter token="db.connection.url" value="${db.connection.url}" />
			<filter token="upt.version.database.name" value="${upt.central.database.name}" />
			<filter token="db.type" value="${db.type}" />
			<filter token="db.driver.jar" value="${db.driver.jar}" />
			<filter token="db.username" value="${upt.central.database.user}" />
			<filter token="db.password" value="${upt.central.database.password}" />
			<filter token="db.driver.class.name" value="${upt.central.database.driver.class}" />
			<filter token="jboss.home" value="${jboss.home}" />
		</filterset>
		<copy todir="${target.dir}/artifacts" overwrite="true">
			<fileset dir="../common/resources/jboss-eap">
				<include name="*csmupt_jboss_eap_*.cli" />
			</fileset>
			<filterset>
				<filterset refid="cli.filterset"/>
				<filterset>
					<filtersfile file="${properties.file}"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>
		<echo message="copy...done"/>		
		<mkdir dir="${target.dir}/modules/gov"/>
		<mkdir dir="${target.dir}/modules/org"/>
		<copy todir="${target.dir}/modules/gov" overwrite="true">
				<fileset dir="../common/resources/jboss-eap/modules/gov"/>
		</copy>
		<copy todir="${target.dir}/modules/org" overwrite="true">
				<fileset dir="../common/resources/jboss-eap/modules/org"/>
		</copy>
	</target>


	<target name="install:jboss:upt-ear:configure" depends="common:init">

		<available file="${target.dir}/csmconfig/ApplicationSecurityConfig.xml" property="application.security.config.file.present"/>
		<if>
			<equals arg1="${application.security.config.file.present}" arg2="true"/>
			<then>
				<move file="${target.dir}/csmconfig/ApplicationSecurityConfig.xml" tofile="${target.dir}/csmconfig/ApplicationSecurityConfig.xml.orginal" overwrite="true"/>
			</then>
		</if>

		<filterset id="upt.filterset">
			<filter token="upt.version.database.url.prefix" value="${upt.central.database.url.prefix}" />
			<filter token="upt.version.database.server" value="${upt.central.database.server}" />
			<filter token="upt.version.database.port" value="${upt.central.database.port}" />
			<filter token="upt.version.database.name" value="${upt.central.database.name}" />
			<filter token="upt.version.database.user" value="${upt.central.database.user}" />
			<filter token="upt.version.database.password" value="${upt.central.database.password}" />
			<filter token="upt.version.database.dialect" value="${upt.central.database.dialect}" />
			<filter token="upt.version.database.driver.class" value="${upt.central.database.driver.class}" />
		</filterset>

		<filterset id="upt.context.filterset">
			<filter token="upt.context.name" value="csmupt" />
		</filterset>
		<copy todir="${target.dir}/csmconfig" overwrite="true">
			<fileset dir="../common/resources/jboss-eap/csmconfig">
				<include name="*ApplicationSecurityConfig.xml" />
			</fileset>
			<filterset>
				<filterset refid="upt.filterset"/>
				<filterset refid="upt.context.filterset"/>				
				<filterset>
					<filtersfile file="${properties.file}"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>
		<copy todir="${target.dir}/artifacts" overwrite="true">
			<fileset dir="${dist.exploded.dir}/upt/uptEAR">
				<include name="*uptEAR.ear" />
			</fileset>
		</copy>
	</target>

	<target name="install:jboss:configure:login:config" description="Configure login config software/common/resource/jboss-conf/login-config.block.xml" unless="exclude.jboss" depends="common:init">
		<configure-login-config 
				authentication.type="${upt.central.authentication.type}" application.context.name="${application.context.name}"
				database.driver="${upt.central.database.driver.class}" database.url="${upt.central.database.url}"
				database.user="${upt.central.database.user}" database.password="${upt.central.database.password}"
				database.encrypt.enabled="${upt.central.database.encrypt.enabled}" 
				ldaps.url="${upt.central.ldaps.url}" ldaps.basedn="${upt.central.ldaps.basedn}" ldaps.userid.label="${upt.central.ldaps.userid.label}"
				ldap.url="${upt.central.ldap.url}" ldap.searchable.base="${upt.central.ldap.searchable.base}"	ldap.userid.label="${upt.central.ldap.userid.label}"
				ldap.admin.user.name="${upt.central.ldap.admin.user.name}" ldap.admin.user.password="${upt.central.ldap.admin.user.password}"
		/>
	</target>

	<macrodef name="configure-login-config">
		<attribute name="authentication.type" default="NOT SET" />
		<attribute name="application.context.name" default="NOT SET" />
		<attribute name="ldaps.url" default="NOT SET" />
		<attribute name="ldaps.basedn" default="NOT SET" />
		<attribute name="ldaps.userid.label" default="NOT SET" />
		<attribute name="ldap.url" default="NOT SET" />
		<attribute name="ldap.searchable.base" default="NOT SET" />
		<attribute name="ldap.userid.label" default="NOT SET" />
		<attribute name="ldap.admin.user.name" default="NOT SET" />
		<attribute name="ldap.admin.user.password" default="NOT SET" />
		<attribute name="database.driver" default="NOT SET" />
		<attribute name="database.url" default="NOT SET" />
		<attribute name="database.user" default="NOT SET" />
		<attribute name="database.password" default="NOT SET" />
		<attribute name="database.encrypt.enabled" default="NOT SET" />
			
		<sequential>
			<if>
				<equals arg1="@{authentication.type}" arg2="ldaps" />
				<then>
				<property name="loginmodule.type" value="gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule"/>
				<property name="loginmodule.options" value='("ldapHost"=>"@{ldaps.url}"), ("ldapSearchableBase"=>"@{ldaps.basedn}"), ("ldapUserIdLabel"=>"@{ldaps.userid.label}")'/>
				<replaceregexp file="${target.dir}/artifacts/csmupt_jboss_eap_conf.cli" match="@loginmodule.type@" replace="${loginmodule.type}" flags="g"/>
				<replaceregexp file="${target.dir}/artifacts/csmupt_jboss_eap_conf.cli" match="@loginmodule.options@" replace="${loginmodule.options}" flags="g"/>
			</then>
			<elseif>
				<equals arg1="@{authentication.type}" arg2="ldap" />
				<then>
				<property name="loginmodule.type" value="gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule"/>
				<property name="loginmodule.options" value='("ldapHost"=>"@{ldaps.url}"), ("ldapSearchableBase"=>"@{ldaps.basedn}"), ("ldapUserIdLabel"=>"@{ldaps.userid.label}"), ("ldapAdminUserName"=>"@{ldap.admin.user.name}"), ("ldapAdminPassword"=>"@{ldap.admin.user.password}")'/>
				<replaceregexp file="${target.dir}/artifacts/csmupt_jboss_eap_conf.cli" match="@loginmodule.type@" replace="${loginmodule.type}" flags="g"/>
				<replaceregexp file="${target.dir}/artifacts/csmupt_jboss_eap_conf.cli" match="@loginmodule.options@" replace="${loginmodule.options}" flags="g"/>
				</then>
			</elseif>
			<elseif>
				<equals arg1="@{authentication.type}" arg2="db" />
				<then>
				<property name="loginmodule.type" value="gov.nih.nci.security.authentication.loginmodules.RDBMSLoginModule"/>
				<property name="loginmodule.options" value='("driver"=>"@{database.driver}"), ("url"=>"@{database.url}"), ("user"=>"@{database.user}"), ("passwd"=>"@{database.password}"), ("query"=>"SELECT * FROM CSM_USER WHERE LOGIN_NAME=? and PASSWORD=?"), ("encryption-enabled"=>"@{database.encrypt.enabled}")'/>
				<replaceregexp file="${target.dir}/artifacts/csmupt_jboss_eap_conf.cli" match="@loginmodule.type@" replace="${loginmodule.type}" flags="g"/>
				<replaceregexp file="${target.dir}/artifacts/csmupt_jboss_eap_conf.cli" match="@loginmodule.options@" replace="${loginmodule.options}" flags="g"/>
				</then>
		</elseif>
		<else>
			<fail message="@{authentication.type} is not a valid authentiation type, please change to db or ldap and re-run the build." />
		</else>
		</if>	
		</sequential>
	</macrodef>

	<target name="configure:pre-build" description="Configures UPT">
		<filterset id="upt.filterset">
			<filter token="upt.version.database.url.prefix" value="${upt.central.database.url.prefix}" />
			<filter token="upt.version.database.server" value="${upt.central.database.server}" />
			<filter token="upt.version.database.port" value="${upt.central.database.port}" />
			<filter token="upt.version.database.name" value="${upt.central.database.name}" />
			<filter token="upt.version.database.user" value="${upt.central.database.user}" />
			<filter token="upt.version.database.password" value="${upt.central.database.password}" />
			<filter token="upt.version.database.dialect" value="${upt.central.database.dialect}" />
			<filter token="upt.version.database.driver.class" value="${upt.central.database.driver.class}" />
			<filter token="datasource.jndi.name" value="${upt.central.jndi.name}" />			
		</filterset>

		<filterset id="upt.context.filterset">
			<filter token="upt.context.name" value="csmupt" />
		</filterset>
	
		<copy todir="${upt.base.dir}/webapp/src" overwrite="true">
			<fileset dir="${upt.resources.dir}">
				<include name="*csmupt*.csm.new.hibernate.cfg.xml" />
			</fileset>
			<filterset>
				<filterset refid="upt.filterset"/>
				<filterset refid="upt.context.filterset"/>
				<filterset>
					<filtersfile file="install.properties"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>			
	</target>

	<target name="dist:anthill:prep" description="Package for anthill to pickup">
		<filterset id="upt.filterset">
			<filter token="upt.version.database.url.prefix" value="${upt.central.database.url.prefix}" />
			<filter token="upt.version.database.server" value="${upt.central.database.server}" />
			<filter token="upt.version.database.port" value="${upt.central.database.port}" />
			<filter token="upt.version.database.name" value="${upt.central.database.name}" />
			<filter token="upt.version.database.user" value="${upt.central.database.user}" />
			<filter token="upt.version.database.password" value="${upt.central.database.password}" />
			<filter token="upt.version.database.dialect" value="${upt.central.database.dialect}" />
			<filter token="upt.version.database.driver.class" value="${upt.central.database.driver.class}" />
		</filterset>

		<filterset id="upt.context.filterset">
			<filter token="upt.context.name" value="csmupt" />
		</filterset>	

		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${upt.resources.dir}">
				<include name="*ApplicationSecurityConfig.xml" />
				<include name="*upt-ds-template.xml" />
				<include name="*login-config-template.xml" />
			</fileset>
			<filterset>
				<filterset refid="upt.filterset"/>
				<filterset refid="upt.context.filterset"/>
				<filterset>
					<filtersfile file="install.properties"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>
		<copyInstallSQLFiles upt.version="uptcentral" input.dir="${software.dir}/common/resources/db/db-install"/> 
		<copyUpgradeSQLFiles upt.version="uptcentral" input.dir="${software.dir}/common/resources/db/db-upgrade"/>
		<echo message="Coping the Upgrade Files to ${dist.exploded.dir}/${db.dist.relative.dir}/db-upgrade/mysql"/>
		<copy todir="${dist.exploded.dir}/${db.dist.relative.dir}/db-upgrade/mysql" overwrite="true">
			<fileset dir="${upt.dir}/resources">
				<include name="**/db-upgrade-central.xml" />
			</fileset>
		</copy>			
		
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${basedir}">
				<include name="deploy-anthill.xml" />
				<include name="project.properties" />
			</fileset>
		</copy>
	</target>

	<target name="dist:anthill:login:config" description="Configure login config software/common/resource/jboss-conf/login-config.block.xml">
		<echo
			message="Inserting into ${dist.exploded.dir}/login-config-template.xml" />

		<configure-login-config 
			authentication.type="${upt.central.authentication.type}" application.context.name="${application.context.name}"
			database.driver="${upt.central.database.driver.class}" database.url="${upt.central.database.url}"
			database.user="${upt.central.database.user}" database.password="${upt.central.database.password}"
			database.encrypt.enabled="${upt.central.database.encrypt.enabled}" 
			ldaps.url="${upt.central.ldaps.url}" ldaps.basedn="${upt.central.ldaps.basedn}" ldaps.userid.label="${upt.central.ldaps.userid.label}"
			ldap.url="${upt.central.ldap.url}" ldap.searchable.base="${upt.central.ldap.searchable.base}"
			ldap.userid.label="${upt.central.ldap.userid.label}"
			ldap.admin.user.name="${upt.central.ldap.admin.user.name}" 
			ldap.admin.user.password="${upt.central.ldap.admin.user.password}"
		/>
	</target>

	<target name="dist:anthill:configure:datasources" description="Configure login config /deploy/upt-ds.xml">	
		<configure-datasources 	database.url="${upt.central.database.url}" 
			database.user="${upt.central.database.user}" 
			database.password="${upt.central.database.password}" jndi.name="${upt.central.jndi.name}"
			driver.class="${upt.central.database.driver.class}"
			datasource.file="${dist.exploded.dir}/upt-ds-template.xml"
		/>
		<move file="${dist.exploded.dir}/upt-ds-template.xml" tofile="${dist.exploded.dir}/upt-ds.xml"/>
	</target>
	
	<target name="dist:anthill:configure:application:context"
			description="Configure application context config /csmconfig/ApplicationSecurityConfig.xml"
			>
		<configure-application-context-application context.name="${upt.central.context.name}" 
			hibernate.config.file="" 
			application.context.file="${dist.exploded.dir}/ApplicationSecurityConfig.xml"
			/>
		<configure-application-context-upt-application
				context.name="${upt.central.context.name}" url.context.name="${upt.central.url.context.name}"
				hibernate.config.file="${upt.central.hibernate.config.file}" 
				application.context.file="${dist.exploded.dir}/ApplicationSecurityConfig.xml"
				/>
		<copy file="${dist.exploded.dir}/ApplicationSecurityConfig.xml" tofile="${target.dir}/csmconfig/ApplicationSecurityConfig.xml" overwrite="true"/>
	</target>
	
	<target name="anthill:install-database"
			description="Run liqubase to upgrade database"
			>
		<for list="${upt.central.db.install.create.mysql.file.list}" param="db.install.file">
			<sequential>
				<run-sql-script database.url="${upt.central.database.url}"
					database.user="${upt.central.database.user}"
					database.password="${upt.central.database.password}"
					database.driver="${upt.central.database.driver.class}"
					database.driver.file="${build-utils.dir}/mysql-connector-java-5.1.13.jar"
					sql.delimiter=";"
					sql.delimitertype="normal"
					sql.file="${dist.exploded.dir}/common/resources/db/db-install/mysql/@{db.install.file}"
					onerror="abort"/>	
			</sequential>
		</for>
	</target>
		
	<target name="anthill:upgrade-database"
			description="Run liqubase to upgrade database"
			>			
		<database-upgrade	
			database.driver="${upt.central.database.driver.class}"			
			database.driver.file="${build-utils.dir}/mysql-connector-java-5.1.13.jar"
			database.url="${upt.central.database.url}"
			database.user="${upt.central.database.user}"
			database.password="${upt.central.database.password}"
			database.schema="${upt.central.database.name}"
			database.changelog.file="${dist.exploded.dir}/common/resources/db/db-upgrade/mysql/db-upgrade-central-bkwrds.xml"
			/>			
	</target>
	
	
	<!-- Adding the dist:gui-installer target here to copy over eng.xml in izpack -->
	<target name="dist:gui-installer" description="Makes Gui-Installer distribution">
		<delete>
			<fileset dir="${dist.dir}">
				<include name="*.jar" />
			</fileset>
		</delete>

		<gui-installer-prep product.name="${csmupt.install.name}" product.version="${build-blueprints-webapp.version}" build-utils.dir="${build-utils.dir}"/>
		<!-- <delete file="${target.dir}/izpack-4.3/src/lib/resources/eng.xml"/>-->
		<copy todir="${target.dir}/izpack-4.3/src/lib/resources" overwrite="true">
			<fileset dir="${build.dir}/gui-installer">
				<include name="eng.xml" />
			</fileset>
		</copy>
		<copy todir="${target.dir}/izpack-4.3/bin/langpacks/installer" overwrite="true">
			<fileset dir="${build.dir}/gui-installer">
				<include name="eng.xml" />
			</fileset>
		</copy>
		<copy todir="${target.dir}/izpack-4.3/bin/lib/resources" overwrite="true">
			<fileset dir="${build.dir}/gui-installer">
				<include name="eng.xml" />
			</fileset>
		</copy>
		<copy todir="${target.dir}/izpack-custom/resources" overwrite="true">
			<fileset dir="${build.dir}/gui-installer">
				<include name="eng.xml" />
			</fileset>
		</copy>
		<ant inheritAll="false" inheritRefs="false" antfile="install.xml" target="build:installer" dir="${build.dir}/gui-installer">
			<property name="compile.jar.dir" value="${target.dir}/izpack-4.3" />
		</ant>
	</target>

	<macrodef name="copyInstallSQLFiles">
		<attribute name="upt.version" default="NOT SET" />
		<attribute name="input.dir" default="NOT SET" />
		<sequential>
			<copy todir="${dist.exploded.dir}/common/resources/db/db-install/mysql" overwrite="true">
				<fileset dir="@{input.dir}/mysql">
					<include name="*MySQL.sql" />
				</fileset>
			</copy>
			<copy todir="${dist.exploded.dir}/common/resources/db/db-install/oracle" overwrite="true">
				<fileset dir="@{input.dir}/oracle">
					<include name="*Oracle.sql" />
				</fileset>
			</copy>
			<copy todir="${dist.exploded.dir}/common/resources/db/db-install/postgresql" overwrite="true">
				<fileset dir="@{input.dir}/postgresql">
					<include name="*Postgres.sql" />
				</fileset>
			</copy>	
		</sequential>
	</macrodef>


	<macrodef name="copyUpgradeSQLFiles">
		<attribute name="upt.version" default="NOT SET" />
		<attribute name="input.dir" default="NOT SET" />
		<sequential>
			<copy todir="${dist.exploded.dir}/${db.dist.relative.dir}/db-upgrade/mysql" overwrite="true">
				<fileset dir="@{input.dir}/mysql">
					<include name="**/db-upgrade*.xml" />
					<include name="**/MigrationScript*MySQL.xml" />
					<include name="**/MigrationScript*MySQL.sql" />
				</fileset>
			</copy>		
			<copy todir="${dist.exploded.dir}/${db.dist.relative.dir}/db-upgrade/oracle" overwrite="true">
				<fileset dir="@{input.dir}/oracle">
					<include name="**/db-upgrade*.xml" />
					<include name="**/MigrationScript*Oracle.xml" />
					<include name="**/MigrationScript*Oracle.sql" />
				</fileset>
			</copy>		
			<copy todir="${dist.exploded.dir}/${db.dist.relative.dir}/db-upgrade/postgres" overwrite="true">
				<fileset dir="@{input.dir}/postgresql">
					<include name="**/db-upgrade*.xml" />
					<include name="**/MigrationScript*PostgreSQL.xml" />
					<include name="**/MigrationScript*PostgreSQL.sql" />
				</fileset>
			</copy>		
			
		</sequential>
	</macrodef>

	<target name="deploy:local:upgrade" depends="build:all,dist:upgrader:prep" description="Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.">
		<deploy-local
			target.name="${upgrade.target}"
			properties.file="${properties.file}"
			/>
	</target>
	
	<target name="src" depends="init,clean">
		<!--
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="src" dir="${upt.base.dir}">
		</ant>
		-->
		<zip destfile="${dist.dir}/csm-upt-src5.0.zip" basedir="${upt.base.dir}/webapp" />
	</target>

	
</project>
