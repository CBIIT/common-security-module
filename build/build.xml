<?xml version="1.0" encoding="utf-8" ?>
<!-- bda-build-template version 1.0.1 -->
<!--
$Id: build.xml 1593 2009-04-27 21:29:25Z saksass $
$HeadURL: https://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-build-template/software/build/build.xml $
-->

<project name="csm" default="compile:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		Builds the CSM/UPT application.
	</description>
	<property file="local.properties" />
	<property file="project.properties" />
	<property name="properties.file" value="install.properties"/>
	<property name="upgrade.properties.file" value="upgrade.properties"/>

	<property name="software.dir" location=".." />
	<property name="db.src.dir" value="${software.dir}/${db-install.dist.relative.dir}" />
	<property name="db-install.src.dir" value="${db.src.dir}/db-install" />
	<property name="db-upgrade.src.dir" value="${db.src.dir}/db-upgrade" />
	
	<property name="backwads-compatible-upt.install.zip.file" value="backwards-compatible-upt.zip" />
	<property name="cgmmweb.install.zip.file" value="cgmmweb.zip" />

	<property name="ivy.settings.dir" value="${basedir}/../common" />
	<property name="ivy.settings.file" value="ivysettings.xml" />

	<import file="bda-master-build.xml" id="bda-build" />

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<!-- Working directory passed to Ant tasks -->
	<property name="securityws.base.dir" location="${software.dir}/securityws" />
	<property name="csm.base.dir" location="${software.dir}/api" />
	<property name="upt.base.dir" location="${software.dir}/upt" />
	<property name="backwards.compatible.upt.base.dir" location="${software.dir}/backwards_compatible_upt" />
	<property name="backwards.compatible.upt.resources.dir" location="${backwards.compatible.upt.base.dir}/uptEAR/resources" />
	<property name="cgmm.base.dir" location="${software.dir}/cgmmweb" />
	

	<!-- Build file names relative working dir above, if the basedir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
	<property name="upt.build.file" value="build.xml" />
	<property name="backwards.compatible.upt.build.file" value="build.xml" />
	<property name="csm.build.file" value="build.xml" />
	<property name="securityws.build.file" value="build.xml" />
	<property name="cgmm.build.file" value="build.xml" />

	<!-- The target name that should be called from the sub-project build file -->
	<property name="securityws.build.target" value="all" />
	<property name="csm.build.target" value="dist" />
	<property name="upt.build.target" value="all" />
	<property name="backwards.compatible.upt.build.target" value="all" />
	<property name="cgmm.build.target" value="all" />

	<property name="install.upt.target" value="install-upt" />
	<property name="upgrade.upt.target" value="upgrade-upt" />
	<property name="install.cgmm.target" value="install-cgmmweb" />
	<property name="upgrade.cgmm.target" value="upgrade-cgmmweb" />
	<property name="install.backwards.compatible.upt.target" value="install-backwards-compatible-upt" />
	<property name="upgrade.backwards.compatible.upt.target" value="upgrade-backwards-compatible-upt" />

	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="csm.dist.dir" location="${dist.exploded.dir}/${csm.dist.relative.dir}" />
	<property name="securityws.dist.dir" location="${dist.exploded.dir}/${securityws.dist.relative.dir}" />
	<property name="upt.dist.dir" location="${dist.exploded.dir}/${upt.dist.relative.dir}" />
	<property name="backwards.compatible.upt.dist.dir" location="${dist.exploded.dir}/${backwards.compatible.upt.dist.relative.dir}" />
	<property name="exploded.cgmm.dist.dir" location="${dist.exploded.dir}/${cgmmweb.dist.relative.dir}" />

	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
	</target>

	<target name="init"  description="Sets up build are and initalizes variables">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${csm.dist.dir}" />
		<mkdir dir="${upt.dist.dir}" />
		<mkdir dir="${backwards.compatible.upt.dist.dir}" />
		<mkdir dir="${securityws.dist.dir}" />
		<mkdir dir="${exploded.cgmm.dist.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />

		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${jbosscp.dest.file}" property="jbosscp.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
		<!-- If jboss is required to build, then check for jboss in jboss.home, then check for in jboss in working directory, if not found then download it into this that directory.  If found at any point set local.jboss.home to where it is found.  This can be passed to sub-projects so then can compile code against distribution.  This is especially important on AntHillPro server which will not have jboss present, thus will have to use a copy in the working area.  This also makes it easier to start the project, if the developer does not yet have jboss installed, build will download it and install it so build can proceed. -->
		<if>
			<equals arg1="${require.jboss}" arg2="true" />
			<then>
				<available file="${jboss.home}/lib/commons-httpclient.jar" property="rt.jboss.exists" />
				<if>
					<isset property="rt.jboss.exists" />
					<then>
						<property name="local.jboss.home" location="${jboss.home}" />
						<echo message="JBOSS_HOME exists ${jboss.home}" />
					</then>
					<else>
						<property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}" />
						<available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists" />
						<echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}" />
						<if>
							<not>
								<isset property="local.jboss.exists" />
							</not>
							<then>
								<echo message="LOCAL_JBOSS_HOME not found downloading." />
								<antcall target="dist:tools:retrieve:jboss" />
								<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
									<arg line="-installGroup ejb3 installpath=${local.jboss.home}" />
								</java>
							</then>
							<else>
								<echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}" />
							</else>
						</if>
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="ivy:clean" description="Cleans up the ivy cache of this project and all sub-projects">
		<ivy:settings file="${ivy.settings.dir}/${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml" target="ivy-cleancache" dir="${bda-download.dir}">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
			<property name="software.dir" value="${software.dir}" />
		</ant>
		<!-- Clean subproject ivy caches -->
		<ant inheritAll="false" inheritRefs="false" dir="${csm.base.dir}" antfile="${csm.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${securityws.base.dir}" antfile="${securityws.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${upt.base.dir}" antfile="${upt.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${backwards.compatible.upt.base.dir}" antfile="${backwards.compatible.upt.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${cgmm.base.dir}" antfile="${cgmm.build.file}" target="ivy-clean-cache" />
	</target>

	<target name="build:csm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${csm.build.file}" target="${csm.build.target}" dir="${csm.base.dir}">
		</ant>
	</target>

	<target name="build:upt" depends="init, build:csm">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="${upt.build.target}" dir="${upt.base.dir}">
		</ant>
	</target>

	<target name="build:backwards:compatible:upt" depends="init,clean">
		<ant inheritAll="false" inheritRefs="false" antfile="${backwards.compatible.upt.build.file}" target="${backwards.compatible.upt.build.target}" dir="${backwards.compatible.upt.base.dir}">
		</ant>
	</target>

	<target name="build:cgmm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${cgmm.build.file}" target="${cgmm.build.target}" dir="${cgmm.base.dir}">
		</ant>
	</target>

	<target name="build:securityws" depends="init, build:csm">
		<ant inheritAll="false" inheritRefs="false" antfile="${securityws.build.file}" target="${securityws.build.target}" dir="${securityws.base.dir}">
		</ant>
	</target>

	<target name="compile:all" description="Used by static-analysis, required since dist target cleans up generated classes that are required by some static analysis tools" depends="
			init,
			compile:csm,
			compile:upt,
			compile:backwards.compatible.upt,
			compile:securityws,
			compile:cgmm
		"/>

	<target name="compile:csm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${csm.build.file}" target="compile" dir="${csm.base.dir}" />
	</target>

	<target name="compile:upt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="compile" dir="${upt.base.dir}" />
	</target>

	<target name="compile:backwards.compatible.upt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${backwards.compatible.upt.build.file}" target="compile" dir="${backwards.compatible.upt.base.dir}" />
	</target>

	<target name="compile:cgmm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${cgmm.build.file}" target="compile" dir="${cgmm.base.dir}" />
	</target>

	<target name="compile:securityws" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${securityws.build.file}" target="compile" dir="${securityws.base.dir}" />
	</target>

	<target name="dist" description="Makes all distributions: installer, upgrader and source" depends="
		build:all,
		dist:installer,
		dist:upgrader,
		dist:src
		">
	</target>
	
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:upt,
		build:securityws,
		build:cgmm">
	</target>
	
	<target name="build:backwards-compatible-all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:backwards:compatible:upt">
	</target>

	<target name="deploy:local:install:upt"  depends="build:all,dist:installer:prep" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		<!-- Copy install related xml and properties files -->
		<echo message="Copying build files" />
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="bda-master-install.xml" />
				<include name="install-upt.xml" />
				<include name="install-cgmmweb.xml" />
				<include name="install-backwards-compatible-upt.xml" />
			</fileset>
		</copy>
		<deploy-local target.name="${install.upt.target}" />
	</target>

	<target name="deploy:local:install:backwards-compatible-upt"  depends="
		build:backwards-compatible-all,
		dist:installer:prep,
		-copy-backwards-compatible-files" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		
		<!-- Copy install related xml and properties files -->
		<deploy-local target.name="${install.backwards.compatible.upt.target}" />
	</target>

	<target name="deploy:local:upgrade:backwards-compatible-upt"  depends="
		build:backwards-compatible-all,
		dist:installer:prep,
		-copy-backwards-compatible-files" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		
		<!-- Copy install related xml and properties files -->
		<deploy-local target.name="${upgrade.backwards.compatible.upt.target}" />
	</target>
	
	
	<target name="-copy-backwards-compatible-files">
		<echo message="Copying build files" />
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="bda-master-install.xml" />
				<include name="install-upt.xml" />
				<include name="install-cgmmweb.xml" />
				<include name="install-backwards-compatible-upt.xml" />
			</fileset>
			<fileset dir="${backwards.compatible.upt.resources.dir}">
				<include name="*ApplicationSecurityConfig.xml" />
				<include name="*backwards_compatible_upt-ds-template.xml" />
				<include name="*login-config-template.xml" />
				<include name="*csmupt31.hibernate.cfg.xml" />
			</fileset>
			<filterset>
				<filterset>
					<filtersfile file="${properties.file}"/>
					<filtersfile file="project.properties"/>
				</filterset>
			</filterset>
		</copy>
		<copy tofile="${dist.exploded.dir}/install.properties" file="${build.dir}/install-backwards-compatible-upt.properties" overwrite="true"/>
		<copySQLFiles upt.version="upt31" />
		<copySQLFiles upt.version="upt32" />
		<copySQLFiles upt.version="upt40" />
		<copySQLFiles upt.version="upt41" />		
		<copy todir="${dist.exploded.dir}/common/resources/db/db-install/${backwards.compatible.upt.dist.relative.dir}/upt31/mysql" overwrite="true">
			<fileset dir="${target.dir}/${backwards.compatible.upt.dist.relative.dir}/svncheckout/upt31/resources">
				<include name="*MySQL.sql" />
			</fileset>
		</copy>
		<copy todir="${dist.exploded.dir}/common/resources/db/db-install/${backwards.compatible.upt.dist.relative.dir}/upt31/oracle" overwrite="true">
			<fileset dir="${target.dir}/${backwards.compatible.upt.dist.relative.dir}/svncheckout/upt31/resources">
				<include name="*Oracle.sql" />
			</fileset>
		</copy>
	</target>
	
	<!-- ant -Dproperties.file=C:/devroot/scm-private/sdk/properties/dev-install.properties  deploy:remote:install 
		https://wiki.nci.nih.gov/display/BuildandDeploymentAutomation/AHP+-+Testing+command+line+build   -->
	<target name="deploy:remote:install:backwards-compatible-upt" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:backwards-compatible-all,
		-copy-backwards-compatible-files,
		dist:installer:backwards-compatible		
		">
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${project-webapp.install.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application-->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>
	
	<target name="dist:installer:backwards-compatible" depends="dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${project-webapp.install.zip.file}" />
		<!-- Set environment name to external -->
		<delete file="${dist.exploded.dir}/upgrade.properties"/>
		<replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
			optional.property.list="ldap.url,ldap.basedn"
			delete.property.list="exclude.jboss.backup"
			/>
		<zip destfile="${dist.dir}/${backwads-compatible-upt.install.zip.file}" basedir="${dist.exploded.dir}">
		</zip>		
	</target>
	

	<target name="deploy:local:install:cgmmweb" depends="
		build:all,
		dist:installer:prep,
		-copy-cgmm-files" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
		<deploy-local target.name="${install.cgmm.target}" />
	</target>
	
	<target name="-copy-cgmm-files">
		<!-- Copy install related xml and properties files -->
		<echo message="Copying build files" />
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="bda-master-install.xml" />
				<include name="install-cgmmweb.xml" />
				<include name="install-upt.xml" />
				<include name="install-backwards-compatible-upt.xml" />
			</fileset>
		</copy>
		<copy tofile="${dist.exploded.dir}/install.properties" file="${build.dir}/install-backwards-compatible-upt.properties" overwrite="true"/>
		<copy todir="${dist.exploded.dir}/${cgmmweb.dist.relative.dir}/jbossweb-tomcat55-sar-jars" overwrite="true">
			<fileset dir="${lib.dir}/cgmmweb/runtime"/>
		</copy>
		<copy todir="${dist.exploded.dir}/${cgmmweb.dist.relative.dir}/jboss-default-lib-jars" overwrite="true">
			<fileset dir="${lib.dir}/cgmmweb/jboss-default-lib"/>
		</copy>
	</target>
	
	<target name="dist:installer:cgmm" depends="dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${project-webapp.install.zip.file}" />
		<!-- Set environment name to external -->
		<delete file="${dist.exploded.dir}/upgrade.properties"/>
		<replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
			optional.property.list="ldap.url,ldap.basedn"
			delete.property.list="exclude.jboss.backup"
			/>
		<zip destfile="${dist.dir}/${cgmmweb.install.zip.file}" basedir="${dist.exploded.dir}">
		</zip>		
	</target>
	
	<!-- ant -Dproperties.file=C:/devroot/scm-private/sdk/properties/dev-install.properties  deploy:remote:install -->		
	<target name="deploy:remote:install:cgmmweb" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		-copy-cgmm-files,
		dist:installer:cgmm	
		">
		<!-- Call macro to deploy files on desired server
		<deploy-files dist.file="${project-webapp.install.zip.file}" />
		SSH to machine ant run ant command line to install application
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" /> -->
	</target>
	
	<macrodef name="copySQLFiles">
	   <attribute name="upt.version" default="NOT SET"/>
	   <sequential>	   	
		<copy todir="${dist.exploded.dir}/common/resources/db/db-install/${backwards.compatible.upt.dist.relative.dir}/@{upt.version}/mysql" overwrite="true">
			<fileset dir="${target.dir}/${backwards.compatible.upt.dist.relative.dir}/svncheckout/@{upt.version}/resources">
				<include name="*MySQL.sql" />
			</fileset>
		</copy>
		<copy todir="${dist.exploded.dir}/common/resources/db/db-install/${backwards.compatible.upt.dist.relative.dir}/@{upt.version}/oracle" overwrite="true">
			<fileset dir="${target.dir}/${backwards.compatible.upt.dist.relative.dir}/svncheckout/@{upt.version}/resources">
				<include name="*Oracle.sql" />
			</fileset>
		</copy>	
		<copy todir="${dist.exploded.dir}/common/resources/db/db-install/${backwards.compatible.upt.dist.relative.dir}/@{upt.version}/postgres" overwrite="true">
			<fileset dir="${target.dir}/${backwards.compatible.upt.dist.relative.dir}/svncheckout/@{upt.version}/resources">
				<include name="*Postgres.sql" />
			</fileset>
		</copy>
	   </sequential>
	</macrodef>
</project>
