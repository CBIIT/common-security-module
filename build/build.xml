<?xml version="1.0" encoding="utf-8" ?>

<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC, SAIC-Frederick

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/common-security-module/LICENSE.txt for details.
L-->

<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="build-upt-dist" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		Builds the UPT distribution.
	</description>

	<!-- Property file related properties and tasks -->
	<property name="project.name" value="generic" />
	<property environment="env" />
	<!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
	<property file="local.properties" />
	<property file="project.properties" />

	<!-- BDA standard structure -->
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${common.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}/ivy" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />
	
	<property name="upt.base.dir" location="${software.dir}/upt" />
	<property name="upt.resources.dir" location="${upt.base.dir}/resources" />
	<property name="upt.build.file" value="build.xml" />
	<property name="upt.build.target" value="all" />



	<!-- Ivy Related props -->
	<property name="ivy.testing-def.file" value="ivy-bda-testing.xml" />
	<property name="ivy.settings.file" value="ivysettings.xml" />
	<property name="ivy.file" value="ivy-2.0.0-beta2.jar" />
	<property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar" />

	<!-- Used by dist:*:prep to copy resource files to distribution area -->
	<property name="common.src.dir" value="${software.dir}/${common.dist.relative.dir}" />

	<!-- Used by dist:*:prep to determin list of files to use for incremental build process.
		Directory and files must be in svn to work.
	-->
	<property name="db-install.src.dir" value="${upt.resources.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.src.dir" value="${upt.resources.dir}/${db-upgrade.dist.relative.dir}" />

	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="dist.exploded.dir" location="${dist.dir}/exploded" />
	<property name="upt.dist.dir" location="${dist.exploded.dir}/${upt.dist.relative.dir}" />
	<property name="tools.dist.dir" location="${dist.exploded.dir}/${tools.dist.relative.dir}" />
	<property name="common.dist.dir" location="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="db-install.dist.dir" location="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dist.dir" location="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dist.dir" location="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}" />

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />

	

	<!-- retrive ivy files then retrieve bda files and librarires -->
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<!-- Use the snippet below if you want these to be transcient files
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />
	-->

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
	</ant>

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
			<include name="${ivy.file}" />
			<include name="${ivy-core.file}" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="simiantask.properties" classpathref="bda-utils.classpath" />
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>

	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />

	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />

	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties />
		<diagnostics />
	</target>

	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
		<delete dir="${dist.exploded.dir}" />

	</target>

	<target name="init">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${pt.dir}" />
		<mkdir dir="${upt.dist.dir}" />
		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
	</target>

	<target name="ivy:clean" description="Clean">
		<ivy:settings override="true" file="${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml" target="ivy-cleancache">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
		</ant>

		<!-- Clean subproject ivy caches -->
		<ant inheritAll="false" inheritRefs="false" dir="${csm.base.dir}" antfile="${csm.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${securityws.base.dir}" antfile="${securityws.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${upt.base.dir}" antfile="${upt.build.file}" target="ivy-clean-cache" />
	</target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="clean,init ">
		<echo message="This build process uses an existing war artifact"/>
		<!--
		<copy todir="${upt.dist.dir}" file="${software.dir}/war/upt.war"/>
		
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="${upt.build.target}" dir="${upt.base.dir}">
		</ant>
		-->
		<exec osfamily="unix" executable="ant" dir="${upt.base.dir}" failonerror="true">
			<arg value="${upt.build.target}" />
		</exec>
		<exec osfamily="windows" executable="ant.bat" dir="${upt.base.dir}" failonerror="true">
			<arg value="${upt.build.target}" />
		</exec>		
	</target>

	<!-- Produces all distributions: installer, upgrader and source -->
	<target name="dist" description="Makes all distributions: installer, upgrader and source"
		depends="
		build:all,
		dist:installer,
		dist:upgrader,
		dist:gui-installer
		" />

	<target name="dist:src">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
	<target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository" depends="
		init,
		dist:tools:retrieve:jboss
		" />


	<target name="dist:gui-installer" description="Makes Gui-Installer distribution">
		
		<gui-installer-prep 
			/>
		<ant inheritAll="false" inheritRefs="false"
		    antfile="install.xml"
		    target="build:installer"
		    dir="${basedir}/gui-installer"
		    >
		    <property name="compile.jar.dir" value="${target.dir}/izpack-4.0.1"/>
		</ant>
	</target>


	<!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
		<get src="${jboss.src.url}" dest="${jboss.dest.file}" />
		<get src="${jboss.src.url}.MD5" dest="${jboss.dest.file}.MD5" />
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok" />
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded jboss sucessfully" />
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully." />
			</else>
		</if>
	</target>

	<!-- Copies install time resources into distribution tree -->
	<target name="dist:installer:prep" depends="dist:tools:retrieve">
		<!-- added for incremental database build -->
		<!-- Need to call database-build-filelist once for each type of database you support.
			db-incr.* propertes are stored in project.properties because they are used in both
			install.xml and build.xml
		-->
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<copy todir="${upt.dist.dir}" file="${upt.base.dir}/dist/upt.war"/>

		<!-- Copy install related xml and properties files -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy>
		<!-- Set default target on install xml to install -->
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.project.*default=.)\w+(.\s+.*)"
		       	replace="\1install\2" />
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.*property name=.properties.file. value=.)[\w\.\d\-\_\$\{\}\/]+(.\s*\/.*)"
			replace="\1install.properties\2"/>

		<!-- Rename install.xml to build.xml so manual installs will not need to include the -f optoin on ant, simplifying the install proces. -->
		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<!-- Copy over BDA macrodefs and librarires -->
		<copy todir="${dist.exploded.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- This  copies common files over, common files are currently resource files like
			jboss configuration files and database scripts
		-->
		<copy todir="${common.dist.dir}" overwrite="true">
			<fileset dir="${common.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<!-- Copy over binary distributions downloaded earlier -->
		<copy todir="${tools.dist.dir}" overwrite="true">
			<fileset dir="${download.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Creates the installer distribution used by automated or manual remote installations -->
	<target name="dist:installer" depends="dist:installer:prep">
		<delete file="${dist.dir}/${csm.install.zip.file}" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="application.base.path,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
			optional.property.list="ldap.url,ldap.basedn"
			/>
		<zip destfile="${dist.dir}/${csm.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<!-- Copies install time resources into distribution tree -->
	<target name="dist:upgrader:prep">
		<!-- Cleans up files copied by dist:*:prep targets to ensure only required files are present becaue this target is run after dist:installer:prep -->
		<delete dir="${tools.dist.dir}" />
		<delete>
			<fileset dir="${dist.exploded.dir}">
				<include name="*.xml" />
				<include name="*properties*" />
			</fileset>
		</delete>

		<!-- Copy install related xml and properties files -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy>
		<!-- Change default target of install.xml to upgrade -->
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.project.*default=.)\w+(.\s+.*)"
			replace="\1upgrade\2" />
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.*property name=.properties.file. value=.)[\w\.\d\-\_\$\{\}\/]+(.\s*\/.*)"
			replace="\1upgrade.properties\2"/>
		<!-- Rename install.xml to build.xml to simply install but not having to provide -f option to ant command line -->
		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<!-- Copy BDA macrodefs and library files -->
		<copy todir="${dist.exploded.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<exclude name="**/*.zip" />
			</fileset>
		</copy>

		<!-- This  copies common files over, common files are currently resource files like
			jboss configuration files and database scripts
		-->
		<copy todir="${common.dist.dir}" overwrite="true">
			<fileset dir="${common.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Creates upgrader distribution -->
	<target name="dist:upgrader" depends="dist:upgrader:prep">
		<delete file="${dist.dir}/${csm.upgrade.zip.file}" />
		<obfuscate-properties-file
			properties.file="${dist.exploded.dir}/install.properties"
			required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
			optional.property.list="ldap.url,ldap.basedn"
			/>                      
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>              
		</copy>         
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />

		<zip destfile="${dist.dir}/${csm.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>


	<!-- Installs the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:install" depends="dist:installer:prep" description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments">

		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties" />
			</fileset>
		</copy>
		<exec os="Linux, Max OS X" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=install.properties" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="-D${exclude.server}=true" />
			<arg value="${install.target}" />
		</exec>
		<exec os="Windows XP, Windows 2000, Windows 2003" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=install.properties" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="-D${exclude.server}=true" />
			<arg value="${install.target}" />
		</exec>
	</target>

	<macrodef name="deploy-files" description="Macro for deploying and extracting distrution to server">
		<attribute name="ssh.user" default="${ssh.server.username}" />
		<attribute name="ssh.host" default="${ssh.server.hostname}" />
		<attribute name="remote.directory.property.name" default="ssh.dir.temp" />
		<attribute name="properties.file" default="${properties.file}" />
		<attribute name="dist.dir" default="${dist.dir}" />
		<attribute name="dist.file" />
		<sequential>
			<!-- Validate remote directory is valid -->
			<propertycopy name="remote.dir" from="@{remote.directory.property.name}" />
			<check-valid-directory-name directory.property="remote.dir" />
			<!-- Delete/re-create remote directory -->
			<remote-ssh remotesshcommand="rm -rf ${remote.dir};mkdir -p ${remote.dir}" />
			<!-- work around for issue where basedir is required but is not currently used -->
			<remote-ssh remotesshcommand="mkdir -p ${remote.dir}/lib" />

			<!-- copy distribution and prop file to remote system -->
			<remote-scp remoteScpFileToCopy="@{dist.dir}/@{dist.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
			<remote-scp remoteScpFileToCopy="@{properties.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
			<!-- Extract zip file -->
			<remote-ssh remotesshcommand="cd ${remote.dir}; unzip -q @{dist.file}" />
		</sequential>
	</macrodef>

	<target name="deploy:remote:install" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:installer
		">
		<!--
		  * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Check that properties file name includes install, otherwise fail -->
		<if>
			<not>
				<contains string="${properties.file}" substring="install" />
			</not>
			<then>
				<fail message="When calling install targets the properties.file property, '${properties.file}', must contain 'install' in the name." />
			</then>
		</if>
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${ctods-viewer.install.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<target name="deploy:remote:upgrade" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:upgrader
		">
		<!--
		  * Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Check that properties file name includes upgrade, otherwise fail -->
		<if>
			<not>
				<contains string="${properties.file}" substring="upgrade" />
			</not>
			<then>
				<fail message="When calling install targets the properties.file property, '${properties.file}', must contain 'upgrade' in the name." />
			</then>
		</if>
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${ctods-viewer.upgrade.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>


</project>
