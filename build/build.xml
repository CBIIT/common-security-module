<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="build-csm-upt" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		Builds the CSM/UPT application.
	</description>

	<!-- Property file related properties and tasks -->
	<property name="project.name" value="generic" />
	<property environment="env" />
	<!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
	<property file="local.properties" />
	<property file="project.properties" />
	<condition property="properties.file" value="linux-install.properties">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="properties.file" value="windows-install.properties">
		<os family="windows" />
	</condition>

	<echo message="Using properties file of ${properties.file}." />
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail." />

	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />
	<!-- added for remote deployments since file is copied to root of install dir -->
	<basename property="properties.file.name" file="${properties.file}" />

	<!-- BDA standard structure -->
	<property name="build.dir" location="." />
	<property name="software.dir" location=".." />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${common.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}/ivy" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />

	<!-- Ivy Related props -->
	<property name="ivy.settings.file" value="ivy.settings.xml" />
	<property name="ivy.file" value="ivy-2.0.0-beta2.jar" />
	<property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar" />

	<!-- Used by dist:*:prep to copy resource files to distribution area -->
	<property name="common.src.dir" value="${software.dir}/${common.dist.relative.dir}" />

	<!-- Used by dist:*:prep to determin list of files to use for incremental build process.
		Directory and files must be in svn to work.
	-->
	<property name="db.src.dir" value="${software.dir}/${db-install.dist.relative.dir}" />
	<property name="db-incr.src.dir" value="${software.dir}/${db-upgrade.dist.relative.dir}" />

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<!-- Working directory passed to Ant tasks -->
	<property name="securityws.base.dir" value="${software.dir}/securityws" />
	<property name="csm.base.dir" value="${software.dir}/api" />
	<property name="upt.base.dir" value="${software.dir}/upt" />

	<!-- Build file names relative working dir above, if the basedir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
	<property name="upt.build.file" value="build.xml" />
	<property name="csm.build.file" value="build.xml" />
	<property name="securityws.build.file" value="build.xml" />

	<!-- The target name that should be called from the sub-project build file -->
	<property name="securityws.build.target" value="all" />
	<property name="csm.build.target" value="dist" />
	<property name="upt.build.target" value="all" />

	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="dist.exploded.dir" value="${dist.dir}/exploded" />
	<property name="csm.dist.dir" value="${dist.exploded.dir}/${csm.dist.relative.dir}" />
	<property name="securityws.dist.dir" value="${dist.exploded.dir}/${securityws.dist.relative.dir}" />
	<property name="upt.dist.dir" value="${dist.exploded.dir}/${upt.dist.relative.dir}" />
	<property name="tools.dist.dir" value="${dist.exploded.dir}/${tools.dist.relative.dir}" />
	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="db.dist.dir" value="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
	<property name="db-incr.dist.dir" value="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />

	<!-- Selenium settings -->
	<property name="selenium.jar" value="${lib.dir}/test-selenium/selenium-server-1.0-beta-1.jar" />
	<property name="selenium.browser" value="*iexplore" />
	<!--  What you would need for a ci server, recommend setting in local.properties
	<property name="selenium.browser" value="*firefox /usr/lib64/firefox-1.5.0.12/firefox-bin"/>
	-->
	<property name="selenium.proxy.port" value="4444" />
	<property name="selenium.report.dir" value="${reports.dir}/selenium" />
	<property name="selenium.report.file" value="selenium-rpt.html" />
	<property name="selenium.test.dir" value="${software.dir}/tests/functional/selenium" />
	<property name="selenium.test.suite" value="${selenium.test.dir}/bdaTestSuite.html" />
	<property name="selenium.url" value="http://${jboss.server.hostname}:${jboss.server.port}" />

	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}" />

	<!-- Properties related to creating the distribution -->
	<property name="dist.dir" value="dist" />

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />

	<!-- Where grand stores it's outputed pdf reports of build files -->
	<property name="grand.rpt.dir" value="common/grand" />

	<!-- retrive ivy files then retrieve bda files and librarires -->
	<property name="bda-download.file" value="bda-ivy-build.xml" />
	<!-- Use the snippet below if you want these to be transcient files
	<mkdir dir="${bda-download.dir}" />
	<property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}" />
	<get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}" />
	-->

	<ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
		<property name="bda.version" value="${bda.version}" />
		<property name="bda-utils.dir" location="${bda-utils.dir}" />
		<property name="lib.dir" location="${lib.dir}" />
		<property name="software.dir" location="${software.dir}" />
	</ant>

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="ivy.classpath">
		<fileset dir="${lib.dir}">
			<include name="${ivy.file}" />
			<include name="${ivy-core.file}" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="simiantask.properties" classpathref="bda-utils.classpath" />
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>

	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />

	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Includes- include BDA marcos -->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />

	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties />
		<diagnostics />
	</target>

	<target name="clean">
		<delete dir="${dist.dir}" />
		<delete dir="${temp.dir}" />
		<delete dir="${dist.exploded.dir}" />

	</target>

	<target name="init">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />
		<mkdir dir="${pt.dir}" />
		<mkdir dir="${csm.dist.dir}" />
		<mkdir dir="${upt.dist.dir}" />
		<mkdir dir="${securityws.dist.dir}" />
		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
	</target>

	<target name="ivy:clean" description="Clean">
		<ivy:settings override="true" file="${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml" target="ivy-cleancache">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
		</ant>

		<!-- Clean subproject ivy caches -->
		<ant inheritAll="false" inheritRefs="false" dir="${csm.base.dir}" antfile="${csm.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${securityws.base.dir}" antfile="${securityws.build.file}" target="ivy-clean-cache" />
		<ant inheritAll="false" inheritRefs="false" dir="${upt.base.dir}" antfile="${upt.build.file}" target="ivy-clean-cache" />
	</target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:upt,
		build:securityws" />

	<!-- Build generic-query-grid sub-project produces project level artifact -->
	<target name="build:csm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${csm.build.file}" target="${csm.build.target}" dir="${csm.base.dir}">
		</ant>
	</target>

	<target name="build:upt" depends="init, build:csm">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="${upt.build.target}" dir="${upt.base.dir}">
		</ant>
	</target>

	<target name="build:securityws" depends="init, build:csm">
		<ant inheritAll="false" inheritRefs="false" antfile="${securityws.build.file}" target="${securityws.build.target}" dir="${securityws.base.dir}">
		</ant>
	</target>

	<target name="compile:all" description="Used by static-analysis, required since dist target cleans up generated classes that are required by some static analysis tools" depends="
			init,
			compile:csm,
			compile:upt,
			compile:securityws
			" />

	<target name="compile:csm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${csm.build.file}" target="compile" dir="${csm.base.dir}" />
	</target>

	<target name="compile:upt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="compile" dir="${upt.base.dir}" />
	</target>

	<target name="compile:securityws" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${securityws.build.file}" target="compile" dir="${securityws.base.dir}" />
	</target>

	<!-- Produces all distributions: installer, upgrader and source -->
	<target name="dist" description="Makes all distributions: installer, upgrader and source" depends="
		build:all,
		dist:installer,
		dist:upgrader,
		dist:src" />

	<target name="dist:src">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
	<target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository" depends="
		init,
		dist:tools:retrieve:jboss
		" />

	<!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
		<get src="${jboss.src.url}" dest="${jboss.dest.file}" />
		<get src="${jboss.src.url}.MD5" dest="${jboss.dest.file}.MD5" />
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok" />
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded jboss sucessfully" />
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully." />
			</else>
		</if>
	</target>

	<!-- Copies install time resources into distribution tree -->
	<target name="dist:installer:prep" depends="dist:tools:retrieve">
		<!-- added for incremental database build -->
		<!-- Need to call database-build-filelist once for each type of database you support.
			db-incr.* propertes are stored in project.properties because they are used in both
			install.xml and build.xml
		-->
		<database-build-filelist sqlfiles.list.file="${dist.exploded.dir}/${db-incr.mysql.list.file}" build.properties.file="${dist.exploded.dir}/${db-incr.mysql.conf.file}" incr.sql.dir="${db-incr.src.dir}/mysql" />
		<database-build-filelist sqlfiles.list.file="${dist.exploded.dir}/${db-incr.oracle.list.file}" build.properties.file="${dist.exploded.dir}/${db-incr.oracle.conf.file}" incr.sql.dir="${db-incr.src.dir}/oracle" />
		<copy tofile="${dist.exploded.dir}/db-integrate.xml" file="${bda-utils.dir}/resource/template-db-integrate.xml" />

		<!-- Copy install related xml and properties files -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="install.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy>
		<!-- Set default target on install xml to install -->
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.project.*default=.)\w+(.\s+.*)"
		       	replace="\1install\2" />
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.*property name=.properties.file. value=.)[\w\.\d\-\_\$\{\}\/]+(.\s*\/.*)"
			replace="\1install.properties\2"/>

		<!-- Rename install.xml to build.xml so manual installs will not need to include the -f optoin on ant, simplifying the install proces. -->
		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<!-- Copy over BDA macrodefs and librarires -->
		<copy todir="${dist.exploded.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- This  copies common files over, common files are currently resource files like
			jboss configuration files and database scripts
		-->
		<copy todir="${common.dist.dir}" overwrite="true">
			<fileset dir="${common.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<!-- Copy over binary distributions downloaded earlier -->
		<copy todir="${tools.dist.dir}" overwrite="true">
			<fileset dir="${download.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Creates the installer distribution used by automated or manual remote installations -->
	<target name="dist:installer" depends="dist:installer:prep">
		<delete file="${dist.dir}/${csm.install.zip.file}" />
		<zip destfile="${dist.dir}/${csm.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<!-- Copies install time resources into distribution tree -->
	<target name="dist:upgrader:prep">
		<!-- Cleans up files copied by dist:*:prep targets to ensure only required files are present becaue this target is run after dist:installer:prep -->
		<delete dir="${tools.dist.dir}" />
		<delete>
			<fileset dir="${dist.exploded.dir}">
				<include name="*.xml" />
				<include name="*properties*" />
			</fileset>
		</delete>

		<!-- added for incremental database build -->
		<!-- Need to call database-build-filelist once for each type of database you support.
			db-incr.* propertes are stored in project.properties because they are used in both
			install.xml and build.xml
		-->
		<database-build-filelist sqlfiles.list.file="${dist.exploded.dir}/${db-incr.mysql.list.file}" build.properties.file="${dist.exploded.dir}/${db-incr.mysql.conf.file}" incr.sql.dir="${db-incr.src.dir}/mysql" />
		<database-build-filelist sqlfiles.list.file="${dist.exploded.dir}/${db-incr.oracle.list.file}" build.properties.file="${dist.exploded.dir}/${db-incr.oracle.conf.file}" incr.sql.dir="${db-incr.src.dir}/oracle" />
		<copy tofile="${dist.exploded.dir}/db-integrate.xml" file="${bda-utils.dir}/resource/template-db-integrate.xml" />

		<!-- Copy install related xml and properties files -->
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="install.xml" />
				<include name="upgrade.properties" />
				<include name="*properties.template" />
				<include name="project.properties" />
			</fileset>
		</copy>
		<!-- Change default target of install.xml to upgrade -->
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.project.*default=.)\w+(.\s+.*)"
			replace="\1upgrade\2" />
		<replaceregexp file="${dist.exploded.dir}/install.xml" byline="true"
			match="(.*property name=.properties.file. value=.)[\w\.\d\-\_\$\{\}\/]+(.\s*\/.*)"
			replace="\1upgrade.properties\2"/>
		<!-- Rename install.xml to build.xml to simply install but not having to provide -f option to ant command line -->
		<move file="${dist.exploded.dir}/install.xml" tofile="${dist.exploded.dir}/build.xml" />

		<!-- Copy BDA macrodefs and library files -->
		<copy todir="${dist.exploded.dir}/bda-utils" overwrite="true">
			<fileset dir="${bda-utils.dir}">
				<exclude name="**/*.zip" />
			</fileset>
		</copy>

		<!-- This  copies common files over, common files are currently resource files like
			jboss configuration files and database scripts
		-->
		<copy todir="${common.dist.dir}" overwrite="true">
			<fileset dir="${common.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Creates upgrader distribution -->
	<target name="dist:upgrader" depends="dist:upgrader:prep">
		<delete file="${dist.dir}/${csm.upgrade.zip.file}" />
		<zip destfile="${dist.dir}/${csm.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>


	<!-- Installs the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:install" depends="dist:installer:prep" description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments">
		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties" />
			</fileset>
		</copy>
		<exec os="Linux, Max OS X" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=linux-install.properties" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="${install.target}" />
		</exec>
		<exec os="Windows XP, Windows 2000, Windows 2003" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=windows-install.properties" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="${install.target}" />
		</exec>

	</target>

	<!-- Upgrades the application locally. Requires a local instance of mysql. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) upgrades. It only supports using those properties files for now, so if you want to change install time properites edit these files. -->
	<target name="deploy:local:upgrade" depends="dist:upgrader:prep" description="Upgrades the application on the local machine, used for developer desktops and ci environments">
		<!-- Copies over all files so linux and windows properties are present -->
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${build.dir}">
				<include name="*.properties" />
			</fileset>
		</copy>

		<!-- ci.server property is set at run time.  Since both the developer workstaton
			and ci.server use the same install targets and we need to start the servers on
			one  and not the other, this condition will remove the property from the
			properties file.
		-->
		<if>
			<isset property="ci.server" />
			<then>
				<replaceregexp file="${dist.exploded.dir}/linux-upgrade.properties" byline="true" match="exclude.start.servers=true" replace="" />
				<replaceregexp file="${dist.exploded.dir}/windows-upgrade.properties" byline="true" match="exclude.start.servers=true" replace="" />
			</then>
		</if>

		<exec os="Linux, Max OS X" executable="ant" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=linux-upgrade.properties" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Dlocal.install=true" />
			<arg value="${upgrade.target}" />
		</exec>
		<exec os="Windows XP, Windows 2000, Windows 2003" executable="ant.bat" dir="${dist.exploded.dir}" failonerror="true">
			<!-- use alternate properties file since default has replace values -->
			<arg value="-Dproperties.file=windows-upgrade.properties" />
			<!-- force reinstall of database and jboss without prompting -->
			<arg value="-Dforce.reinstall=true" />
			<arg value="-Dlocal.install=true" />
			<arg value="${upgrade.target}" />
		</exec>
		<echo message="The server is not started as part of local deployment.  You will need to run $JBOSS_HOME/bin/run.bat (or run.sh if you are linux)." />
	</target>

	<macrodef name="deploy-files">
		<attribute name="ssh.user" default="${ssh.server.username}" />
		<attribute name="ssh.host" default="${ssh.server.hostname}" />
		<attribute name="remote.directory.property.name" default="ssh.dir.temp" />
		<attribute name="properties.file" default="${properties.file}" />
		<attribute name="dist.dir" default="${dist.dir}" />
		<attribute name="dist.file" />
		<sequential>
			<!-- Validate remote directory is valid -->
			<propertycopy name="remote.dir" from="@{remote.directory.property.name}" />
			<check-valid-directory-name directory.property="remote.dir" />
			<!-- Delete/re-create remote directory -->
			<remote-ssh remotesshcommand="rm -rf ${remote.dir};mkdir -p ${remote.dir}" />
			<!-- work around for issue where basedir is required but is not currently used -->
			<remote-ssh remotesshcommand="mkdir -p ${remote.dir}/lib" />

			<!-- copy distribution and prop file to remote system -->
			<remote-scp remoteScpFileToCopy="@{dist.dir}/@{dist.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
			<remote-scp remoteScpFileToCopy="@{properties.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
			<!-- Extract zip file -->
			<remote-ssh remotesshcommand="cd ${remote.dir}; unzip -q @{dist.file}" />
		</sequential>
	</macrodef>

	<!-- Install the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into -->
	<target name="deploy:remote:install" depends="
		build:all,
		dist:installer
		">
		<deploy-files dist.file="${csm.install.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<!-- Upgrades the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point upgrader to correct enviornment to upgrade -->
	<target name="deploy:remote:upgrade" depends="
		build:all,
		dist:upgrader
		">
		<deploy-files dist.file="${csm.upgrade.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>

	<target name="usage" description="Explains how to use this build script">
		<echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
	</target>

	<!-- Scorches checkout area and then checks out the generic project from svn. Serval propeties influence what is checked out.  Each of the properites have defaults, which will check out trunk.  This target uses the svn-co macro from bda -->
	<target name="svn:co">
		<property name="svn.project.base.url" value="http://gforge.nci.nih.gov/svnroot/generic" />
		<property name="svn.project.name" value="generic" />
		<property name="svn.tag" value="trunk" />
		<property name="svn.co.base.dir" value="${user.home}/tmp" />

		<svn-co svn.project.base.url="${svn.project.base.url}" svn.project.name="${svn.project.name}" svn.tag="${svn.tag}" svn.co.base.dir="${svn.co.base.dir}" />
	</target>
	<target name="report:grand" description="Generates grand graphs for build.xml files">
		<mkdir dir="${grand.rpt.dir}" />
		<report-grand build.file.location="build.xml" output.file.dir="." output.file.name="${grand.rpt.dir}/root-build.xml" />
		<report-grand build.file.location="install.xml" output.file.dir="." output.file.name="${grand.rpt.dir}/root-install.xml" />
		<report-grand build.file.location="api/build.xml" output.file.dir="." output.file.name="${grand.rpt.dir}/csm-build.xml" />
		<report-grand build.file.location="upt/build.xml" output.file.dir="." output.file.name="${grand.rpt.dir}/upt-build.xml" />
		<report-grand build.file.location="securityws/build.xml" output.file.dir="." output.file.name="${grand.rpt.dir}/securityws-build.xml" />
	</target>

	<target name="ivy-init" depends="
		ivy-settings,
		ivy-test-selenium,
		ivy-test-junit,
		ivy-test-cobertura,
		ivy-test-javancss,
		ivy-test-checkstyle,
		ivy-test-pmd
		" />

	<target name="ivy-settings">
		<property name="ivy.dep.file" value="${ivy.bda-testing.file}" />
		<ivy:settings file="${ivy.settings.file}" />
	</target>

	<target name="ivy-test-selenium" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-selenium" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
	</target>

	<target name="ivy-test-junit" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-junit" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
	</target>

	<target name="ivy-test-cobertura" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-cobertura" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
	</target>

	<target name="ivy-test-javancss" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-javancss" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-javancss" />
	</target>

	<target name="ivy-test-checkstyle" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-checkstyle" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
	</target>

	<target name="ivy-test-pmd" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
	</target>

	<!-- going to try using a binary distribution for this
	<target name="ivy-test-findbugs" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-findbugs" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-findbugs" />
	</target>
	-->

	<target name="static-analysis" description="Performs static analysis" depends="
		ivy-init,
		static-analysis:init,
		findbugs-init,
		static-analysis:simian,
		static-analysis:pmd,
		static-analysis:checkstyle,
		static-analysis:javancss,
		static-analysis:cobertura,
		static-analysis:findbugs
		" />

	<target name="static-analysis:init">
		<property name="upt.java.dir" value="upt/webapp/src" />
		<property name="csm.java.dir" value="api/src" />
		<property name="securityws.java.dir" value="securityws/src" />

		<property name="upt.classes.dir" value="upt/build/WEB-INF/classes" />
		<property name="csm.classes.dir" value="api/classes" />
		<property name="securityws.classes.dir" value="securityws/build/WEB-INF/classes" />

		<property name="common.dir" value="common" />

		<property name="reports.dir" value="reports" />
		<property name="reports.simian.dir" value="${reports.dir}/simian" />
		<property name="reports.pmd.dir" value="${reports.dir}/pmd" />
		<property name="reports.checkstyle.dir" value="${reports.dir}/checkstyle" />
		<property name="reports.javancss.dir" value="${reports.dir}/javancss" />
		<property name="reports.cobertura.dir" value="${reports.dir}/cobertura" />
		<property name="reports.findbugs.dir" value="${reports.dir}/findbugs" />

		<property name="instrumented.dir" value="${target.dir}/instrumented" />
		<property name="cobertura.ser.file" value="${instrumented.dir}/cobertura.ser" />
		<property name="cobertura.reports.dir" value="${reports.dir}/cobertura" />

		<path id="ivy.classpath">
			<fileset dir="${common.dir}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<fail unless="lib.dir" message="must define lib.dir for unittesting.xml to work" />
		<path id="project.test.selenium.classpath">
			<fileset dir="${lib.dir}/test-selenium">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.junit.classpath">
			<fileset dir="${lib.dir}/test-junit">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.cobertura.classpath">
			<fileset dir="${lib.dir}/test-cobertura">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.javancss.classpath">
			<fileset dir="${lib.dir}/test-javancss">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.checkstyle.classpath">
			<fileset dir="${lib.dir}/test-checkstyle">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="project.test.pmd.classpath">
			<fileset dir="${lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>

		<delete dir="${reports.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.simian.dir}" />
		<mkdir dir="${reports.pmd.dir}" />
		<mkdir dir="${reports.checkstyle.dir}" />
		<mkdir dir="${reports.javancss.dir}" />
		<mkdir dir="${reports.cobertura.dir}" />
		<mkdir dir="${reports.findbugs.dir}" />
		<delete dir="${instrumented.dir}" />
		<mkdir dir="${instrumented.dir}" />

	</target>

	<target name="findbugs-init" depends="dist:tools:retrieve:jboss">
		<property name="findbugs.home.dir" value="${lib.dir}/${findbugs.binaries.relative.dir}" />
		<if>
			<not>
				<available file="${findbugs.home.dir}/lib/findbugs.jar" />
			</not>
			<then>
				<echo message="Findbugs is missing, downloading and isnstalling in ${findbugs.home.dir}" />
				<get src="${findbugs.src.url}" dest="${temp.dir}/${findbugs.binaries.file}" />
				<unzip dest="${lib.dir}" src="${temp.dir}/${findbugs.binaries.file}" />
			</then>
		</if>
		<property name="test.jboss.dir" value="${temp.dir}/${jboss.binaries.relative.dir}" />
		<if>
			<not>
				<available file="${test.jboss.dir}/lib/jboss-system.jar" />
			</not>
			<then>
				<mkdir dir="${test.jboss.dir}" />
				<unzip dest="${temp.dir}" src="${jboss.dest.file}" />
			</then>
		</if>

		<path id="project.test.findbugs.classpath">
			<fileset dir="${findbugs.home.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:simian" depends="static-analysis:init" description="Performs code duplication analysis">
		<static-analysis-simian simian.src.dir="${upt.java.dir}" simian.rpt.dir="${reports.simian.dir}" simian.report-xsl.file="${common.dir}/simian/simian.xsl" simian.xml.name="simian-upt.xml" simian.html.name="simian-upt.html" />

		<static-analysis-simian simian.src.dir="${csm.java.dir}" simian.rpt.dir="${reports.simian.dir}" simian.report-xsl.file="${common.dir}/simian/simian.xsl" simian.xml.name="simian-csm.xml" simian.html.name="simian-csm.html" />

		<static-analysis-simian simian.src.dir="${securityws.java.dir}" simian.rpt.dir="${reports.simian.dir}" simian.report-xsl.file="${common.dir}/simian/simian.xsl" simian.xml.name="simian-securityws.-securitywsxml" simian.html.name="simian-securityws.html" />

	</target>
	<macrodef name="static-analysis-simian">
		<attribute name="simian.src.dir" />
		<attribute name="simian.rpt.dir" />
		<attribute name="simian.report-xsl.file" />
		<attribute name="simian.xml.name" default="simian.xml" />
		<attribute name="simian.html.name" default="simian.html" />
		<sequential>
			<simian>
				<fileset dir="@{simian.src.dir}" includes="**/*.java" />
				<formatter type="xml" toFile="@{simian.rpt.dir}/@{simian.xml.name}" />
			</simian>
			<xslt in="@{simian.rpt.dir}/@{simian.xml.name}" out="@{simian.rpt.dir}/@{simian.html.name}" style="@{simian.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:pmd" depends="
		ivy-init,
		static-analysis:init
		">
		<static-analysis-pmd pmd.src.dir="${upt.java.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset-basic.xml" pmd.xml.name="pmd-upt.xml" pmd.html.name="pmd-upt.html" />
		<static-analysis-pmd pmd.src.dir="${securityws.java.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset-basic.xml" pmd.xml.name="pmd-securityws.xml" pmd.html.name="pmd-securityws.html" />
		<static-analysis-pmd pmd.src.dir="${csm.java.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset-basic.xml" pmd.xml.name="pmd-csm.xml" pmd.html.name="pmd-csm.html" />
	</target>

	<macrodef name="static-analysis-pmd">
		<attribute name="pmd.src.dir" />
		<attribute name="pmd.rpt.dir" />
		<attribute name="pmd.report-xsl.file" />
		<attribute name="pmd.rule-set.file" />
		<attribute name="pmd.xml.name" default="pmd.xml" />
		<attribute name="pmd.html.name" default="pmd.html" />
		<sequential>
			<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.test.pmd.classpath" />
			<pmd shortFilenames="true" rulesetfiles="@{pmd.rule-set.file}">
				<formatter type="xml" toFile="@{pmd.rpt.dir}/@{pmd.xml.name}" />
				<fileset dir="@{pmd.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</pmd>
			<xslt taskname="pmd" in="@{pmd.rpt.dir}/@{pmd.xml.name}" out="@{pmd.rpt.dir}/@{pmd.html.name}" style="@{pmd.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:javancss" depends="
		ivy-init,
		static-analysis:init
		">
		<static-analysis-javancss javancss.src.dir="${upt.java.dir}" javancss.rpt.dir="${reports.javancss.dir}" javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl" javancss.xml.name="javancss_metrics_upt.xml" javancss.html.name="javancss_report_upt.html" />
		<static-analysis-javancss javancss.src.dir="${securityws.java.dir}" javancss.rpt.dir="${reports.javancss.dir}" javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl" javancss.xml.name="javancss_metrics_securityws.xml" javancss.html.name="javancss_report_securityws.html" />
		<static-analysis-javancss javancss.src.dir="${csm.java.dir}" javancss.rpt.dir="${reports.javancss.dir}" javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl" javancss.xml.name="javancss_metrics_csm.xml" javancss.html.name="javancss_report_csm.html" />
	</target>

	<macrodef name="static-analysis-javancss">
		<attribute name="javancss.src.dir" />
		<attribute name="javancss.rpt.dir" />
		<attribute name="javancss.report-xsl.file" />
		<attribute name="javancss.xml.name" default="javancss.xml" />
		<attribute name="javancss.html.name" default="javancss.html" />
		<sequential>
			<taskdef name="javancss" classpathref="project.test.javancss.classpath" classname="javancss.JavancssAntTask" />
			<javancss srcdir="@{javancss.src.dir}" includes="**/*.java" excludes="**/*test*/*" generatereport="true" outputfile="@{javancss.rpt.dir}/@{javancss.xml.name}" ccnPerFuncMax="10" format="xml">
			</javancss>
			<xslt taskname="javancss" in="@{javancss.rpt.dir}/@{javancss.xml.name}" out="@{javancss.rpt.dir}/@{javancss.html.name}" style="@{javancss.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:checkstyle" depends="
		ivy-init,
		static-analysis:init
		">
		<static-analysis-checkstyle checkstyle.src.dir="${upt.java.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${common.dir}/checkstyle/checkstyle_minimal.xml" checkstyle.xml.name="checkstyle-upt.xml" checkstyle.html.name="checkstyle-upt.html" />
		<static-analysis-checkstyle checkstyle.src.dir="${securityws.java.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${common.dir}/checkstyle/checkstyle_minimal.xml" checkstyle.xml.name="checkstyle-securityws.xml" checkstyle.html.name="checkstyle-securityws.html" />
		<static-analysis-checkstyle checkstyle.src.dir="${csm.java.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${common.dir}/checkstyle/checkstyle_minimal.xml" checkstyle.xml.name="checkstyle-csm.xml" checkstyle.html.name="checkstyle-csm.html" />
	</target>

	<macrodef name="static-analysis-checkstyle">
		<attribute name="checkstyle.src.dir" />
		<attribute name="checkstyle.rpt.dir" />
		<attribute name="checkstyle.report-xsl.file" />
		<attribute name="checkstyle.config.file" />
		<attribute name="checkstyle.xml.name" default="checkstyle.xml" />
		<attribute name="checkstyle.html.name" default="checkstyle.html" />
		<sequential>
			<taskdef resource="checkstyletask.properties" uri="antlib:com.puppycrawl.tools.checkstyle" classpathref="project.test.checkstyle.classpath" />
			<cs:checkstyle config="@{checkstyle.config.file}" failOnViolation="false">
				<formatter type="xml" tofile="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" />
				<fileset dir="@{checkstyle.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</cs:checkstyle>
			<xslt taskname="checkstyle" in="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" out="@{checkstyle.rpt.dir}/@{checkstyle.html.name}" style="@{checkstyle.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:findbugs" depends="
		compile:all,
		ivy-init,
		findbugs-init,
		static-analysis:init
		">
		<mkdir dir="${reports.findbugs.dir}/upt" />
		<mkdir dir="${reports.findbugs.dir}/csm" />
		<mkdir dir="${reports.findbugs.dir}/securityws" />

		<static-analysis-findbugs findbugs.home.dir="${findbugs.home.dir}" findbugs.src.dir="${upt.java.dir}" findbugs.classes.dir="${upt.classes.dir}" findbugs.rpt.dir="${reports.findbugs.dir}/upt" findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl" findbugs.app.classpath.dir="${lib.dir}/upt/runtime" findbugs.jboss.classpath.dir="${test.jboss.dir}" findbugs.xml.name="findbugs-upt.xml" findbugs.html.name="findbugs-upt.html" />
		<static-analysis-findbugs findbugs.home.dir="${findbugs.home.dir}" findbugs.src.dir="${csm.java.dir}" findbugs.classes.dir="${csm.classes.dir}" findbugs.rpt.dir="${reports.findbugs.dir}/csm" findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl" findbugs.app.classpath.dir="${lib.dir}/api/runtime" findbugs.jboss.classpath.dir="${test.jboss.dir}" findbugs.xml.name="findbugs-csm.xml" findbugs.html.name="findbugs-csm.html" />
		<static-analysis-findbugs findbugs.home.dir="${findbugs.home.dir}" findbugs.src.dir="${securityws.java.dir}" findbugs.classes.dir="${securityws.classes.dir}" findbugs.rpt.dir="${reports.findbugs.dir}/securityws" findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl" findbugs.app.classpath.dir="${lib.dir}/securityws/runtime" findbugs.jboss.classpath.dir="${test.jboss.dir}" findbugs.xml.name="findbugs-securityws.xml" findbugs.html.name="findbugs-securityws.html" />
	</target>

	<macrodef name="static-analysis-findbugs">
		<attribute name="findbugs.home.dir" />
		<attribute name="findbugs.src.dir" />
		<attribute name="findbugs.rpt.dir" />
		<attribute name="findbugs.classes.dir" />
		<attribute name="findbugs.report-xsl.file" />
		<attribute name="findbugs.app.classpath.dir" />
		<attribute name="findbugs.jboss.classpath.dir" />
		<attribute name="findbugs.xml.name" default="findbugs.xml" />
		<attribute name="findbugs.html.name" default="findbugs.html" />
		<sequential>
			<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="project.test.findbugs.classpath" />

			<findbugs home="@{findbugs.home.dir}" output="xml:withMessages" outputFile="@{findbugs.rpt.dir}/@{findbugs.xml.name}" jvmargs="-Xms128m -Xmx512m">
				<auxClasspath>
					<fileset dir="@{findbugs.app.classpath.dir}">
						<include name="**/*.jar" />
					</fileset>
					<fileset dir="@{findbugs.jboss.classpath.dir}">
						<include name="**/*.jar" />
					</fileset>
				</auxClasspath>

				<sourcePath path="@{findbugs.src.dir}" />
				<class location="@{findbugs.classes.dir}" />
			</findbugs>
			<xslt taskname="findbugs" in="@{findbugs.rpt.dir}/@{findbugs.xml.name}" out="@{findbugs.rpt.dir}/@{findbugs.html.name}" style="@{findbugs.report-xsl.file}" />
		</sequential>
	</macrodef>

	<target name="static-analysis:cobertura" depends="
		compile:all,
		ivy-init,
		static-analysis:init
		">
		<mkdir dir="${target.dir}/instrumented/csm" />
		<mkdir dir="${target.dir}/instrumented/securityws" />
		<mkdir dir="${target.dir}/instrumented/upt" />
		<static-analysis-cobertura cobertura.src.dir="${upt.java.dir}" cobertura.classes.dir="${upt.classes.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/upt" cobertura.instrumented.dir="${target.dir}/instrumented/upt" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
		<static-analysis-cobertura cobertura.src.dir="${csm.java.dir}" cobertura.classes.dir="${csm.classes.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/csm" cobertura.instrumented.dir="${target.dir}/instrumented/csm" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
		<static-analysis-cobertura cobertura.src.dir="${securityws.java.dir}" cobertura.classes.dir="${securityws.classes.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/securityws" cobertura.instrumented.dir="${target.dir}/instrumented/securityws" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
	</target>

	<macrodef name="static-analysis-cobertura">
		<attribute name="cobertura.src.dir" />
		<attribute name="cobertura.rpt.dir" />
		<attribute name="cobertura.classes.dir" />
		<attribute name="cobertura.instrumented.dir" />
		<attribute name="cobertura.report-xsl.file" />
		<attribute name="cobertura.ser.file" />
		<attribute name="cobertura.config.file" />
		<sequential>
			<taskdef classpathref="project.test.cobertura.classpath" resource="tasks.properties" />
			<cobertura-instrument todir="@{cobertura.instrumented.dir}" datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}">
				<fileset dir="@{cobertura.classes.dir}">
					<include name="**" />
				</fileset>
			</cobertura-instrument>

			<cobertura-report datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}" format="html" destdir="@{cobertura.rpt.dir}">
				<fileset dir="@{cobertura.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</cobertura-report>

			<cobertura-check failureproperty="cobertura.failure" datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}" haltonfailure="false" linerate="0" packagebranchrate="0" packagelinerate="0" totalbranchrate="25" totallinerate="30" />
		</sequential>
	</macrodef>

	<target name="test:all" description="Used by static-analysis, required since dist target cleans up generated classes that are required by some static analysis tools" depends="
			init,
			test:csm,
			test:upt,
			test:securityws
			" />

	<target name="test:csm" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${csm.build.file}" target="test" dir="${csm.base.dir}" />
	</target>

	<target name="test:upt" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${upt.build.file}" target="test" dir="${upt.base.dir}" />
	</target>

	<target name="test:securityws" depends="init">
		<ant inheritAll="false" inheritRefs="false" antfile="${securityws.build.file}" target="test" dir="${securityws.base.dir}" />
	</target>
</project>
