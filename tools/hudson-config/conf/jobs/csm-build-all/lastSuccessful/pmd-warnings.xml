<?xml version='1.0' encoding='UTF-8'?>

<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC, SAIC-Frederick

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/common-security-module/LICENSE.txt for details.
L-->

<annotation-array>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13620</key>
    <lineRanges>
      <range>
        <start>540</start>
        <end>543</end>
      </range>
    </lineRanges>
    <primaryLineNumber>540</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13646</key>
    <lineRanges>
      <range>
        <start>1053</start>
        <end>1054</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1053</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13328</key>
    <lineRanges>
      <range>
        <start>436</start>
        <end>436</end>
      </range>
    </lineRanges>
    <primaryLineNumber>436</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13172</key>
    <lineRanges>
      <range>
        <start>324</start>
        <end>327</end>
      </range>
    </lineRanges>
    <primaryLineNumber>324</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 848 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13893</key>
    <lineRanges>
      <range>
        <start>188</start>
        <end>188</end>
      </range>
    </lineRanges>
    <primaryLineNumber>188</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13189</key>
    <lineRanges>
      <range>
        <start>514</start>
        <end>517</end>
      </range>
    </lineRanges>
    <primaryLineNumber>514</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13806</key>
    <lineRanges>
      <range>
        <start>3718</start>
        <end>3721</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3718</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;kmf&apos;..</message>
    <priority>NORMAL</priority>
    <key>13529</key>
    <lineRanges>
      <range>
        <start>338</start>
        <end>338</end>
      </range>
    </lineRanges>
    <primaryLineNumber>338</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13204</key>
    <lineRanges>
      <range>
        <start>211</start>
        <end>212</end>
      </range>
    </lineRanges>
    <primaryLineNumber>211</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13988</key>
    <lineRanges>
      <range>
        <start>74</start>
        <end>75</end>
      </range>
    </lineRanges>
    <primaryLineNumber>74</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13703</key>
    <lineRanges>
      <range>
        <start>1985</start>
        <end>1988</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1985</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13383</key>
    <lineRanges>
      <range>
        <start>574</start>
        <end>574</end>
      </range>
    </lineRanges>
    <primaryLineNumber>574</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13494</key>
    <lineRanges>
      <range>
        <start>236</start>
        <end>236</end>
      </range>
    </lineRanges>
    <primaryLineNumber>236</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13474</key>
    <lineRanges>
      <range>
        <start>182</start>
        <end>183</end>
      </range>
    </lineRanges>
    <primaryLineNumber>182</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://security.nci.nih.gov/ws/authentication&quot; appears 6 times in this file; the first occurrence is on line 28.</message>
    <priority>NORMAL</priority>
    <key>14007</key>
    <lineRanges>
      <range>
        <start>28</start>
        <end>28</end>
      </range>
    </lineRanges>
    <primaryLineNumber>28</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13294</key>
    <lineRanges>
      <range>
        <start>303</start>
        <end>305</end>
      </range>
    </lineRanges>
    <primaryLineNumber>303</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13185</key>
    <lineRanges>
      <range>
        <start>472</start>
        <end>473</end>
      </range>
    </lineRanges>
    <primaryLineNumber>472</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13843</key>
    <lineRanges>
      <range>
        <start>4429</start>
        <end>4432</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4429</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;SEP_WILD&apos;..</message>
    <priority>NORMAL</priority>
    <key>13573</key>
    <lineRanges>
      <range>
        <start>112</start>
        <end>112</end>
      </range>
    </lineRanges>
    <primaryLineNumber>112</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13229</key>
    <lineRanges>
      <range>
        <start>140</start>
        <end>140</end>
      </range>
    </lineRanges>
    <primaryLineNumber>140</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 2 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13889</key>
    <lineRanges>
      <range>
        <start>151</start>
        <end>151</end>
      </range>
    </lineRanges>
    <primaryLineNumber>151</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13482</key>
    <lineRanges>
      <range>
        <start>280</start>
        <end>281</end>
      </range>
    </lineRanges>
    <primaryLineNumber>280</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13559</key>
    <lineRanges>
      <range>
        <start>90</start>
        <end>91</end>
      </range>
    </lineRanges>
    <primaryLineNumber>90</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13699</key>
    <lineRanges>
      <range>
        <start>1920</start>
        <end>1923</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1920</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13387</key>
    <lineRanges>
      <range>
        <start>504</start>
        <end>505</end>
      </range>
    </lineRanges>
    <primaryLineNumber>504</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13539</key>
    <lineRanges>
      <range>
        <start>167</start>
        <end>168</end>
      </range>
    </lineRanges>
    <primaryLineNumber>167</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14000</key>
    <lineRanges>
      <range>
        <start>49</start>
        <end>51</end>
      </range>
    </lineRanges>
    <primaryLineNumber>49</primaryLineNumber>
    <fileName>nih/nci/security/util/StringEncrypter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13250</key>
    <lineRanges>
      <range>
        <start>339</start>
        <end>341</end>
      </range>
    </lineRanges>
    <primaryLineNumber>339</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;firstTime&apos;..</message>
    <priority>NORMAL</priority>
    <key>13788</key>
    <lineRanges>
      <range>
        <start>3475</start>
        <end>3475</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3475</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13669</key>
    <lineRanges>
      <range>
        <start>1307</start>
        <end>1308</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1307</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13486</key>
    <lineRanges>
      <range>
        <start>306</start>
        <end>306</end>
      </range>
    </lineRanges>
    <primaryLineNumber>306</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13685</key>
    <lineRanges>
      <range>
        <start>1623</start>
        <end>1626</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1623</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13391</key>
    <lineRanges>
      <range>
        <start>571</start>
        <end>572</end>
      </range>
    </lineRanges>
    <primaryLineNumber>571</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13269</key>
    <lineRanges>
      <range>
        <start>545</start>
        <end>548</end>
      </range>
    </lineRanges>
    <primaryLineNumber>545</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14046</key>
    <lineRanges>
      <range>
        <start>42</start>
        <end>42</end>
      </range>
    </lineRanges>
    <primaryLineNumber>42</primaryLineNumber>
    <fileName>nih/nci/security/ws/handler/authorization/AuthorizationWebServiceRequestHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.handler.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13248</key>
    <lineRanges>
      <range>
        <start>289</start>
        <end>291</end>
      </range>
    </lineRanges>
    <primaryLineNumber>289</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13838</key>
    <lineRanges>
      <range>
        <start>4244</start>
        <end>4247</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4244</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13533</key>
    <lineRanges>
      <range>
        <start>467</start>
        <end>470</end>
      </range>
    </lineRanges>
    <primaryLineNumber>467</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13715</key>
    <lineRanges>
      <range>
        <start>2212</start>
        <end>2215</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2212</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13212</key>
    <lineRanges>
      <range>
        <start>289</start>
        <end>292</end>
      </range>
    </lineRanges>
    <primaryLineNumber>289</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13768</key>
    <lineRanges>
      <range>
        <start>3187</start>
        <end>3192</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3187</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13723</key>
    <lineRanges>
      <range>
        <start>2334</start>
        <end>2337</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2334</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>UselessOverridingMethod</type>
    <tooltip>
The overriding method merely calls the same method defined in a superclass
        &lt;pre&gt;
public void foo(String bar) {
    super.foo(bar);      //Why bother overriding?
}
        &lt;/pre&gt;</tooltip>
    <message>Overriding method merely calls super.</message>
    <priority>NORMAL</priority>
    <key>13581</key>
    <lineRanges>
      <range>
        <start>131</start>
        <end>133</end>
      </range>
    </lineRanges>
    <primaryLineNumber>131</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AuthPolicy.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13324</key>
    <lineRanges>
      <range>
        <start>138</start>
        <end>139</end>
      </range>
    </lineRanges>
    <primaryLineNumber>138</primaryLineNumber>
    <fileName>nih/nci/security/upt/exceptionHandler/DefaultExceptionHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.exceptionHandler</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13208</key>
    <lineRanges>
      <range>
        <start>251</start>
        <end>254</end>
      </range>
    </lineRanges>
    <primaryLineNumber>251</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13737</key>
    <lineRanges>
      <range>
        <start>2609</start>
        <end>2616</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2609</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14042</key>
    <lineRanges>
      <range>
        <start>39</start>
        <end>39</end>
      </range>
    </lineRanges>
    <primaryLineNumber>39</primaryLineNumber>
    <fileName>nih/nci/security/ws/factory/WebServiceRequestHandlerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.factory</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused constructor parameters such as &apos;roles&apos;..</message>
    <priority>NORMAL</priority>
    <key>13567</key>
    <lineRanges>
      <range>
        <start>124</start>
        <end>126</end>
      </range>
    </lineRanges>
    <primaryLineNumber>124</primaryLineNumber>
    <fileName>nih/nci/security/authorization/domainobjects/GroupRoleContext.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13176</key>
    <lineRanges>
      <range>
        <start>362</start>
        <end>365</end>
      </range>
    </lineRanges>
    <primaryLineNumber>362</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13741</key>
    <lineRanges>
      <range>
        <start>2686</start>
        <end>2689</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2686</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14003</key>
    <lineRanges>
      <range>
        <start>100</start>
        <end>102</end>
      </range>
    </lineRanges>
    <primaryLineNumber>100</primaryLineNumber>
    <fileName>nih/nci/security/util/StringEncrypter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13490</key>
    <lineRanges>
      <range>
        <start>329</start>
        <end>330</end>
      </range>
    </lineRanges>
    <primaryLineNumber>329</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13468</key>
    <lineRanges>
      <range>
        <start>129</start>
        <end>129</end>
      </range>
    </lineRanges>
    <primaryLineNumber>129</primaryLineNumber>
    <fileName>nih/nci/security/authentication/LockoutManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13153</key>
    <lineRanges>
      <range>
        <start>157</start>
        <end>157</end>
      </range>
    </lineRanges>
    <primaryLineNumber>157</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13379</key>
    <lineRanges>
      <range>
        <start>549</start>
        <end>550</end>
      </range>
    </lineRanges>
    <primaryLineNumber>549</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13608</key>
    <lineRanges>
      <range>
        <start>326</start>
        <end>326</end>
      </range>
    </lineRanges>
    <primaryLineNumber>326</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13273</key>
    <lineRanges>
      <range>
        <start>595</start>
        <end>598</end>
      </range>
    </lineRanges>
    <primaryLineNumber>595</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;csm_privilege p &quot; appears 6 times in this file; the first occurrence is on line 198.</message>
    <priority>NORMAL</priority>
    <key>13901</key>
    <lineRanges>
      <range>
        <start>198</start>
        <end>198</end>
      </range>
    </lineRanges>
    <primaryLineNumber>198</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13764</key>
    <lineRanges>
      <range>
        <start>3133</start>
        <end>3136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3133</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13147</key>
    <lineRanges>
      <range>
        <start>191</start>
        <end>194</end>
      </range>
    </lineRanges>
    <primaryLineNumber>191</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13478</key>
    <lineRanges>
      <range>
        <start>230</start>
        <end>231</end>
      </range>
    </lineRanges>
    <primaryLineNumber>230</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 669 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13855</key>
    <lineRanges>
      <range>
        <start>4598</start>
        <end>4598</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4598</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13513</key>
    <lineRanges>
      <range>
        <start>397</start>
        <end>398</end>
      </range>
    </lineRanges>
    <primaryLineNumber>397</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13858</key>
    <lineRanges>
      <range>
        <start>4672</start>
        <end>4675</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4672</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13733</key>
    <lineRanges>
      <range>
        <start>2493</start>
        <end>2499</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2493</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Error in parsing the Application Security Config file&quot; appears 10 times in this file; the first occurrence is on line 49.</message>
    <priority>NORMAL</priority>
    <key>13969</key>
    <lineRanges>
      <range>
        <start>49</start>
        <end>49</end>
      </range>
    </lineRanges>
    <primaryLineNumber>49</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13342</key>
    <lineRanges>
      <range>
        <start>437</start>
        <end>437</end>
      </range>
    </lineRanges>
    <primaryLineNumber>437</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/InstanceLevelForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13555</key>
    <lineRanges>
      <range>
        <start>67</start>
        <end>68</end>
      </range>
    </lineRanges>
    <primaryLineNumber>67</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/AttributeSecuritySessionInterceptor.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13727</key>
    <lineRanges>
      <range>
        <start>2395</start>
        <end>2398</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2395</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13348</key>
    <lineRanges>
      <range>
        <start>432</start>
        <end>433</end>
      </range>
    </lineRanges>
    <primaryLineNumber>432</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; - &quot; appears 6 times in this file; the first occurrence is on line 121.</message>
    <priority>NORMAL</priority>
    <key>13407</key>
    <lineRanges>
      <range>
        <start>121</start>
        <end>121</end>
      </range>
    </lineRanges>
    <primaryLineNumber>121</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13847</key>
    <lineRanges>
      <range>
        <start>4493</start>
        <end>4498</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4493</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; from csm_protection_group pg,&quot; appears 4 times in this file; the first occurrence is on line 404.</message>
    <priority>NORMAL</priority>
    <key>13920</key>
    <lineRanges>
      <range>
        <start>404</start>
        <end>404</end>
      </range>
    </lineRanges>
    <primaryLineNumber>404</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13822</key>
    <lineRanges>
      <range>
        <start>3962</start>
        <end>3965</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3962</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13693</key>
    <lineRanges>
      <range>
        <start>1809</start>
        <end>1812</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1809</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13604</key>
    <lineRanges>
      <range>
        <start>307</start>
        <end>307</end>
      </range>
    </lineRanges>
    <primaryLineNumber>307</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13543</key>
    <lineRanges>
      <range>
        <start>239</start>
        <end>240</end>
      </range>
    </lineRanges>
    <primaryLineNumber>239</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13290</key>
    <lineRanges>
      <range>
        <start>244</start>
        <end>246</end>
      </range>
    </lineRanges>
    <primaryLineNumber>244</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13332</key>
    <lineRanges>
      <range>
        <start>486</start>
        <end>486</end>
      </range>
    </lineRanges>
    <primaryLineNumber>486</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13811</key>
    <lineRanges>
      <range>
        <start>3786</start>
        <end>3788</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3786</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13802</key>
    <lineRanges>
      <range>
        <start>3684</start>
        <end>3685</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3684</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13689</key>
    <lineRanges>
      <range>
        <start>1700</start>
        <end>1703</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1700</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_htPermissions&apos;..</message>
    <priority>NORMAL</priority>
    <key>13589</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13665</key>
    <lineRanges>
      <range>
        <start>1261</start>
        <end>1262</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1261</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13862</key>
    <lineRanges>
      <range>
        <start>4803</start>
        <end>4806</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4803</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13409</key>
    <lineRanges>
      <range>
        <start>182</start>
        <end>183</end>
      </range>
    </lineRanges>
    <primaryLineNumber>182</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;simpledf&apos;..</message>
    <priority>NORMAL</priority>
    <key>14015</key>
    <lineRanges>
      <range>
        <start>88</start>
        <end>88</end>
      </range>
    </lineRanges>
    <primaryLineNumber>88</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;isInitialized&apos;..</message>
    <priority>NORMAL</priority>
    <key>13403</key>
    <lineRanges>
      <range>
        <start>21</start>
        <end>21</end>
      </range>
    </lineRanges>
    <primaryLineNumber>21</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/ClassLoaderUtil.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 789 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13916</key>
    <lineRanges>
      <range>
        <start>368</start>
        <end>368</end>
      </range>
    </lineRanges>
    <primaryLineNumber>368</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14027</key>
    <lineRanges>
      <range>
        <start>165</start>
        <end>165</end>
      </range>
    </lineRanges>
    <primaryLineNumber>165</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13309</key>
    <lineRanges>
      <range>
        <start>157</start>
        <end>157</end>
      </range>
    </lineRanges>
    <primaryLineNumber>157</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;qName2&apos;..</message>
    <priority>NORMAL</priority>
    <key>14011</key>
    <lineRanges>
      <range>
        <start>80</start>
        <end>80</end>
      </range>
    </lineRanges>
    <primaryLineNumber>80</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13498</key>
    <lineRanges>
      <range>
        <start>246</start>
        <end>246</end>
      </range>
    </lineRanges>
    <primaryLineNumber>246</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13216</key>
    <lineRanges>
      <range>
        <start>330</start>
        <end>332</end>
      </range>
    </lineRanges>
    <primaryLineNumber>330</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>UselessOverridingMethod</type>
    <tooltip>
The overriding method merely calls the same method defined in a superclass
        &lt;pre&gt;
public void foo(String bar) {
    super.foo(bar);      //Why bother overriding?
}
        &lt;/pre&gt;</tooltip>
    <message>Overriding method merely calls super.</message>
    <priority>NORMAL</priority>
    <key>13611</key>
    <lineRanges>
      <range>
        <start>339</start>
        <end>341</end>
      </range>
    </lineRanges>
    <primaryLineNumber>339</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_user_group_role_pg ugrpg,&quot; appears 4 times in this file; the first occurrence is on line 407.</message>
    <priority>NORMAL</priority>
    <key>13923</key>
    <lineRanges>
      <range>
        <start>407</start>
        <end>407</end>
      </range>
    </lineRanges>
    <primaryLineNumber>407</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13225</key>
    <lineRanges>
      <range>
        <start>425</start>
        <end>428</end>
      </range>
    </lineRanges>
    <primaryLineNumber>425</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13502</key>
    <lineRanges>
      <range>
        <start>270</start>
        <end>271</end>
      </range>
    </lineRanges>
    <primaryLineNumber>270</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13615</key>
    <lineRanges>
      <range>
        <start>472</start>
        <end>475</end>
      </range>
    </lineRanges>
    <primaryLineNumber>472</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13632</key>
    <lineRanges>
      <range>
        <start>725</start>
        <end>728</end>
      </range>
    </lineRanges>
    <primaryLineNumber>725</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;string&quot; appears 6 times in this file; the first occurrence is on line 233.</message>
    <priority>NORMAL</priority>
    <key>14031</key>
    <lineRanges>
      <range>
        <start>233</start>
        <end>233</end>
      </range>
    </lineRanges>
    <primaryLineNumber>233</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13184</key>
    <lineRanges>
      <range>
        <start>456</start>
        <end>459</end>
      </range>
    </lineRanges>
    <primaryLineNumber>456</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13676</key>
    <lineRanges>
      <range>
        <start>1390</start>
        <end>1393</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1390</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13681</key>
    <lineRanges>
      <range>
        <start>1505</start>
        <end>1512</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1505</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13298</key>
    <lineRanges>
      <range>
        <start>349</start>
        <end>350</end>
      </range>
    </lineRanges>
    <primaryLineNumber>349</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13966</key>
    <lineRanges>
      <range>
        <start>144</start>
        <end>144</end>
      </range>
    </lineRanges>
    <primaryLineNumber>144</primaryLineNumber>
    <fileName>nih/nci/security/junk/RandomIntGenerator.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.junk</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13517</key>
    <lineRanges>
      <range>
        <start>199</start>
        <end>200</end>
      </range>
    </lineRanges>
    <primaryLineNumber>199</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;protectionGroup&quot; appears 9 times in this file; the first occurrence is on line 608.</message>
    <priority>NORMAL</priority>
    <key>13624</key>
    <lineRanges>
      <range>
        <start>608</start>
        <end>608</end>
      </range>
    </lineRanges>
    <primaryLineNumber>608</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;csm_protection_element pe,&quot; appears 4 times in this file; the first occurrence is on line 191.</message>
    <priority>NORMAL</priority>
    <key>13897</key>
    <lineRanges>
      <range>
        <start>191</start>
        <end>191</end>
      </range>
    </lineRanges>
    <primaryLineNumber>191</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13221</key>
    <lineRanges>
      <range>
        <start>375</start>
        <end>377</end>
      </range>
    </lineRanges>
    <primaryLineNumber>375</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13851</key>
    <lineRanges>
      <range>
        <start>4549</start>
        <end>4552</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4549</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13336</key>
    <lineRanges>
      <range>
        <start>527</start>
        <end>528</end>
      </range>
    </lineRanges>
    <primaryLineNumber>527</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;stopSQLCapture(Appender,ByteArrayOutputStream)&apos;..</message>
    <priority>NORMAL</priority>
    <key>13426</key>
    <lineRanges>
      <range>
        <start>495</start>
        <end>495</end>
      </range>
    </lineRanges>
    <primaryLineNumber>495</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13992</key>
    <lineRanges>
      <range>
        <start>127</start>
        <end>128</end>
      </range>
    </lineRanges>
    <primaryLineNumber>127</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13302</key>
    <lineRanges>
      <range>
        <start>131</start>
        <end>132</end>
      </range>
    </lineRanges>
    <primaryLineNumber>131</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13161</key>
    <lineRanges>
      <range>
        <start>211</start>
        <end>211</end>
      </range>
    </lineRanges>
    <primaryLineNumber>211</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 6 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13877</key>
    <lineRanges>
      <range>
        <start>109</start>
        <end>109</end>
      </range>
    </lineRanges>
    <primaryLineNumber>109</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            AND pg.protection_group_id = pgpe.protection_group_id&quot; appears 5 times in this file; the first occurrence is on line 549.</message>
    <priority>NORMAL</priority>
    <key>13954</key>
    <lineRanges>
      <range>
        <start>549</start>
        <end>549</end>
      </range>
    </lineRanges>
    <primaryLineNumber>549</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13831</key>
    <lineRanges>
      <range>
        <start>4121</start>
        <end>4124</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4121</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13261</key>
    <lineRanges>
      <range>
        <start>468</start>
        <end>469</end>
      </range>
    </lineRanges>
    <primaryLineNumber>468</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13422</key>
    <lineRanges>
      <range>
        <start>392</start>
        <end>392</end>
      </range>
    </lineRanges>
    <primaryLineNumber>392</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13749</key>
    <lineRanges>
      <range>
        <start>2810</start>
        <end>2813</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2810</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 45 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13943</key>
    <lineRanges>
      <range>
        <start>535</start>
        <end>535</end>
      </range>
    </lineRanges>
    <primaryLineNumber>535</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13237</key>
    <lineRanges>
      <range>
        <start>199</start>
        <end>199</end>
      </range>
    </lineRanges>
    <primaryLineNumber>199</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13218</key>
    <lineRanges>
      <range>
        <start>351</start>
        <end>354</end>
      </range>
    </lineRanges>
    <primaryLineNumber>351</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13200</key>
    <lineRanges>
      <range>
        <start>174</start>
        <end>175</end>
      </range>
    </lineRanges>
    <primaryLineNumber>174</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization|||getProtectionGroupRoleContextForUser|Failure|Error in Closing Session |&quot; appears 4 times in this file; the first occurrence is on line 3,280.</message>
    <priority>NORMAL</priority>
    <key>13776</key>
    <lineRanges>
      <range>
        <start>3280</start>
        <end>3280</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3280</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14023</key>
    <lineRanges>
      <range>
        <start>43</start>
        <end>43</end>
      </range>
    </lineRanges>
    <primaryLineNumber>43</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginResponse.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>UseIndexOfChar</type>
    <tooltip>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    &lt;pre&gt;

public class Foo {
 void bar() {
  String s = &quot;hello world&quot;;
  // avoid this
  if (s.indexOf(&quot;d&quot;) {}
  // instead do this
  if (s.indexOf(&apos;d&apos;) {}
 }
}

    &lt;/pre&gt;</tooltip>
    <message>String.indexOf(char) is faster than String.indexOf(String)..</message>
    <priority>NORMAL</priority>
    <key>13447</key>
    <lineRanges>
      <range>
        <start>125</start>
        <end>125</end>
      </range>
    </lineRanges>
    <primaryLineNumber>125</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13361</key>
    <lineRanges>
      <range>
        <start>303</start>
        <end>303</end>
      </range>
    </lineRanges>
    <primaryLineNumber>303</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;SQL_GETALLPERM&apos;..</message>
    <priority>NORMAL</priority>
    <key>13586</key>
    <lineRanges>
      <range>
        <start>131</start>
        <end>131</end>
      </range>
    </lineRanges>
    <primaryLineNumber>131</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13306</key>
    <lineRanges>
      <range>
        <start>151</start>
        <end>151</end>
      </range>
    </lineRanges>
    <primaryLineNumber>151</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13165</key>
    <lineRanges>
      <range>
        <start>251</start>
        <end>251</end>
      </range>
    </lineRanges>
    <primaryLineNumber>251</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13873</key>
    <lineRanges>
      <range>
        <start>4994</start>
        <end>4996</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4994</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and pe.application_id=?&quot; appears 8 times in this file; the first occurrence is on line 114.</message>
    <priority>NORMAL</priority>
    <key>13882</key>
    <lineRanges>
      <range>
        <start>114</start>
        <end>114</end>
      </range>
    </lineRanges>
    <primaryLineNumber>114</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringToString</type>
    <tooltip>
    Avoid calling toString() on String objects; this is unnecessary.
    &lt;pre&gt;

public class Foo {
 private String baz() {
  String bar = &quot;howdy&quot;;
  return bar.toString();
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid calling toString() on String objects; this is unnecessary..</message>
    <priority>NORMAL</priority>
    <key>13418</key>
    <lineRanges>
      <range>
        <start>380</start>
        <end>380</end>
      </range>
    </lineRanges>
    <primaryLineNumber>380</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 960 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13958</key>
    <lineRanges>
      <range>
        <start>633</start>
        <end>633</end>
      </range>
    </lineRanges>
    <primaryLineNumber>633</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13180</key>
    <lineRanges>
      <range>
        <start>412</start>
        <end>415</end>
      </range>
    </lineRanges>
    <primaryLineNumber>412</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyIfStmt</type>
    <tooltip>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    &lt;pre&gt;
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       &lt;/pre&gt;</tooltip>
    <message>Avoid empty if statements.</message>
    <priority>NORMAL</priority>
    <key>13443</key>
    <lineRanges>
      <range>
        <start>71</start>
        <end>73</end>
      </range>
    </lineRanges>
    <primaryLineNumber>71</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13414</key>
    <lineRanges>
      <range>
        <start>312</start>
        <end>312</end>
      </range>
    </lineRanges>
    <primaryLineNumber>312</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13818</key>
    <lineRanges>
      <range>
        <start>3885</start>
        <end>3888</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3885</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13365</key>
    <lineRanges>
      <range>
        <start>390</start>
        <end>391</end>
      </range>
    </lineRanges>
    <primaryLineNumber>390</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;CONFIG_FILE_LOCATION&apos;..</message>
    <priority>NORMAL</priority>
    <key>13962</key>
    <lineRanges>
      <range>
        <start>105</start>
        <end>105</end>
      </range>
    </lineRanges>
    <primaryLineNumber>105</primaryLineNumber>
    <fileName>nih/nci/security/dao/hibernate/HibernateSessionFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao.hibernate</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13866</key>
    <lineRanges>
      <range>
        <start>4893</start>
        <end>4896</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4893</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_bTail&apos;..</message>
    <priority>NORMAL</priority>
    <key>13577</key>
    <lineRanges>
      <range>
        <start>116</start>
        <end>116</end>
      </range>
    </lineRanges>
    <primaryLineNumber>116</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; object|&quot; appears 4 times in this file; the first occurrence is on line 150.</message>
    <priority>NORMAL</priority>
    <key>13143</key>
    <lineRanges>
      <range>
        <start>150</start>
        <end>150</end>
      </range>
    </lineRanges>
    <primaryLineNumber>150</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13627</key>
    <lineRanges>
      <range>
        <start>651</start>
        <end>659</end>
      </range>
    </lineRanges>
    <primaryLineNumber>651</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13460</key>
    <lineRanges>
      <range>
        <start>242</start>
        <end>242</end>
      </range>
    </lineRanges>
    <primaryLineNumber>242</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13320</key>
    <lineRanges>
      <range>
        <start>169</start>
        <end>172</end>
      </range>
    </lineRanges>
    <primaryLineNumber>169</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13508</key>
    <lineRanges>
      <range>
        <start>338</start>
        <end>339</end>
      </range>
    </lineRanges>
    <primaryLineNumber>338</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13638</key>
    <lineRanges>
      <range>
        <start>836</start>
        <end>839</end>
      </range>
    </lineRanges>
    <primaryLineNumber>836</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13563</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13798</key>
    <lineRanges>
      <range>
        <start>3670</start>
        <end>3671</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3670</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13372</key>
    <lineRanges>
      <range>
        <start>476</start>
        <end>477</end>
      </range>
    </lineRanges>
    <primaryLineNumber>476</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13316</key>
    <lineRanges>
      <range>
        <start>138</start>
        <end>138</end>
      </range>
    </lineRanges>
    <primaryLineNumber>138</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13512</key>
    <lineRanges>
      <range>
        <start>393</start>
        <end>394</end>
      </range>
    </lineRanges>
    <primaryLineNumber>393</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13976</key>
    <lineRanges>
      <range>
        <start>196</start>
        <end>197</end>
      </range>
    </lineRanges>
    <primaryLineNumber>196</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_privilege p&quot; appears 4 times in this file; the first occurrence is on line 411.</message>
    <priority>NORMAL</priority>
    <key>13927</key>
    <lineRanges>
      <range>
        <start>411</start>
        <end>411</end>
      </range>
    </lineRanges>
    <primaryLineNumber>411</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13287</key>
    <lineRanges>
      <range>
        <start>208</start>
        <end>210</end>
      </range>
    </lineRanges>
    <primaryLineNumber>208</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13692</key>
    <lineRanges>
      <range>
        <start>1795</start>
        <end>1801</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1795</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13410</key>
    <lineRanges>
      <range>
        <start>195</start>
        <end>195</end>
      </range>
    </lineRanges>
    <primaryLineNumber>195</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13353</key>
    <lineRanges>
      <range>
        <start>307</start>
        <end>307</end>
      </range>
    </lineRanges>
    <primaryLineNumber>307</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13794</key>
    <lineRanges>
      <range>
        <start>3618</start>
        <end>3619</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3618</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 108 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13935</key>
    <lineRanges>
      <range>
        <start>449</start>
        <end>449</end>
      </range>
    </lineRanges>
    <primaryLineNumber>449</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13745</key>
    <lineRanges>
      <range>
        <start>2714</start>
        <end>2720</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2714</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            csm_pg_pe pgpe,&quot; appears 5 times in this file; the first occurrence is on line 542.</message>
    <priority>NORMAL</priority>
    <key>13947</key>
    <lineRanges>
      <range>
        <start>542</start>
        <end>542</end>
      </range>
    </lineRanges>
    <primaryLineNumber>542</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13196</key>
    <lineRanges>
      <range>
        <start>141</start>
        <end>142</end>
      </range>
    </lineRanges>
    <primaryLineNumber>141</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13451</key>
    <lineRanges>
      <range>
        <start>184</start>
        <end>185</end>
      </range>
    </lineRanges>
    <primaryLineNumber>184</primaryLineNumber>
    <fileName>nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13277</key>
    <lineRanges>
      <range>
        <start>648</start>
        <end>649</end>
      </range>
    </lineRanges>
    <primaryLineNumber>648</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13680</key>
    <lineRanges>
      <range>
        <start>1464</start>
        <end>1471</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1464</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13835</key>
    <lineRanges>
      <range>
        <start>4181</start>
        <end>4184</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4181</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13233</key>
    <lineRanges>
      <range>
        <start>168</start>
        <end>168</end>
      </range>
    </lineRanges>
    <primaryLineNumber>168</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14019</key>
    <lineRanges>
      <range>
        <start>91</start>
        <end>91</end>
      </range>
    </lineRanges>
    <primaryLineNumber>91</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; object id: &quot; appears 10 times in this file; the first occurrence is on line 1,186.</message>
    <priority>NORMAL</priority>
    <key>13655</key>
    <lineRanges>
      <range>
        <start>1186</start>
        <end>1186</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1186</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;loginSuccessful&apos;..</message>
    <priority>NORMAL</priority>
    <key>13283</key>
    <lineRanges>
      <range>
        <start>142</start>
        <end>142</end>
      </range>
    </lineRanges>
    <primaryLineNumber>142</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13707</key>
    <lineRanges>
      <range>
        <start>2047</start>
        <end>2050</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2047</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 2 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13886</key>
    <lineRanges>
      <range>
        <start>150</start>
        <end>150</end>
      </range>
    </lineRanges>
    <primaryLineNumber>150</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13663</key>
    <lineRanges>
      <range>
        <start>1246</start>
        <end>1247</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1246</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13791</key>
    <lineRanges>
      <range>
        <start>3539</start>
        <end>3540</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3539</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyStaticInitializer</type>
    <tooltip>
An empty static initializer was found.
       &lt;pre&gt;
   
public class Foo {
 static {
  // empty
 }
 }

       &lt;/pre&gt;</tooltip>
    <message>Empty static initializer was found.</message>
    <priority>NORMAL</priority>
    <key>13399</key>
    <lineRanges>
      <range>
        <start>16</start>
        <end>18</end>
      </range>
    </lineRanges>
    <primaryLineNumber>16</primaryLineNumber>
    <fileName>nih/nci/security/upt/logoninfo/LogonInfoManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.logoninfo</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13598</key>
    <lineRanges>
      <range>
        <start>226</start>
        <end>227</end>
      </range>
    </lineRanges>
    <primaryLineNumber>226</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13984</key>
    <lineRanges>
      <range>
        <start>276</start>
        <end>277</end>
      </range>
    </lineRanges>
    <primaryLineNumber>276</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused constructor parameters such as &apos;roles&apos;..</message>
    <priority>NORMAL</priority>
    <key>13569</key>
    <lineRanges>
      <range>
        <start>122</start>
        <end>124</end>
      </range>
    </lineRanges>
    <primaryLineNumber>122</primaryLineNumber>
    <fileName>nih/nci/security/authorization/domainobjects/UserRoleContext.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13433</key>
    <lineRanges>
      <range>
        <start>259</start>
        <end>259</end>
      </range>
    </lineRanges>
    <primaryLineNumber>259</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13472</key>
    <lineRanges>
      <range>
        <start>178</start>
        <end>179</end>
      </range>
    </lineRanges>
    <primaryLineNumber>178</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13437</key>
    <lineRanges>
      <range>
        <start>393</start>
        <end>394</end>
      </range>
    </lineRanges>
    <primaryLineNumber>393</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; where pgpe.protection_group_id = pg.protection_group_id &quot; appears 4 times in this file; the first occurrence is on line 234.</message>
    <priority>NORMAL</priority>
    <key>13909</key>
    <lineRanges>
      <range>
        <start>234</start>
        <end>234</end>
      </range>
    </lineRanges>
    <primaryLineNumber>234</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13720</key>
    <lineRanges>
      <range>
        <start>2307</start>
        <end>2310</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2307</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13827</key>
    <lineRanges>
      <range>
        <start>4042</start>
        <end>4045</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4042</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13753</key>
    <lineRanges>
      <range>
        <start>2837</start>
        <end>2842</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2837</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization|||checkPermission|Failure|Error in Closing Session |&quot; appears 5 times in this file; the first occurrence is on line 1,197.</message>
    <priority>NORMAL</priority>
    <key>13659</key>
    <lineRanges>
      <range>
        <start>1197</start>
        <end>1197</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1197</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13188</key>
    <lineRanges>
      <range>
        <start>502</start>
        <end>505</end>
      </range>
    </lineRanges>
    <primaryLineNumber>502</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14037</key>
    <lineRanges>
      <range>
        <start>67</start>
        <end>67</end>
      </range>
    </lineRanges>
    <primaryLineNumber>67</primaryLineNumber>
    <fileName>nih/nci/security/ws/common/ErrorDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.common</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13634</key>
    <lineRanges>
      <range>
        <start>744</start>
        <end>747</end>
      </range>
    </lineRanges>
    <primaryLineNumber>744</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 5 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13781</key>
    <lineRanges>
      <range>
        <start>3357</start>
        <end>3357</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3357</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13464</key>
    <lineRanges>
      <range>
        <start>255</start>
        <end>256</end>
      </range>
    </lineRanges>
    <primaryLineNumber>255</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13245</key>
    <lineRanges>
      <range>
        <start>264</start>
        <end>264</end>
      </range>
    </lineRanges>
    <primaryLineNumber>264</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 5 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13772</key>
    <lineRanges>
      <range>
        <start>3246</start>
        <end>3246</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3246</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13376</key>
    <lineRanges>
      <range>
        <start>511</start>
        <end>512</end>
      </range>
    </lineRanges>
    <primaryLineNumber>511</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13265</key>
    <lineRanges>
      <range>
        <start>511</start>
        <end>511</end>
      </range>
    </lineRanges>
    <primaryLineNumber>511</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13241</key>
    <lineRanges>
      <range>
        <start>238</start>
        <end>238</end>
      </range>
    </lineRanges>
    <primaryLineNumber>238</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13378</key>
    <lineRanges>
      <range>
        <start>547</start>
        <end>548</end>
      </range>
    </lineRanges>
    <primaryLineNumber>547</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13672</key>
    <lineRanges>
      <range>
        <start>1324</start>
        <end>1324</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1324</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13525</key>
    <lineRanges>
      <range>
        <start>249</start>
        <end>249</end>
      </range>
    </lineRanges>
    <primaryLineNumber>249</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14033</key>
    <lineRanges>
      <range>
        <start>45</start>
        <end>45</end>
      </range>
    </lineRanges>
    <primaryLineNumber>45</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionResponse.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and ugrpg.role_id = rp.role_id &quot; appears 6 times in this file; the first occurrence is on line 206.</message>
    <priority>NORMAL</priority>
    <key>13905</key>
    <lineRanges>
      <range>
        <start>206</start>
        <end>206</end>
      </range>
    </lineRanges>
    <primaryLineNumber>206</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13192</key>
    <lineRanges>
      <range>
        <start>548</start>
        <end>551</end>
      </range>
    </lineRanges>
    <primaryLineNumber>548</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13357</key>
    <lineRanges>
      <range>
        <start>389</start>
        <end>389</end>
      </range>
    </lineRanges>
    <primaryLineNumber>389</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; r.role_id = rp.role_id and&quot; appears 4 times in this file; the first occurrence is on line 417.</message>
    <priority>NORMAL</priority>
    <key>13931</key>
    <lineRanges>
      <range>
        <start>417</start>
        <end>417</end>
      </range>
    </lineRanges>
    <primaryLineNumber>417</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13777</key>
    <lineRanges>
      <range>
        <start>3315</start>
        <end>3318</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3315</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13253</key>
    <lineRanges>
      <range>
        <start>386</start>
        <end>388</end>
      </range>
    </lineRanges>
    <primaryLineNumber>386</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13594</key>
    <lineRanges>
      <range>
        <start>194</start>
        <end>198</end>
      </range>
    </lineRanges>
    <primaryLineNumber>194</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13996</key>
    <lineRanges>
      <range>
        <start>20</start>
        <end>20</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName>nih/nci/security/util/ObjectUpdater.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13757</key>
    <lineRanges>
      <range>
        <start>2934</start>
        <end>2939</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2934</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13521</key>
    <lineRanges>
      <range>
        <start>225</start>
        <end>226</end>
      </range>
    </lineRanges>
    <primaryLineNumber>225</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13651</key>
    <lineRanges>
      <range>
        <start>1118</start>
        <end>1119</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1118</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13151</key>
    <lineRanges>
      <range>
        <start>147</start>
        <end>149</end>
      </range>
    </lineRanges>
    <primaryLineNumber>147</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 76 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13548</key>
    <lineRanges>
      <range>
        <start>132</start>
        <end>132</end>
      </range>
    </lineRanges>
    <primaryLineNumber>132</primaryLineNumber>
    <fileName>nih/nci/security/authorization/ObjectAccessMap.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13257</key>
    <lineRanges>
      <range>
        <start>429</start>
        <end>431</end>
      </range>
    </lineRanges>
    <primaryLineNumber>429</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13711</key>
    <lineRanges>
      <range>
        <start>2125</start>
        <end>2128</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2125</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13642</key>
    <lineRanges>
      <range>
        <start>957</start>
        <end>960</end>
      </range>
    </lineRanges>
    <primaryLineNumber>957</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13870</key>
    <lineRanges>
      <range>
        <start>4950</start>
        <end>4951</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4950</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;      WHERE pgpe.protection_group_id = ANY (SELECT pg1.protection_group_id FROM csm_protection_group pg1 WHERE pg1.parent_protection_group_id = ugrpg.protection_group_id OR pg1.protection_group_id = ugrpg.protection_group_id)&quot; appears 5 times in this file; the first occurrence is on line 546.</message>
    <priority>NORMAL</priority>
    <key>13951</key>
    <lineRanges>
      <range>
        <start>546</start>
        <end>546</end>
      </range>
    </lineRanges>
    <primaryLineNumber>546</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13157</key>
    <lineRanges>
      <range>
        <start>185</start>
        <end>185</end>
      </range>
    </lineRanges>
    <primaryLineNumber>185</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13395</key>
    <lineRanges>
      <range>
        <start>579</start>
        <end>580</end>
      </range>
    </lineRanges>
    <primaryLineNumber>579</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13785</key>
    <lineRanges>
      <range>
        <start>3427</start>
        <end>3430</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3427</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>UseIndexOfChar</type>
    <tooltip>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    &lt;pre&gt;

public class Foo {
 void bar() {
  String s = &quot;hello world&quot;;
  // avoid this
  if (s.indexOf(&quot;d&quot;) {}
  // instead do this
  if (s.indexOf(&apos;d&apos;) {}
 }
}

    &lt;/pre&gt;</tooltip>
    <message>String.indexOf(char) is faster than String.indexOf(String)..</message>
    <priority>NORMAL</priority>
    <key>13684</key>
    <lineRanges>
      <range>
        <start>1574</start>
        <end>1574</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1574</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InefficientStringBuffering</type>
    <tooltip>
Avoid concatenating non literals in a StringBuffer constructor or append().
    &lt;pre&gt;

public class Foo {
 void bar() {
  // Avoid this
  StringBuffer sb=new StringBuffer(&quot;tmp = &quot;+System.getProperty(&quot;java.io.tmpdir&quot;));
  // use instead something like this
  StringBuffer sb = new StringBuffer(&quot;tmp = &quot;);
  sb.append(System.getProperty(&quot;java.io.tmpdir&quot;));
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid concatenating nonliterals in a StringBuffer constructor or append()..</message>
    <priority>NORMAL</priority>
    <key>14006</key>
    <lineRanges>
      <range>
        <start>146</start>
        <end>146</end>
      </range>
    </lineRanges>
    <primaryLineNumber>146</primaryLineNumber>
    <fileName>nih/nci/security/util/StringUtilities.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13171</key>
    <lineRanges>
      <range>
        <start>318</start>
        <end>321</end>
      </range>
    </lineRanges>
    <primaryLineNumber>318</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13842</key>
    <lineRanges>
      <range>
        <start>4423</start>
        <end>4426</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4423</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13540</key>
    <lineRanges>
      <range>
        <start>172</start>
        <end>173</end>
      </range>
    </lineRanges>
    <primaryLineNumber>172</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13702</key>
    <lineRanges>
      <range>
        <start>1976</start>
        <end>1979</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1976</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13621</key>
    <lineRanges>
      <range>
        <start>545</start>
        <end>549</end>
      </range>
    </lineRanges>
    <primaryLineNumber>545</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13550</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>nih/nci/security/authorization/ObjectAccessMap.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;from csm_protection_group pg,&quot; appears 4 times in this file; the first occurrence is on line 190.</message>
    <priority>NORMAL</priority>
    <key>13896</key>
    <lineRanges>
      <range>
        <start>190</start>
        <end>190</end>
      </range>
    </lineRanges>
    <primaryLineNumber>190</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;addToCollection(PermissionCollection,PermissionCollection)&apos;..</message>
    <priority>NORMAL</priority>
    <key>13584</key>
    <lineRanges>
      <range>
        <start>179</start>
        <end>179</end>
      </range>
    </lineRanges>
    <primaryLineNumber>179</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AuthPolicy.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13190</key>
    <lineRanges>
      <range>
        <start>520</start>
        <end>523</end>
      </range>
    </lineRanges>
    <primaryLineNumber>520</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13530</key>
    <lineRanges>
      <range>
        <start>350</start>
        <end>352</end>
      </range>
    </lineRanges>
    <primaryLineNumber>350</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13392</key>
    <lineRanges>
      <range>
        <start>573</start>
        <end>574</end>
      </range>
    </lineRanges>
    <primaryLineNumber>573</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13230</key>
    <lineRanges>
      <range>
        <start>141</start>
        <end>141</end>
      </range>
    </lineRanges>
    <primaryLineNumber>141</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13765</key>
    <lineRanges>
      <range>
        <start>3139</start>
        <end>3142</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3139</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and Attribute Id &quot; appears 4 times in this file; the first occurrence is on line 2,613.</message>
    <priority>NORMAL</priority>
    <key>13738</key>
    <lineRanges>
      <range>
        <start>2613</start>
        <end>2613</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2613</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13329</key>
    <lineRanges>
      <range>
        <start>437</start>
        <end>437</end>
      </range>
    </lineRanges>
    <primaryLineNumber>437</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13473</key>
    <lineRanges>
      <range>
        <start>180</start>
        <end>181</end>
      </range>
    </lineRanges>
    <primaryLineNumber>180</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>UseIndexOfChar</type>
    <tooltip>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    &lt;pre&gt;

public class Foo {
 void bar() {
  String s = &quot;hello world&quot;;
  // avoid this
  if (s.indexOf(&quot;d&quot;) {}
  // instead do this
  if (s.indexOf(&apos;d&apos;) {}
 }
}

    &lt;/pre&gt;</tooltip>
    <message>String.indexOf(char) is faster than String.indexOf(String)..</message>
    <priority>NORMAL</priority>
    <key>13688</key>
    <lineRanges>
      <range>
        <start>1657</start>
        <end>1657</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1657</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13175</key>
    <lineRanges>
      <range>
        <start>349</start>
        <end>351</end>
      </range>
    </lineRanges>
    <primaryLineNumber>349</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13384</key>
    <lineRanges>
      <range>
        <start>606</start>
        <end>607</end>
      </range>
    </lineRanges>
    <primaryLineNumber>606</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13698</key>
    <lineRanges>
      <range>
        <start>1911</start>
        <end>1914</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1911</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13293</key>
    <lineRanges>
      <range>
        <start>276</start>
        <end>278</end>
      </range>
    </lineRanges>
    <primaryLineNumber>276</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13272</key>
    <lineRanges>
      <range>
        <start>588</start>
        <end>591</end>
      </range>
    </lineRanges>
    <primaryLineNumber>588</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13249</key>
    <lineRanges>
      <range>
        <start>310</start>
        <end>311</end>
      </range>
    </lineRanges>
    <primaryLineNumber>310</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13999</key>
    <lineRanges>
      <range>
        <start>47</start>
        <end>48</end>
      </range>
    </lineRanges>
    <primaryLineNumber>47</primaryLineNumber>
    <fileName>nih/nci/security/util/StringEncrypter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;csm_role_privilege rp,&quot; appears 4 times in this file; the first occurrence is on line 197.</message>
    <priority>NORMAL</priority>
    <key>13900</key>
    <lineRanges>
      <range>
        <start>197</start>
        <end>197</end>
      </range>
    </lineRanges>
    <primaryLineNumber>197</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13572</key>
    <lineRanges>
      <range>
        <start>156</start>
        <end>156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>156</primaryLineNumber>
    <fileName>nih/nci/security/authorization/instancelevel/InstanceLevelSecurityHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.instancelevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14043</key>
    <lineRanges>
      <range>
        <start>33</start>
        <end>33</end>
      </range>
    </lineRanges>
    <primaryLineNumber>33</primaryLineNumber>
    <fileName>nih/nci/security/ws/handler/authorization/AuthorizationWebServiceRequestHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.handler.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13388</key>
    <lineRanges>
      <range>
        <start>533</start>
        <end>534</end>
      </range>
    </lineRanges>
    <primaryLineNumber>533</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13643</key>
    <lineRanges>
      <range>
        <start>963</start>
        <end>970</end>
      </range>
    </lineRanges>
    <primaryLineNumber>963</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13534</key>
    <lineRanges>
      <range>
        <start>51</start>
        <end>52</end>
      </range>
    </lineRanges>
    <primaryLineNumber>51</primaryLineNumber>
    <fileName>nih/nci/security/authentication/principal/BasePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13761</key>
    <lineRanges>
      <range>
        <start>3082</start>
        <end>3085</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3082</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13485</key>
    <lineRanges>
      <range>
        <start>304</start>
        <end>304</end>
      </range>
    </lineRanges>
    <primaryLineNumber>304</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13742</key>
    <lineRanges>
      <range>
        <start>2691</start>
        <end>2699</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2691</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13380</key>
    <lineRanges>
      <range>
        <start>551</start>
        <end>552</end>
      </range>
    </lineRanges>
    <primaryLineNumber>551</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and ugrpg.protection_group_id = ANY (select pg1.protection_group_id from csm_protection_group pg1 where pg1.protection_group_id = pg.protection_group_id or pg1.protection_group_id = (select pg2.parent_protection_group_id from csm_protection_group pg2 where pg2.protection_group_id = pg.protection_group_id))&quot; appears 5 times in this file; the first occurrence is on line 202.</message>
    <priority>NORMAL</priority>
    <key>13904</key>
    <lineRanges>
      <range>
        <start>202</start>
        <end>202</end>
      </range>
    </lineRanges>
    <primaryLineNumber>202</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_path&apos;..</message>
    <priority>NORMAL</priority>
    <key>13576</key>
    <lineRanges>
      <range>
        <start>115</start>
        <end>115</end>
      </range>
    </lineRanges>
    <primaryLineNumber>115</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13789</key>
    <lineRanges>
      <range>
        <start>3526</start>
        <end>3527</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3526</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13647</key>
    <lineRanges>
      <range>
        <start>1081</start>
        <end>1083</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1081</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13325</key>
    <lineRanges>
      <range>
        <start>140</start>
        <end>144</end>
      </range>
    </lineRanges>
    <primaryLineNumber>140</primaryLineNumber>
    <fileName>nih/nci/security/upt/exceptionHandler/DefaultExceptionHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.exceptionHandler</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13276</key>
    <lineRanges>
      <range>
        <start>632</start>
        <end>635</end>
      </range>
    </lineRanges>
    <primaryLineNumber>632</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13156</key>
    <lineRanges>
      <range>
        <start>184</start>
        <end>184</end>
      </range>
    </lineRanges>
    <primaryLineNumber>184</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;getAllowedLogonAttempts()&apos;..</message>
    <priority>NORMAL</priority>
    <key>13400</key>
    <lineRanges>
      <range>
        <start>37</start>
        <end>37</end>
      </range>
    </lineRanges>
    <primaryLineNumber>37</primaryLineNumber>
    <fileName>nih/nci/security/upt/logoninfo/LogonInfoManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.logoninfo</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13837</key>
    <lineRanges>
      <range>
        <start>4204</start>
        <end>4205</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4204</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13247</key>
    <lineRanges>
      <range>
        <start>271</start>
        <end>272</end>
      </range>
    </lineRanges>
    <primaryLineNumber>271</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13481</key>
    <lineRanges>
      <range>
        <start>256</start>
        <end>257</end>
      </range>
    </lineRanges>
    <primaryLineNumber>256</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; to User &quot; appears 4 times in this file; the first occurrence is on line 481.</message>
    <priority>NORMAL</priority>
    <key>13617</key>
    <lineRanges>
      <range>
        <start>481</start>
        <end>481</end>
      </range>
    </lineRanges>
    <primaryLineNumber>481</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13666</key>
    <lineRanges>
      <range>
        <start>1290</start>
        <end>1291</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1290</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13980</key>
    <lineRanges>
      <range>
        <start>233</start>
        <end>233</end>
      </range>
    </lineRanges>
    <primaryLineNumber>233</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13467</key>
    <lineRanges>
      <range>
        <start>85</start>
        <end>85</end>
      </range>
    </lineRanges>
    <primaryLineNumber>85</primaryLineNumber>
    <fileName>nih/nci/security/authentication/LockoutManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13495</key>
    <lineRanges>
      <range>
        <start>239</start>
        <end>239</end>
      </range>
    </lineRanges>
    <primaryLineNumber>239</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 2 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13892</key>
    <lineRanges>
      <range>
        <start>152</start>
        <end>152</end>
      </range>
    </lineRanges>
    <primaryLineNumber>152</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>UselessOverridingMethod</type>
    <tooltip>
The overriding method merely calls the same method defined in a superclass
        &lt;pre&gt;
public void foo(String bar) {
    super.foo(bar);      //Why bother overriding?
}
        &lt;/pre&gt;</tooltip>
    <message>Overriding method merely calls super.</message>
    <priority>NORMAL</priority>
    <key>13580</key>
    <lineRanges>
      <range>
        <start>129</start>
        <end>131</end>
      </range>
    </lineRanges>
    <primaryLineNumber>129</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AuthPermissionCollection.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13596</key>
    <lineRanges>
      <range>
        <start>203</start>
        <end>207</end>
      </range>
    </lineRanges>
    <primaryLineNumber>203</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13289</key>
    <lineRanges>
      <range>
        <start>231</start>
        <end>233</end>
      </range>
    </lineRanges>
    <primaryLineNumber>231</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13333</key>
    <lineRanges>
      <range>
        <start>487</start>
        <end>487</end>
      </range>
    </lineRanges>
    <primaryLineNumber>487</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14026</key>
    <lineRanges>
      <range>
        <start>163</start>
        <end>163</end>
      </range>
    </lineRanges>
    <primaryLineNumber>163</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authentication||&quot; appears 8 times in this file; the first occurrence is on line 214.</message>
    <priority>NORMAL</priority>
    <key>13477</key>
    <lineRanges>
      <range>
        <start>214</start>
        <end>214</end>
      </range>
    </lineRanges>
    <primaryLineNumber>214</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13491</key>
    <lineRanges>
      <range>
        <start>333</start>
        <end>334</end>
      </range>
    </lineRanges>
    <primaryLineNumber>333</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13310</key>
    <lineRanges>
      <range>
        <start>159</start>
        <end>159</end>
      </range>
    </lineRanges>
    <primaryLineNumber>159</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13857</key>
    <lineRanges>
      <range>
        <start>4659</start>
        <end>4661</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4659</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13734</key>
    <lineRanges>
      <range>
        <start>2527</start>
        <end>2530</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2527</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 20 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13913</key>
    <lineRanges>
      <range>
        <start>294</start>
        <end>294</end>
      </range>
    </lineRanges>
    <primaryLineNumber>294</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13714</key>
    <lineRanges>
      <range>
        <start>2151</start>
        <end>2156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2151</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused method parameters such as &apos;userOrGroupName&apos;..</message>
    <priority>NORMAL</priority>
    <key>13607</key>
    <lineRanges>
      <range>
        <start>320</start>
        <end>337</end>
      </range>
    </lineRanges>
    <primaryLineNumber>320</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_user u,&quot; appears 4 times in this file; the first occurrence is on line 408.</message>
    <priority>NORMAL</priority>
    <key>13924</key>
    <lineRanges>
      <range>
        <start>408</start>
        <end>408</end>
      </range>
    </lineRanges>
    <primaryLineNumber>408</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13408</key>
    <lineRanges>
      <range>
        <start>148</start>
        <end>149</end>
      </range>
    </lineRanges>
    <primaryLineNumber>148</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13183</key>
    <lineRanges>
      <range>
        <start>450</start>
        <end>453</end>
      </range>
    </lineRanges>
    <primaryLineNumber>450</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13821</key>
    <lineRanges>
      <range>
        <start>3931</start>
        <end>3934</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3931</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13747</key>
    <lineRanges>
      <range>
        <start>2752</start>
        <end>2755</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2752</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13234</key>
    <lineRanges>
      <range>
        <start>169</start>
        <end>169</end>
      </range>
    </lineRanges>
    <primaryLineNumber>169</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13341</key>
    <lineRanges>
      <range>
        <start>422</start>
        <end>423</end>
      </range>
    </lineRanges>
    <primaryLineNumber>422</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/InstanceLevelForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13351</key>
    <lineRanges>
      <range>
        <start>472</start>
        <end>473</end>
      </range>
    </lineRanges>
    <primaryLineNumber>472</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;test&apos;..</message>
    <priority>NORMAL</priority>
    <key>13854</key>
    <lineRanges>
      <range>
        <start>4575</start>
        <end>4575</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4575</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13846</key>
    <lineRanges>
      <range>
        <start>4487</start>
        <end>4490</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4487</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13861</key>
    <lineRanges>
      <range>
        <start>4787</start>
        <end>4794</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4787</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused method parameters such as &apos;principals&apos;..</message>
    <priority>NORMAL</priority>
    <key>13592</key>
    <lineRanges>
      <range>
        <start>201</start>
        <end>203</end>
      </range>
    </lineRanges>
    <primaryLineNumber>201</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InefficientEmptyStringCheck</type>
    <tooltip>
String.trim().length() is an inefficient way to check if a String is really empty, as it
creates a new String object just to check its size. Consider creating a static function that
loops through a string, checking Character.isWhitespace() on each character and returning
false if a non-whitespace character is found.
    &lt;pre&gt;

public class Foo {
    void bar(String string) {
        if (string != null &amp;&amp; string.trim().size() &gt; 0) {
		    doSomething();
        }
    }
}

    &lt;/pre&gt;</tooltip>
    <message>String.trim().length()==0 is an inefficient way to validate an empty String..</message>
    <priority>NORMAL</priority>
    <key>13459</key>
    <lineRanges>
      <range>
        <start>222</start>
        <end>222</end>
      </range>
    </lineRanges>
    <primaryLineNumber>222</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authentication||&quot; appears 4 times in this file; the first occurrence is on line 271.</message>
    <priority>NORMAL</priority>
    <key>13503</key>
    <lineRanges>
      <range>
        <start>271</start>
        <end>271</end>
      </range>
    </lineRanges>
    <primaryLineNumber>271</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://security.nci.nih.gov/ws/authorization&quot; appears 6 times in this file; the first occurrence is on line 45.</message>
    <priority>NORMAL</priority>
    <key>14010</key>
    <lineRanges>
      <range>
        <start>45</start>
        <end>45</end>
      </range>
    </lineRanges>
    <primaryLineNumber>45</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13726</key>
    <lineRanges>
      <range>
        <start>2379</start>
        <end>2384</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2379</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13544</key>
    <lineRanges>
      <range>
        <start>287</start>
        <end>288</end>
      </range>
    </lineRanges>
    <primaryLineNumber>287</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13201</key>
    <lineRanges>
      <range>
        <start>190</start>
        <end>193</end>
      </range>
    </lineRanges>
    <primaryLineNumber>190</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13404</key>
    <lineRanges>
      <range>
        <start>220</start>
        <end>247</end>
      </range>
    </lineRanges>
    <primaryLineNumber>220</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/ClassLoaderUtil.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13179</key>
    <lineRanges>
      <range>
        <start>398</start>
        <end>401</end>
      </range>
    </lineRanges>
    <primaryLineNumber>398</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;doc&apos;..</message>
    <priority>NORMAL</priority>
    <key>13970</key>
    <lineRanges>
      <range>
        <start>106</start>
        <end>106</end>
      </range>
    </lineRanges>
    <primaryLineNumber>106</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13797</key>
    <lineRanges>
      <range>
        <start>3635</start>
        <end>3636</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3635</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>ForLoopsMustUseBraces</type>
    <tooltip>
Avoid using &apos;for&apos; statements without using curly braces.
       &lt;pre&gt;

public void foo() {
 for (int i=0; i&lt;42;i++)
   foo();
}

       &lt;/pre&gt;</tooltip>
    <message>Avoid using for statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13967</key>
    <lineRanges>
      <range>
        <start>155</start>
        <end>156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>155</primaryLineNumber>
    <fileName>nih/nci/security/junk/RandomIntGenerator.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.junk</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13455</key>
    <lineRanges>
      <range>
        <start>207</start>
        <end>208</end>
      </range>
    </lineRanges>
    <primaryLineNumber>207</primaryLineNumber>
    <fileName>nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13612</key>
    <lineRanges>
      <range>
        <start>418</start>
        <end>419</end>
      </range>
    </lineRanges>
    <primaryLineNumber>418</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13850</key>
    <lineRanges>
      <range>
        <start>4534</start>
        <end>4541</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4534</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;getUPTContextName()&apos;..</message>
    <priority>NORMAL</priority>
    <key>13301</key>
    <lineRanges>
      <range>
        <start>162</start>
        <end>162</end>
      </range>
    </lineRanges>
    <primaryLineNumber>162</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LogoutAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13814</key>
    <lineRanges>
      <range>
        <start>3817</start>
        <end>3820</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3817</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13226</key>
    <lineRanges>
      <range>
        <start>430</start>
        <end>433</end>
      </range>
    </lineRanges>
    <primaryLineNumber>430</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13558</key>
    <lineRanges>
      <range>
        <start>84</start>
        <end>85</end>
      </range>
    </lineRanges>
    <primaryLineNumber>84</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13722</key>
    <lineRanges>
      <range>
        <start>2328</start>
        <end>2331</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2328</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and pg.application_id=?&quot; appears 8 times in this file; the first occurrence is on line 113.</message>
    <priority>NORMAL</priority>
    <key>13881</key>
    <lineRanges>
      <range>
        <start>113</start>
        <end>113</end>
      </range>
    </lineRanges>
    <primaryLineNumber>113</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13991</key>
    <lineRanges>
      <range>
        <start>124</start>
        <end>125</end>
      </range>
    </lineRanges>
    <primaryLineNumber>124</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://www.w3.org/2001/XMLSchema&quot; appears 6 times in this file; the first occurrence is on line 233.</message>
    <priority>NORMAL</priority>
    <key>14030</key>
    <lineRanges>
      <range>
        <start>233</start>
        <end>233</end>
      </range>
    </lineRanges>
    <primaryLineNumber>233</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;.\n&quot; appears 4 times in this file; the first occurrence is on line 3,677.</message>
    <priority>NORMAL</priority>
    <key>13801</key>
    <lineRanges>
      <range>
        <start>3677</start>
        <end>3677</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3677</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;sharedState&apos;..</message>
    <priority>NORMAL</priority>
    <key>13514</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13730</key>
    <lineRanges>
      <range>
        <start>2472</start>
        <end>2478</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2472</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13368</key>
    <lineRanges>
      <range>
        <start>407</start>
        <end>408</end>
      </range>
    </lineRanges>
    <primaryLineNumber>407</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13603</key>
    <lineRanges>
      <range>
        <start>305</start>
        <end>305</end>
      </range>
    </lineRanges>
    <primaryLineNumber>305</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13554</key>
    <lineRanges>
      <range>
        <start>36</start>
        <end>37</end>
      </range>
    </lineRanges>
    <primaryLineNumber>36</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/AttributeSecuritySessionInterceptor.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13213</key>
    <lineRanges>
      <range>
        <start>300</start>
        <end>303</end>
      </range>
    </lineRanges>
    <primaryLineNumber>300</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13805</key>
    <lineRanges>
      <range>
        <start>3703</start>
        <end>3708</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3703</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13297</key>
    <lineRanges>
      <range>
        <start>337</start>
        <end>339</end>
      </range>
    </lineRanges>
    <primaryLineNumber>337</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13222</key>
    <lineRanges>
      <range>
        <start>388</start>
        <end>391</end>
      </range>
    </lineRanges>
    <primaryLineNumber>388</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13347</key>
    <lineRanges>
      <range>
        <start>430</start>
        <end>431</end>
      </range>
    </lineRanges>
    <primaryLineNumber>430</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13810</key>
    <lineRanges>
      <range>
        <start>3783</start>
        <end>3784</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3783</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 19 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13917</key>
    <lineRanges>
      <range>
        <start>369</start>
        <end>369</end>
      </range>
    </lineRanges>
    <primaryLineNumber>369</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13337</key>
    <lineRanges>
      <range>
        <start>563</start>
        <end>564</end>
      </range>
    </lineRanges>
    <primaryLineNumber>563</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13987</key>
    <lineRanges>
      <range>
        <start>68</start>
        <end>69</end>
      </range>
    </lineRanges>
    <primaryLineNumber>68</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13696</key>
    <lineRanges>
      <range>
        <start>1879</start>
        <end>1882</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1879</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13209</key>
    <lineRanges>
      <range>
        <start>262</start>
        <end>262</end>
      </range>
    </lineRanges>
    <primaryLineNumber>262</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13675</key>
    <lineRanges>
      <range>
        <start>1372</start>
        <end>1379</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1372</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;simplesf&apos;..</message>
    <priority>NORMAL</priority>
    <key>14014</key>
    <lineRanges>
      <range>
        <start>87</start>
        <end>87</end>
      </range>
    </lineRanges>
    <primaryLineNumber>87</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13364</key>
    <lineRanges>
      <range>
        <start>356</start>
        <end>356</end>
      </range>
    </lineRanges>
    <primaryLineNumber>356</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 20 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13959</key>
    <lineRanges>
      <range>
        <start>635</start>
        <end>635</end>
      </range>
    </lineRanges>
    <primaryLineNumber>635</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_instance&apos;..</message>
    <priority>NORMAL</priority>
    <key>13585</key>
    <lineRanges>
      <range>
        <start>121</start>
        <end>121</end>
      </range>
    </lineRanges>
    <primaryLineNumber>121</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionAdapterFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13446</key>
    <lineRanges>
      <range>
        <start>112</start>
        <end>113</end>
      </range>
    </lineRanges>
    <primaryLineNumber>112</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13168</key>
    <lineRanges>
      <range>
        <start>292</start>
        <end>293</end>
      </range>
    </lineRanges>
    <primaryLineNumber>292</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;&lt;BR&gt;&quot; appears 7 times in this file; the first occurrence is on line 89.</message>
    <priority>NORMAL</priority>
    <key>13427</key>
    <lineRanges>
      <range>
        <start>89</start>
        <end>89</end>
      </range>
    </lineRanges>
    <primaryLineNumber>89</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/JDBCHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 127 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13876</key>
    <lineRanges>
      <range>
        <start>108</start>
        <end>108</end>
      </range>
    </lineRanges>
    <primaryLineNumber>108</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13264</key>
    <lineRanges>
      <range>
        <start>500</start>
        <end>503</end>
      </range>
    </lineRanges>
    <primaryLineNumber>500</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13750</key>
    <lineRanges>
      <range>
        <start>2815</start>
        <end>2822</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2815</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13639</key>
    <lineRanges>
      <range>
        <start>842</start>
        <end>849</end>
      </range>
    </lineRanges>
    <primaryLineNumber>842</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13830</key>
    <lineRanges>
      <range>
        <start>4105</start>
        <end>4112</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4105</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13317</key>
    <lineRanges>
      <range>
        <start>139</start>
        <end>139</end>
      </range>
    </lineRanges>
    <primaryLineNumber>139</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13142</key>
    <lineRanges>
      <range>
        <start>148</start>
        <end>151</end>
      </range>
    </lineRanges>
    <primaryLineNumber>148</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13817</key>
    <lineRanges>
      <range>
        <start>3879</start>
        <end>3882</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3879</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13432</key>
    <lineRanges>
      <range>
        <start>257</start>
        <end>257</end>
      </range>
    </lineRanges>
    <primaryLineNumber>257</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;firstTime&apos;..</message>
    <priority>NORMAL</priority>
    <key>13793</key>
    <lineRanges>
      <range>
        <start>3568</start>
        <end>3568</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3568</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13509</key>
    <lineRanges>
      <range>
        <start>342</start>
        <end>343</end>
      </range>
    </lineRanges>
    <primaryLineNumber>342</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13729</key>
    <lineRanges>
      <range>
        <start>2467</start>
        <end>2470</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2467</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://security.nci.nih.gov/ws/authentication&quot; appears 4 times in this file; the first occurrence is on line 139.</message>
    <priority>NORMAL</priority>
    <key>14022</key>
    <lineRanges>
      <range>
        <start>139</start>
        <end>139</end>
      </range>
    </lineRanges>
    <primaryLineNumber>139</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13369</key>
    <lineRanges>
      <range>
        <start>409</start>
        <end>410</end>
      </range>
    </lineRanges>
    <primaryLineNumber>409</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;      FROM  csm_protection_element pe,&quot; appears 5 times in this file; the first occurrence is on line 536.</message>
    <priority>NORMAL</priority>
    <key>13944</key>
    <lineRanges>
      <range>
        <start>536</start>
        <end>536</end>
      </range>
    </lineRanges>
    <primaryLineNumber>536</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13164</key>
    <lineRanges>
      <range>
        <start>250</start>
        <end>250</end>
      </range>
    </lineRanges>
    <primaryLineNumber>250</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 16 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13939</key>
    <lineRanges>
      <range>
        <start>484</start>
        <end>484</end>
      </range>
    </lineRanges>
    <primaryLineNumber>484</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13562</key>
    <lineRanges>
      <range>
        <start>125</start>
        <end>125</end>
      </range>
    </lineRanges>
    <primaryLineNumber>125</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13305</key>
    <lineRanges>
      <range>
        <start>149</start>
        <end>149</end>
      </range>
    </lineRanges>
    <primaryLineNumber>149</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13360</key>
    <lineRanges>
      <range>
        <start>277</start>
        <end>277</end>
      </range>
    </lineRanges>
    <primaryLineNumber>277</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13219</key>
    <lineRanges>
      <range>
        <start>361</start>
        <end>361</end>
      </range>
    </lineRanges>
    <primaryLineNumber>361</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13442</key>
    <lineRanges>
      <range>
        <start>87</start>
        <end>88</end>
      </range>
    </lineRanges>
    <primaryLineNumber>87</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authentication/CSMUserDetailsService.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13616</key>
    <lineRanges>
      <range>
        <start>477</start>
        <end>481</end>
      </range>
    </lineRanges>
    <primaryLineNumber>477</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            AND pgpe.protection_element_id = pe.protection_element_id&quot; appears 5 times in this file; the first occurrence is on line 552.</message>
    <priority>NORMAL</priority>
    <key>13955</key>
    <lineRanges>
      <range>
        <start>552</start>
        <end>552</end>
      </range>
    </lineRanges>
    <primaryLineNumber>552</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13505</key>
    <lineRanges>
      <range>
        <start>329</start>
        <end>330</end>
      </range>
    </lineRanges>
    <primaryLineNumber>329</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;SecurityServiceSoapPort&quot; appears 4 times in this file; the first occurrence is on line 32.</message>
    <priority>NORMAL</priority>
    <key>14018</key>
    <lineRanges>
      <range>
        <start>32</start>
        <end>32</end>
      </range>
    </lineRanges>
    <primaryLineNumber>32</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityService_ServiceLocator.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13691</key>
    <lineRanges>
      <range>
        <start>1782</start>
        <end>1788</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1782</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13499</key>
    <lineRanges>
      <range>
        <start>261</start>
        <end>262</end>
      </range>
    </lineRanges>
    <primaryLineNumber>261</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13436</key>
    <lineRanges>
      <range>
        <start>376</start>
        <end>377</end>
      </range>
    </lineRanges>
    <primaryLineNumber>376</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13282</key>
    <lineRanges>
      <range>
        <start>696</start>
        <end>699</end>
      </range>
    </lineRanges>
    <primaryLineNumber>696</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13423</key>
    <lineRanges>
      <range>
        <start>394</start>
        <end>394</end>
      </range>
    </lineRanges>
    <primaryLineNumber>394</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13865</key>
    <lineRanges>
      <range>
        <start>4876</start>
        <end>4884</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4876</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13679</key>
    <lineRanges>
      <range>
        <start>1458</start>
        <end>1461</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1458</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and Protection Group&quot; appears 8 times in this file; the first occurrence is on line 657.</message>
    <priority>NORMAL</priority>
    <key>13628</key>
    <lineRanges>
      <range>
        <start>657</start>
        <end>657</end>
      </range>
    </lineRanges>
    <primaryLineNumber>657</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14038</key>
    <lineRanges>
      <range>
        <start>69</start>
        <end>69</end>
      </range>
    </lineRanges>
    <primaryLineNumber>69</primaryLineNumber>
    <fileName>nih/nci/security/ws/common/ErrorDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.common</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13373</key>
    <lineRanges>
      <range>
        <start>478</start>
        <end>479</end>
      </range>
    </lineRanges>
    <primaryLineNumber>478</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13193</key>
    <lineRanges>
      <range>
        <start>566</start>
        <end>569</end>
      </range>
    </lineRanges>
    <primaryLineNumber>566</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization||&quot; appears 15 times in this file; the first occurrence is on line 1,186.</message>
    <priority>NORMAL</priority>
    <key>13656</key>
    <lineRanges>
      <range>
        <start>1186</start>
        <end>1186</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1186</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13706</key>
    <lineRanges>
      <range>
        <start>2041</start>
        <end>2044</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2041</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            csm_role r,&quot; appears 5 times in this file; the first occurrence is on line 543.</message>
    <priority>NORMAL</priority>
    <key>13948</key>
    <lineRanges>
      <range>
        <start>543</start>
        <end>543</end>
      </range>
    </lineRanges>
    <primaryLineNumber>543</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13450</key>
    <lineRanges>
      <range>
        <start>89</start>
        <end>89</end>
      </range>
    </lineRanges>
    <primaryLineNumber>89</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMRoleVoter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13963</key>
    <lineRanges>
      <range>
        <start>201</start>
        <end>201</end>
      </range>
    </lineRanges>
    <primaryLineNumber>201</primaryLineNumber>
    <fileName>nih/nci/security/dao/hibernate/ProtectionGroupProtectionElement.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao.hibernate</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13635</key>
    <lineRanges>
      <range>
        <start>750</start>
        <end>754</end>
      </range>
    </lineRanges>
    <primaryLineNumber>750</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13746</key>
    <lineRanges>
      <range>
        <start>2741</start>
        <end>2744</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2741</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 5 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13936</key>
    <lineRanges>
      <range>
        <start>450</start>
        <end>450</end>
      </range>
    </lineRanges>
    <primaryLineNumber>450</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13352</key>
    <lineRanges>
      <range>
        <start>306</start>
        <end>306</end>
      </range>
    </lineRanges>
    <primaryLineNumber>306</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13286</key>
    <lineRanges>
      <range>
        <start>195</start>
        <end>197</end>
      </range>
    </lineRanges>
    <primaryLineNumber>195</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 2 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13885</key>
    <lineRanges>
      <range>
        <start>150</start>
        <end>150</end>
      </range>
    </lineRanges>
    <primaryLineNumber>150</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13280</key>
    <lineRanges>
      <range>
        <start>678</start>
        <end>681</end>
      </range>
    </lineRanges>
    <primaryLineNumber>678</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13238</key>
    <lineRanges>
      <range>
        <start>205</start>
        <end>206</end>
      </range>
    </lineRanges>
    <primaryLineNumber>205</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13834</key>
    <lineRanges>
      <range>
        <start>4164</start>
        <end>4167</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4164</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13321</key>
    <lineRanges>
      <range>
        <start>187</start>
        <end>188</end>
      </range>
    </lineRanges>
    <primaryLineNumber>187</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13150</key>
    <lineRanges>
      <range>
        <start>137</start>
        <end>138</end>
      </range>
    </lineRanges>
    <primaryLineNumber>137</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused constructor parameters such as &apos;member&apos;..</message>
    <priority>NORMAL</priority>
    <key>13566</key>
    <lineRanges>
      <range>
        <start>124</start>
        <end>126</end>
      </range>
    </lineRanges>
    <primaryLineNumber>124</primaryLineNumber>
    <fileName>nih/nci/security/authorization/domainobjects/GroupRoleContext.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13983</key>
    <lineRanges>
      <range>
        <start>243</start>
        <end>244</end>
      </range>
    </lineRanges>
    <primaryLineNumber>243</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13769</key>
    <lineRanges>
      <range>
        <start>3201</start>
        <end>3204</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3201</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13268</key>
    <lineRanges>
      <range>
        <start>538</start>
        <end>541</end>
      </range>
    </lineRanges>
    <primaryLineNumber>538</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13471</key>
    <lineRanges>
      <range>
        <start>154</start>
        <end>155</end>
      </range>
    </lineRanges>
    <primaryLineNumber>154</primaryLineNumber>
    <fileName>nih/nci/security/authentication/callback/CSMCallbackHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.callback</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13415</key>
    <lineRanges>
      <range>
        <start>314</start>
        <end>314</end>
      </range>
    </lineRanges>
    <primaryLineNumber>314</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13205</key>
    <lineRanges>
      <range>
        <start>230</start>
        <end>230</end>
      </range>
    </lineRanges>
    <primaryLineNumber>230</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13597</key>
    <lineRanges>
      <range>
        <start>212</start>
        <end>216</end>
      </range>
    </lineRanges>
    <primaryLineNumber>212</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13671</key>
    <lineRanges>
      <range>
        <start>1323</start>
        <end>1323</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1323</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InefficientEmptyStringCheck</type>
    <tooltip>
String.trim().length() is an inefficient way to check if a String is really empty, as it
creates a new String object just to check its size. Consider creating a static function that
loops through a string, checking Character.isWhitespace() on each character and returning
false if a non-whitespace character is found.
    &lt;pre&gt;

public class Foo {
    void bar(String string) {
        if (string != null &amp;&amp; string.trim().size() &gt; 0) {
		    doSomething();
        }
    }
}

    &lt;/pre&gt;</tooltip>
    <message>String.trim().length()==0 is an inefficient way to validate an empty String..</message>
    <priority>NORMAL</priority>
    <key>14002</key>
    <lineRanges>
      <range>
        <start>56</start>
        <end>56</end>
      </range>
    </lineRanges>
    <primaryLineNumber>56</primaryLineNumber>
    <fileName>nih/nci/security/util/StringEncrypter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13664</key>
    <lineRanges>
      <range>
        <start>1257</start>
        <end>1258</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1257</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13975</key>
    <lineRanges>
      <range>
        <start>172</start>
        <end>173</end>
      </range>
    </lineRanges>
    <primaryLineNumber>172</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13242</key>
    <lineRanges>
      <range>
        <start>239</start>
        <end>239</end>
      </range>
    </lineRanges>
    <primaryLineNumber>239</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13146</key>
    <lineRanges>
      <range>
        <start>184</start>
        <end>187</end>
      </range>
    </lineRanges>
    <primaryLineNumber>184</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 839 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13912</key>
    <lineRanges>
      <range>
        <start>293</start>
        <end>293</end>
      </range>
    </lineRanges>
    <primaryLineNumber>293</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; where ugrpg.role_id = r.role_id and&quot; appears 4 times in this file; the first occurrence is on line 412.</message>
    <priority>NORMAL</priority>
    <key>13928</key>
    <lineRanges>
      <range>
        <start>412</start>
        <end>412</end>
      </range>
    </lineRanges>
    <primaryLineNumber>412</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyStatementNotInLoop</type>
    <tooltip>
An empty statement (aka a semicolon by itself) that is not used
as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be
removed.
       &lt;pre&gt;

public class MyClass {
   public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println(&quot;look at the extra semicolon&quot;);;
   }
}

       &lt;/pre&gt;</tooltip>
    <message>An empty statement (semicolon) not part of a loop.</message>
    <priority>NORMAL</priority>
    <key>13782</key>
    <lineRanges>
      <range>
        <start>3363</start>
        <end>3363</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3363</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13790</key>
    <lineRanges>
      <range>
        <start>3533</start>
        <end>3534</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3533</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authentication|&quot; appears 4 times in this file; the first occurrence is on line 248.</message>
    <priority>NORMAL</priority>
    <key>13463</key>
    <lineRanges>
      <range>
        <start>248</start>
        <end>248</end>
      </range>
    </lineRanges>
    <primaryLineNumber>248</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13260</key>
    <lineRanges>
      <range>
        <start>448</start>
        <end>451</end>
      </range>
    </lineRanges>
    <primaryLineNumber>448</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13526</key>
    <lineRanges>
      <range>
        <start>255</start>
        <end>260</end>
      </range>
    </lineRanges>
    <primaryLineNumber>255</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyIfStmt</type>
    <tooltip>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    &lt;pre&gt;
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       &lt;/pre&gt;</tooltip>
    <message>Avoid empty if statements.</message>
    <priority>NORMAL</priority>
    <key>13719</key>
    <lineRanges>
      <range>
        <start>2295</start>
        <end>2297</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2295</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14034</key>
    <lineRanges>
      <range>
        <start>46</start>
        <end>46</end>
      </range>
    </lineRanges>
    <primaryLineNumber>46</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionResponse.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13754</key>
    <lineRanges>
      <range>
        <start>2909</start>
        <end>2912</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2909</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13826</key>
    <lineRanges>
      <range>
        <start>4027</start>
        <end>4033</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4027</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13313</key>
    <lineRanges>
      <range>
        <start>165</start>
        <end>165</end>
      </range>
    </lineRanges>
    <primaryLineNumber>165</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13660</key>
    <lineRanges>
      <range>
        <start>1200</start>
        <end>1201</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1200</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13652</key>
    <lineRanges>
      <range>
        <start>1165</start>
        <end>1166</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1165</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13396</key>
    <lineRanges>
      <range>
        <start>598</start>
        <end>598</end>
      </range>
    </lineRanges>
    <primaryLineNumber>598</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13160</key>
    <lineRanges>
      <range>
        <start>210</start>
        <end>210</end>
      </range>
    </lineRanges>
    <primaryLineNumber>210</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13246</key>
    <lineRanges>
      <range>
        <start>265</start>
        <end>265</end>
      </range>
    </lineRanges>
    <primaryLineNumber>265</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;isTitleTo(String,Principal)&apos;..</message>
    <priority>NORMAL</priority>
    <key>13593</key>
    <lineRanges>
      <range>
        <start>201</start>
        <end>201</end>
      </range>
    </lineRanges>
    <primaryLineNumber>201</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyFinallyBlock</type>
    <tooltip>
Avoid empty finally blocks - these can be deleted.
      &lt;pre&gt;
  
public class Foo {
 public void bar() {
  try {
    int x=2;
   } finally {
    // empty!
   }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty finally blocks.</message>
    <priority>NORMAL</priority>
    <key>13995</key>
    <lineRanges>
      <range>
        <start>160</start>
        <end>162</end>
      </range>
    </lineRanges>
    <primaryLineNumber>160</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            AND ugrpg.role_id = rp.role_id&quot; appears 5 times in this file; the first occurrence is on line 547.</message>
    <priority>NORMAL</priority>
    <key>13952</key>
    <lineRanges>
      <range>
        <start>547</start>
        <end>547</end>
      </range>
    </lineRanges>
    <primaryLineNumber>547</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13197</key>
    <lineRanges>
      <range>
        <start>153</start>
        <end>156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>153</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 19 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13908</key>
    <lineRanges>
      <range>
        <start>226</start>
        <end>226</end>
      </range>
    </lineRanges>
    <primaryLineNumber>226</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;i&apos;..</message>
    <priority>NORMAL</priority>
    <key>13710</key>
    <lineRanges>
      <range>
        <start>2115</start>
        <end>2115</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2115</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; rp.privilege_id = p.privilege_id &quot; appears 4 times in this file; the first occurrence is on line 418.</message>
    <priority>NORMAL</priority>
    <key>13932</key>
    <lineRanges>
      <range>
        <start>418</start>
        <end>418</end>
      </range>
    </lineRanges>
    <primaryLineNumber>418</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;crl&apos;..</message>
    <priority>NORMAL</priority>
    <key>13522</key>
    <lineRanges>
      <range>
        <start>174</start>
        <end>174</end>
      </range>
    </lineRanges>
    <primaryLineNumber>174</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>WhileLoopsMustUseBraces</type>
    <tooltip>
Avoid using &apos;while&apos; statements without using curly braces.
      &lt;pre&gt;

public void doSomething() {
  while (true)
      x++;
}

      &lt;/pre&gt;</tooltip>
    <message>Avoid using while statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13758</key>
    <lineRanges>
      <range>
        <start>2973</start>
        <end>2973</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2973</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13778</key>
    <lineRanges>
      <range>
        <start>3329</start>
        <end>3332</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3329</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13356</key>
    <lineRanges>
      <range>
        <start>370</start>
        <end>371</end>
      </range>
    </lineRanges>
    <primaryLineNumber>370</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13545</key>
    <lineRanges>
      <range>
        <start>309</start>
        <end>310</end>
      </range>
    </lineRanges>
    <primaryLineNumber>309</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyStatementNotInLoop</type>
    <tooltip>
An empty statement (aka a semicolon by itself) that is not used
as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be
removed.
       &lt;pre&gt;

public class MyClass {
   public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println(&quot;look at the extra semicolon&quot;);;
   }
}

       &lt;/pre&gt;</tooltip>
    <message>An empty statement (semicolon) not part of a loop.</message>
    <priority>NORMAL</priority>
    <key>13773</key>
    <lineRanges>
      <range>
        <start>3252</start>
        <end>3252</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3252</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13419</key>
    <lineRanges>
      <range>
        <start>387</start>
        <end>387</end>
      </range>
    </lineRanges>
    <primaryLineNumber>387</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13979</key>
    <lineRanges>
      <range>
        <start>231</start>
        <end>231</end>
      </range>
    </lineRanges>
    <primaryLineNumber>231</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Bad credentials&quot; appears 5 times in this file; the first occurrence is on line 55.</message>
    <priority>NORMAL</priority>
    <key>13440</key>
    <lineRanges>
      <range>
        <start>55</start>
        <end>55</end>
      </range>
    </lineRanges>
    <primaryLineNumber>55</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13869</key>
    <lineRanges>
      <range>
        <start>4941</start>
        <end>4943</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4941</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13697</key>
    <lineRanges>
      <range>
        <start>1885</start>
        <end>1888</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1885</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13986</key>
    <lineRanges>
      <range>
        <start>65</start>
        <end>66</end>
      </range>
    </lineRanges>
    <primaryLineNumber>65</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InefficientStringBuffering</type>
    <tooltip>
Avoid concatenating non literals in a StringBuffer constructor or append().
    &lt;pre&gt;

public class Foo {
 void bar() {
  // Avoid this
  StringBuffer sb=new StringBuffer(&quot;tmp = &quot;+System.getProperty(&quot;java.io.tmpdir&quot;));
  // use instead something like this
  StringBuffer sb = new StringBuffer(&quot;tmp = &quot;);
  sb.append(System.getProperty(&quot;java.io.tmpdir&quot;));
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid concatenating nonliterals in a StringBuffer constructor or append()..</message>
    <priority>NORMAL</priority>
    <key>13549</key>
    <lineRanges>
      <range>
        <start>133</start>
        <end>133</end>
      </range>
    </lineRanges>
    <primaryLineNumber>133</primaryLineNumber>
    <fileName>nih/nci/security/authorization/ObjectAccessMap.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>UseIndexOfChar</type>
    <tooltip>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    &lt;pre&gt;

public class Foo {
 void bar() {
  String s = &quot;hello world&quot;;
  // avoid this
  if (s.indexOf(&quot;d&quot;) {}
  // instead do this
  if (s.indexOf(&apos;d&apos;) {}
 }
}

    &lt;/pre&gt;</tooltip>
    <message>String.indexOf(char) is faster than String.indexOf(String)..</message>
    <priority>NORMAL</priority>
    <key>14005</key>
    <lineRanges>
      <range>
        <start>123</start>
        <end>123</end>
      </range>
    </lineRanges>
    <primaryLineNumber>123</primaryLineNumber>
    <fileName>nih/nci/security/util/StringUtilities.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13385</key>
    <lineRanges>
      <range>
        <start>500</start>
        <end>501</end>
      </range>
    </lineRanges>
    <primaryLineNumber>500</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Failed to get privileges for &quot; appears 4 times in this file; the first occurrence is on line 1,082.</message>
    <priority>NORMAL</priority>
    <key>13648</key>
    <lineRanges>
      <range>
        <start>1082</start>
        <end>1082</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1082</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13622</key>
    <lineRanges>
      <range>
        <start>558</start>
        <end>561</end>
      </range>
    </lineRanges>
    <primaryLineNumber>558</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13476</key>
    <lineRanges>
      <range>
        <start>213</start>
        <end>214</end>
      </range>
    </lineRanges>
    <primaryLineNumber>213</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13231</key>
    <lineRanges>
      <range>
        <start>147</start>
        <end>148</end>
      </range>
    </lineRanges>
    <primaryLineNumber>147</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13683</key>
    <lineRanges>
      <range>
        <start>1529</start>
        <end>1536</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1529</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_listActions&apos;..</message>
    <priority>NORMAL</priority>
    <key>13575</key>
    <lineRanges>
      <range>
        <start>114</start>
        <end>114</end>
      </range>
    </lineRanges>
    <primaryLineNumber>114</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13786</key>
    <lineRanges>
      <range>
        <start>3441</start>
        <end>3444</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3441</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;select &apos;X&apos;&quot; appears 6 times in this file; the first occurrence is on line 189.</message>
    <priority>NORMAL</priority>
    <key>13895</key>
    <lineRanges>
      <range>
        <start>189</start>
        <end>189</end>
      </range>
    </lineRanges>
    <primaryLineNumber>189</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13841</key>
    <lineRanges>
      <range>
        <start>4412</start>
        <end>4415</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4412</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13381</key>
    <lineRanges>
      <range>
        <start>553</start>
        <end>554</end>
      </range>
    </lineRanges>
    <primaryLineNumber>553</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13537</key>
    <lineRanges>
      <range>
        <start>154</start>
        <end>155</end>
      </range>
    </lineRanges>
    <primaryLineNumber>154</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13701</key>
    <lineRanges>
      <range>
        <start>1934</start>
        <end>1937</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1934</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13739</key>
    <lineRanges>
      <range>
        <start>2625</start>
        <end>2628</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2625</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13840</key>
    <lineRanges>
      <range>
        <start>4373</start>
        <end>4376</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4373</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;trusted-certs-&quot; appears 4 times in this file; the first occurrence is on line 419.</message>
    <priority>NORMAL</priority>
    <key>13531</key>
    <lineRanges>
      <range>
        <start>419</start>
        <end>419</end>
      </range>
    </lineRanges>
    <primaryLineNumber>419</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13762</key>
    <lineRanges>
      <range>
        <start>3113</start>
        <end>3116</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3113</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14044</key>
    <lineRanges>
      <range>
        <start>35</start>
        <end>35</end>
      </range>
    </lineRanges>
    <primaryLineNumber>35</primaryLineNumber>
    <fileName>nih/nci/security/ws/handler/authorization/AuthorizationWebServiceRequestHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.handler.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13296</key>
    <lineRanges>
      <range>
        <start>330</start>
        <end>332</end>
      </range>
    </lineRanges>
    <primaryLineNumber>330</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;csm_user_group_role_pg ugrpg,&quot; appears 4 times in this file; the first occurrence is on line 193.</message>
    <priority>NORMAL</priority>
    <key>13899</key>
    <lineRanges>
      <range>
        <start>193</start>
        <end>193</end>
      </range>
    </lineRanges>
    <primaryLineNumber>193</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13644</key>
    <lineRanges>
      <range>
        <start>1019</start>
        <end>1020</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1019</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and rp.privilege_id = p.privilege_id&quot; appears 6 times in this file; the first occurrence is on line 207.</message>
    <priority>NORMAL</priority>
    <key>13906</key>
    <lineRanges>
      <range>
        <start>207</start>
        <end>207</end>
      </range>
    </lineRanges>
    <primaryLineNumber>207</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13488</key>
    <lineRanges>
      <range>
        <start>312</start>
        <end>312</end>
      </range>
    </lineRanges>
    <primaryLineNumber>312</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13202</key>
    <lineRanges>
      <range>
        <start>195</start>
        <end>198</end>
      </range>
    </lineRanges>
    <primaryLineNumber>195</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13687</key>
    <lineRanges>
      <range>
        <start>1637</start>
        <end>1639</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1637</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; for users &quot; appears 4 times in this file; the first occurrence is on line 2,695.</message>
    <priority>NORMAL</priority>
    <key>13743</key>
    <lineRanges>
      <range>
        <start>2695</start>
        <end>2695</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2695</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13824</key>
    <lineRanges>
      <range>
        <start>3979</start>
        <end>3982</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3979</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13377</key>
    <lineRanges>
      <range>
        <start>545</start>
        <end>546</end>
      </range>
    </lineRanges>
    <primaryLineNumber>545</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;rb&apos;..</message>
    <priority>NORMAL</priority>
    <key>13994</key>
    <lineRanges>
      <range>
        <start>140</start>
        <end>140</end>
      </range>
    </lineRanges>
    <primaryLineNumber>140</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13256</key>
    <lineRanges>
      <range>
        <start>416</start>
        <end>418</end>
      </range>
    </lineRanges>
    <primaryLineNumber>416</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and pe.object_id=?&quot; appears 6 times in this file; the first occurrence is on line 201.</message>
    <priority>NORMAL</priority>
    <key>13903</key>
    <lineRanges>
      <range>
        <start>201</start>
        <end>201</end>
      </range>
    </lineRanges>
    <primaryLineNumber>201</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13326</key>
    <lineRanges>
      <range>
        <start>142</start>
        <end>142</end>
      </range>
    </lineRanges>
    <primaryLineNumber>142</primaryLineNumber>
    <fileName>nih/nci/security/upt/exceptionHandler/DefaultExceptionHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.exceptionHandler</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused method parameters such as &apos;perms&apos;..</message>
    <priority>NORMAL</priority>
    <key>13583</key>
    <lineRanges>
      <range>
        <start>179</start>
        <end>181</end>
      </range>
    </lineRanges>
    <primaryLineNumber>179</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AuthPolicy.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13206</key>
    <lineRanges>
      <range>
        <start>235</start>
        <end>238</end>
      </range>
    </lineRanges>
    <primaryLineNumber>235</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13389</key>
    <lineRanges>
      <range>
        <start>535</start>
        <end>536</end>
      </range>
    </lineRanges>
    <primaryLineNumber>535</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused constructor parameters such as &apos;encryptionScheme&apos;..</message>
    <priority>NORMAL</priority>
    <key>13998</key>
    <lineRanges>
      <range>
        <start>44</start>
        <end>52</end>
      </range>
    </lineRanges>
    <primaryLineNumber>44</primaryLineNumber>
    <fileName>nih/nci/security/util/StringEncrypter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13252</key>
    <lineRanges>
      <range>
        <start>375</start>
        <end>377</end>
      </range>
    </lineRanges>
    <primaryLineNumber>375</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization|&quot; appears 10 times in this file; the first occurrence is on line 196.</message>
    <priority>NORMAL</priority>
    <key>13595</key>
    <lineRanges>
      <range>
        <start>196</start>
        <end>196</end>
      </range>
    </lineRanges>
    <primaryLineNumber>196</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13496</key>
    <lineRanges>
      <range>
        <start>241</start>
        <end>241</end>
      </range>
    </lineRanges>
    <primaryLineNumber>241</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13618</key>
    <lineRanges>
      <range>
        <start>490</start>
        <end>493</end>
      </range>
    </lineRanges>
    <primaryLineNumber>490</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13340</key>
    <lineRanges>
      <range>
        <start>402</start>
        <end>403</end>
      </range>
    </lineRanges>
    <primaryLineNumber>402</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/GroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13853</key>
    <lineRanges>
      <range>
        <start>4560</start>
        <end>4566</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4560</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 812 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13914</key>
    <lineRanges>
      <range>
        <start>330</start>
        <end>330</end>
      </range>
    </lineRanges>
    <primaryLineNumber>330</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13155</key>
    <lineRanges>
      <range>
        <start>175</start>
        <end>177</end>
      </range>
    </lineRanges>
    <primaryLineNumber>175</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 2 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13891</key>
    <lineRanges>
      <range>
        <start>152</start>
        <end>152</end>
      </range>
    </lineRanges>
    <primaryLineNumber>152</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13275</key>
    <lineRanges>
      <range>
        <start>626</start>
        <end>629</end>
      </range>
    </lineRanges>
    <primaryLineNumber>626</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13145</key>
    <lineRanges>
      <range>
        <start>169</start>
        <end>170</end>
      </range>
    </lineRanges>
    <primaryLineNumber>169</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13174</key>
    <lineRanges>
      <range>
        <start>341</start>
        <end>342</end>
      </range>
    </lineRanges>
    <primaryLineNumber>341</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13182</key>
    <lineRanges>
      <range>
        <start>435</start>
        <end>436</end>
      </range>
    </lineRanges>
    <primaryLineNumber>435</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13235</key>
    <lineRanges>
      <range>
        <start>176</start>
        <end>177</end>
      </range>
    </lineRanges>
    <primaryLineNumber>176</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13748</key>
    <lineRanges>
      <range>
        <start>2758</start>
        <end>2761</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2758</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13713</key>
    <lineRanges>
      <range>
        <start>2145</start>
        <end>2148</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2145</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13535</key>
    <lineRanges>
      <range>
        <start>53</start>
        <end>54</end>
      </range>
    </lineRanges>
    <primaryLineNumber>53</primaryLineNumber>
    <fileName>nih/nci/security/authentication/principal/BasePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13836</key>
    <lineRanges>
      <range>
        <start>4187</start>
        <end>4189</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4187</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13300</key>
    <lineRanges>
      <range>
        <start>147</start>
        <end>149</end>
      </range>
    </lineRanges>
    <primaryLineNumber>147</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LogoutAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13606</key>
    <lineRanges>
      <range>
        <start>316</start>
        <end>316</end>
      </range>
    </lineRanges>
    <primaryLineNumber>316</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13492</key>
    <lineRanges>
      <range>
        <start>203</start>
        <end>203</end>
      </range>
    </lineRanges>
    <primaryLineNumber>203</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InefficientEmptyStringCheck</type>
    <tooltip>
String.trim().length() is an inefficient way to check if a String is really empty, as it
creates a new String object just to check its size. Consider creating a static function that
loops through a string, checking Character.isWhitespace() on each character and returning
false if a non-whitespace character is found.
    &lt;pre&gt;

public class Foo {
    void bar(String string) {
        if (string != null &amp;&amp; string.trim().size() &gt; 0) {
		    doSomething();
        }
    }
}

    &lt;/pre&gt;</tooltip>
    <message>String.trim().length()==0 is an inefficient way to validate an empty String..</message>
    <priority>NORMAL</priority>
    <key>13458</key>
    <lineRanges>
      <range>
        <start>218</start>
        <end>218</end>
      </range>
    </lineRanges>
    <primaryLineNumber>218</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13344</key>
    <lineRanges>
      <range>
        <start>302</start>
        <end>303</end>
      </range>
    </lineRanges>
    <primaryLineNumber>302</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/PrivilegeForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and Attribute &quot; appears 6 times in this file; the first occurrence is on line 2,598.</message>
    <priority>NORMAL</priority>
    <key>13735</key>
    <lineRanges>
      <range>
        <start>2598</start>
        <end>2598</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2598</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;getLockoutTime()&apos;..</message>
    <priority>NORMAL</priority>
    <key>13401</key>
    <lineRanges>
      <range>
        <start>40</start>
        <end>40</end>
      </range>
    </lineRanges>
    <primaryLineNumber>40</primaryLineNumber>
    <fileName>nih/nci/security/upt/logoninfo/LogonInfoManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.logoninfo</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13860</key>
    <lineRanges>
      <range>
        <start>4782</start>
        <end>4785</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4782</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13725</key>
    <lineRanges>
      <range>
        <start>2374</start>
        <end>2377</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2374</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13346</key>
    <lineRanges>
      <range>
        <start>428</start>
        <end>429</end>
      </range>
    </lineRanges>
    <primaryLineNumber>428</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14025</key>
    <lineRanges>
      <range>
        <start>46</start>
        <end>46</end>
      </range>
    </lineRanges>
    <primaryLineNumber>46</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginResponse.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13311</key>
    <lineRanges>
      <range>
        <start>161</start>
        <end>161</end>
      </range>
    </lineRanges>
    <primaryLineNumber>161</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13178</key>
    <lineRanges>
      <range>
        <start>386</start>
        <end>387</end>
      </range>
    </lineRanges>
    <primaryLineNumber>386</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyFinallyBlock</type>
    <tooltip>
Avoid empty finally blocks - these can be deleted.
      &lt;pre&gt;
  
public class Foo {
 public void bar() {
  try {
    int x=2;
   } finally {
    // empty!
   }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty finally blocks.</message>
    <priority>NORMAL</priority>
    <key>13990</key>
    <lineRanges>
      <range>
        <start>106</start>
        <end>108</end>
      </range>
    </lineRanges>
    <primaryLineNumber>106</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13292</key>
    <lineRanges>
      <range>
        <start>266</start>
        <end>268</end>
      </range>
    </lineRanges>
    <primaryLineNumber>266</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13210</key>
    <lineRanges>
      <range>
        <start>268</start>
        <end>269</end>
      </range>
    </lineRanges>
    <primaryLineNumber>268</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13667</key>
    <lineRanges>
      <range>
        <start>1300</start>
        <end>1300</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1300</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused method parameters such as &apos;name&apos;..</message>
    <priority>NORMAL</priority>
    <key>13591</key>
    <lineRanges>
      <range>
        <start>201</start>
        <end>203</end>
      </range>
    </lineRanges>
    <primaryLineNumber>201</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13504</key>
    <lineRanges>
      <range>
        <start>273</start>
        <end>274</end>
      </range>
    </lineRanges>
    <primaryLineNumber>273</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13515</key>
    <lineRanges>
      <range>
        <start>168</start>
        <end>169</end>
      </range>
    </lineRanges>
    <primaryLineNumber>168</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13411</key>
    <lineRanges>
      <range>
        <start>197</start>
        <end>197</end>
      </range>
    </lineRanges>
    <primaryLineNumber>197</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;doc&apos;..</message>
    <priority>NORMAL</priority>
    <key>13971</key>
    <lineRanges>
      <range>
        <start>142</start>
        <end>142</end>
      </range>
    </lineRanges>
    <primaryLineNumber>142</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13350</key>
    <lineRanges>
      <range>
        <start>436</start>
        <end>437</end>
      </range>
    </lineRanges>
    <primaryLineNumber>436</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13800</key>
    <lineRanges>
      <range>
        <start>3673</start>
        <end>3675</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3673</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13557</key>
    <lineRanges>
      <range>
        <start>60</start>
        <end>61</end>
      </range>
    </lineRanges>
    <primaryLineNumber>60</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13845</key>
    <lineRanges>
      <range>
        <start>4473</start>
        <end>4478</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4473</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 20 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13941</key>
    <lineRanges>
      <range>
        <start>506</start>
        <end>506</end>
      </range>
    </lineRanges>
    <primaryLineNumber>506</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13721</key>
    <lineRanges>
      <range>
        <start>2312</start>
        <end>2319</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2312</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13813</key>
    <lineRanges>
      <range>
        <start>3802</start>
        <end>3807</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3802</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13454</key>
    <lineRanges>
      <range>
        <start>194</start>
        <end>195</end>
      </range>
    </lineRanges>
    <primaryLineNumber>194</primaryLineNumber>
    <fileName>nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13541</key>
    <lineRanges>
      <range>
        <start>221</start>
        <end>222</end>
      </range>
    </lineRanges>
    <primaryLineNumber>221</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13214</key>
    <lineRanges>
      <range>
        <start>305</start>
        <end>308</end>
      </range>
    </lineRanges>
    <primaryLineNumber>305</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13330</key>
    <lineRanges>
      <range>
        <start>438</start>
        <end>438</end>
      </range>
    </lineRanges>
    <primaryLineNumber>438</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13613</key>
    <lineRanges>
      <range>
        <start>429</start>
        <end>430</end>
      </range>
    </lineRanges>
    <primaryLineNumber>429</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyStatementNotInLoop</type>
    <tooltip>
An empty statement (aka a semicolon by itself) that is not used
as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be
removed.
       &lt;pre&gt;

public class MyClass {
   public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println(&quot;look at the extra semicolon&quot;);;
   }
}

       &lt;/pre&gt;</tooltip>
    <message>An empty statement (semicolon) not part of a loop.</message>
    <priority>NORMAL</priority>
    <key>13849</key>
    <lineRanges>
      <range>
        <start>4523</start>
        <end>4523</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4523</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;isEncryptionEnabled&apos;..</message>
    <priority>NORMAL</priority>
    <key>13968</key>
    <lineRanges>
      <range>
        <start>155</start>
        <end>155</end>
      </range>
    </lineRanges>
    <primaryLineNumber>155</primaryLineNumber>
    <fileName>nih/nci/security/provisioning/AuthorizationManagerImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.provisioning</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13804</key>
    <lineRanges>
      <range>
        <start>3698</start>
        <end>3701</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3698</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13519</key>
    <lineRanges>
      <range>
        <start>221</start>
        <end>222</end>
      </range>
    </lineRanges>
    <primaryLineNumber>221</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; object|&quot; appears 13 times in this file; the first occurrence is on line 306.</message>
    <priority>NORMAL</priority>
    <key>13170</key>
    <lineRanges>
      <range>
        <start>306</start>
        <end>306</end>
      </range>
    </lineRanges>
    <primaryLineNumber>306</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13553</key>
    <lineRanges>
      <range>
        <start>143</start>
        <end>143</end>
      </range>
    </lineRanges>
    <primaryLineNumber>143</primaryLineNumber>
    <fileName>nih/nci/security/authorization/ObjectAccessMap.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13223</key>
    <lineRanges>
      <range>
        <start>393</start>
        <end>396</end>
      </range>
    </lineRanges>
    <primaryLineNumber>393</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13640</key>
    <lineRanges>
      <range>
        <start>935</start>
        <end>938</end>
      </range>
    </lineRanges>
    <primaryLineNumber>935</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 724 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13918</key>
    <lineRanges>
      <range>
        <start>402</start>
        <end>402</end>
      </range>
    </lineRanges>
    <primaryLineNumber>402</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13405</key>
    <lineRanges>
      <range>
        <start>73</start>
        <end>73</end>
      </range>
    </lineRanges>
    <primaryLineNumber>73</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13695</key>
    <lineRanges>
      <range>
        <start>1857</start>
        <end>1860</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1857</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://security.nci.nih.gov/ws/common&quot; appears 6 times in this file; the first occurrence is on line 36.</message>
    <priority>NORMAL</priority>
    <key>14009</key>
    <lineRanges>
      <range>
        <start>36</start>
        <end>36</end>
      </range>
    </lineRanges>
    <primaryLineNumber>36</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13602</key>
    <lineRanges>
      <range>
        <start>246</start>
        <end>247</end>
      </range>
    </lineRanges>
    <primaryLineNumber>246</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and p.privilege_name=?&quot; appears 8 times in this file; the first occurrence is on line 112.</message>
    <priority>NORMAL</priority>
    <key>13880</key>
    <lineRanges>
      <range>
        <start>112</start>
        <end>112</end>
      </range>
    </lineRanges>
    <primaryLineNumber>112</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13367</key>
    <lineRanges>
      <range>
        <start>405</start>
        <end>406</end>
      </range>
    </lineRanges>
    <primaryLineNumber>405</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13304</key>
    <lineRanges>
      <range>
        <start>146</start>
        <end>147</end>
      </range>
    </lineRanges>
    <primaryLineNumber>146</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13334</key>
    <lineRanges>
      <range>
        <start>489</start>
        <end>489</end>
      </range>
    </lineRanges>
    <primaryLineNumber>489</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13809</key>
    <lineRanges>
      <range>
        <start>3772</start>
        <end>3774</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3772</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13480</key>
    <lineRanges>
      <range>
        <start>249</start>
        <end>250</end>
      </range>
    </lineRanges>
    <primaryLineNumber>249</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; for user &quot; appears 6 times in this file; the first occurrence is on line 2,478.</message>
    <priority>NORMAL</priority>
    <key>13731</key>
    <lineRanges>
      <range>
        <start>2478</start>
        <end>2478</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2478</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;arraydf&apos;..</message>
    <priority>NORMAL</priority>
    <key>14013</key>
    <lineRanges>
      <range>
        <start>86</start>
        <end>86</end>
      </range>
    </lineRanges>
    <primaryLineNumber>86</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13808</key>
    <lineRanges>
      <range>
        <start>3769</start>
        <end>3770</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3769</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://security.nci.nih.gov/ws/authorization&quot; appears 7 times in this file; the first occurrence is on line 229.</message>
    <priority>NORMAL</priority>
    <key>14029</key>
    <lineRanges>
      <range>
        <start>229</start>
        <end>229</end>
      </range>
    </lineRanges>
    <primaryLineNumber>229</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13227</key>
    <lineRanges>
      <range>
        <start>129</start>
        <end>130</end>
      </range>
    </lineRanges>
    <primaryLineNumber>129</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/HomeAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13678</key>
    <lineRanges>
      <range>
        <start>1440</start>
        <end>1447</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1440</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13194</key>
    <lineRanges>
      <range>
        <start>573</start>
        <end>576</end>
      </range>
    </lineRanges>
    <primaryLineNumber>573</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13428</key>
    <lineRanges>
      <range>
        <start>183</start>
        <end>183</end>
      </range>
    </lineRanges>
    <primaryLineNumber>183</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/JDBCHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; pg.protection_group_id = pgpe.protection_group_id and&quot; appears 4 times in this file; the first occurrence is on line 415.</message>
    <priority>NORMAL</priority>
    <key>13929</key>
    <lineRanges>
      <range>
        <start>415</start>
        <end>415</end>
      </range>
    </lineRanges>
    <primaryLineNumber>415</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;additionalData&apos;..</message>
    <priority>NORMAL</priority>
    <key>13441</key>
    <lineRanges>
      <range>
        <start>20</start>
        <end>20</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authentication/CSMUserDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13318</key>
    <lineRanges>
      <range>
        <start>146</start>
        <end>147</end>
      </range>
    </lineRanges>
    <primaryLineNumber>146</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13774</key>
    <lineRanges>
      <range>
        <start>3266</start>
        <end>3269</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3266</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 823 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13940</key>
    <lineRanges>
      <range>
        <start>505</start>
        <end>505</end>
      </range>
    </lineRanges>
    <primaryLineNumber>505</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13518</key>
    <lineRanges>
      <range>
        <start>220</start>
        <end>222</end>
      </range>
    </lineRanges>
    <primaryLineNumber>220</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14021</key>
    <lineRanges>
      <range>
        <start>94</start>
        <end>94</end>
      </range>
    </lineRanges>
    <primaryLineNumber>94</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13363</key>
    <lineRanges>
      <range>
        <start>337</start>
        <end>338</end>
      </range>
    </lineRanges>
    <primaryLineNumber>337</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and u.login_name=?&quot; appears 4 times in this file; the first occurrence is on line 111.</message>
    <priority>NORMAL</priority>
    <key>13879</key>
    <lineRanges>
      <range>
        <start>111</start>
        <end>111</end>
      </range>
    </lineRanges>
    <primaryLineNumber>111</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13167</key>
    <lineRanges>
      <range>
        <start>274</start>
        <end>276</end>
      </range>
    </lineRanges>
    <primaryLineNumber>274</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13263</key>
    <lineRanges>
      <range>
        <start>494</start>
        <end>497</end>
      </range>
    </lineRanges>
    <primaryLineNumber>494</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 964 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13960</key>
    <lineRanges>
      <range>
        <start>671</start>
        <end>671</end>
      </range>
    </lineRanges>
    <primaryLineNumber>671</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13796</key>
    <lineRanges>
      <range>
        <start>3631</start>
        <end>3632</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3631</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13220</key>
    <lineRanges>
      <range>
        <start>367</start>
        <end>368</end>
      </range>
    </lineRanges>
    <primaryLineNumber>367</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13816</key>
    <lineRanges>
      <range>
        <start>3868</start>
        <end>3871</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3868</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; for Protection Group &quot; appears 4 times in this file; the first occurrence is on line 640.</message>
    <priority>NORMAL</priority>
    <key>13625</key>
    <lineRanges>
      <range>
        <start>640</start>
        <end>640</end>
      </range>
    </lineRanges>
    <primaryLineNumber>640</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13674</key>
    <lineRanges>
      <range>
        <start>1327</start>
        <end>1330</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1327</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13431</key>
    <lineRanges>
      <range>
        <start>175</start>
        <end>175</end>
      </range>
    </lineRanges>
    <primaryLineNumber>175</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_role_privilege rp,&quot; appears 4 times in this file; the first occurrence is on line 409.</message>
    <priority>NORMAL</priority>
    <key>13925</key>
    <lineRanges>
      <range>
        <start>409</start>
        <end>409</end>
      </range>
    </lineRanges>
    <primaryLineNumber>409</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13884</key>
    <lineRanges>
      <range>
        <start>150</start>
        <end>150</end>
      </range>
    </lineRanges>
    <primaryLineNumber>150</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13445</key>
    <lineRanges>
      <range>
        <start>103</start>
        <end>104</end>
      </range>
    </lineRanges>
    <primaryLineNumber>103</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13561</key>
    <lineRanges>
      <range>
        <start>120</start>
        <end>123</end>
      </range>
    </lineRanges>
    <primaryLineNumber>120</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13370</key>
    <lineRanges>
      <range>
        <start>411</start>
        <end>412</end>
      </range>
    </lineRanges>
    <primaryLineNumber>411</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13163</key>
    <lineRanges>
      <range>
        <start>237</start>
        <end>239</end>
      </range>
    </lineRanges>
    <primaryLineNumber>237</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13872</key>
    <lineRanges>
      <range>
        <start>4984</start>
        <end>4985</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4984</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 888 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13956</key>
    <lineRanges>
      <range>
        <start>598</start>
        <end>598</end>
      </range>
    </lineRanges>
    <primaryLineNumber>598</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13506</key>
    <lineRanges>
      <range>
        <start>331</start>
        <end>332</end>
      </range>
    </lineRanges>
    <primaryLineNumber>331</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;rolePrefix&apos;..</message>
    <priority>NORMAL</priority>
    <key>13449</key>
    <lineRanges>
      <range>
        <start>50</start>
        <end>50</end>
      </range>
    </lineRanges>
    <primaryLineNumber>50</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMRoleVoter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;str&apos;..</message>
    <priority>NORMAL</priority>
    <key>13279</key>
    <lineRanges>
      <range>
        <start>676</start>
        <end>676</end>
      </range>
    </lineRanges>
    <primaryLineNumber>676</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13374</key>
    <lineRanges>
      <range>
        <start>480</start>
        <end>481</end>
      </range>
    </lineRanges>
    <primaryLineNumber>480</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13243</key>
    <lineRanges>
      <range>
        <start>245</start>
        <end>246</end>
      </range>
    </lineRanges>
    <primaryLineNumber>245</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_protection_element pe,&quot; appears 4 times in this file; the first occurrence is on line 405.</message>
    <priority>NORMAL</priority>
    <key>13921</key>
    <lineRanges>
      <range>
        <start>405</start>
        <end>405</end>
      </range>
    </lineRanges>
    <primaryLineNumber>405</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13435</key>
    <lineRanges>
      <range>
        <start>356</start>
        <end>356</end>
      </range>
    </lineRanges>
    <primaryLineNumber>356</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_connection&apos;..</message>
    <priority>NORMAL</priority>
    <key>13588</key>
    <lineRanges>
      <range>
        <start>133</start>
        <end>133</end>
      </range>
    </lineRanges>
    <primaryLineNumber>133</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13705</key>
    <lineRanges>
      <range>
        <start>2030</start>
        <end>2033</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2030</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 2 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13888</key>
    <lineRanges>
      <range>
        <start>151</start>
        <end>151</end>
      </range>
    </lineRanges>
    <primaryLineNumber>151</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13281</key>
    <lineRanges>
      <range>
        <start>690</start>
        <end>693</end>
      </range>
    </lineRanges>
    <primaryLineNumber>690</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13755</key>
    <lineRanges>
      <range>
        <start>2914</start>
        <end>2919</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2914</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13500</key>
    <lineRanges>
      <range>
        <start>263</start>
        <end>264</end>
      </range>
    </lineRanges>
    <primaryLineNumber>263</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13629</key>
    <lineRanges>
      <range>
        <start>668</start>
        <end>671</end>
      </range>
    </lineRanges>
    <primaryLineNumber>668</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13829</key>
    <lineRanges>
      <range>
        <start>4100</start>
        <end>4103</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4100</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13820</key>
    <lineRanges>
      <range>
        <start>3925</start>
        <end>3928</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3925</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13239</key>
    <lineRanges>
      <range>
        <start>214</start>
        <end>216</end>
      </range>
    </lineRanges>
    <primaryLineNumber>214</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13285</key>
    <lineRanges>
      <range>
        <start>185</start>
        <end>187</end>
      </range>
    </lineRanges>
    <primaryLineNumber>185</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            csm_protection_group pg,&quot; appears 5 times in this file; the first occurrence is on line 537.</message>
    <priority>NORMAL</priority>
    <key>13945</key>
    <lineRanges>
      <range>
        <start>537</start>
        <end>537</end>
      </range>
    </lineRanges>
    <primaryLineNumber>537</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_perms&apos;..</message>
    <priority>NORMAL</priority>
    <key>13579</key>
    <lineRanges>
      <range>
        <start>123</start>
        <end>123</end>
      </range>
    </lineRanges>
    <primaryLineNumber>123</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AuthPermissionCollection.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13864</key>
    <lineRanges>
      <range>
        <start>4871</start>
        <end>4874</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4871</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13964</key>
    <lineRanges>
      <range>
        <start>182</start>
        <end>182</end>
      </range>
    </lineRanges>
    <primaryLineNumber>182</primaryLineNumber>
    <fileName>nih/nci/security/dao/hibernate/UserGroup.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao.hibernate</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13322</key>
    <lineRanges>
      <range>
        <start>214</start>
        <end>217</end>
      </range>
    </lineRanges>
    <primaryLineNumber>214</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13875</key>
    <lineRanges>
      <range>
        <start>5008</start>
        <end>5009</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5008</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>BooleanInstantiation</type>
    <tooltip>
Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.
   &lt;pre&gt;
   
public class Foo {
 Boolean bar = new Boolean(&quot;true&quot;); // just do a Boolean bar = Boolean.TRUE;
 Boolean buz = Boolean.valueOf(false); // just do a Boolean buz = Boolean.FALSE;
}
   
   &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating Boolean objects; reference Boolean.TRUE or Boolean.FALSE or call Boolean.valueOf() instead..</message>
    <priority>HIGH</priority>
    <key>13833</key>
    <lineRanges>
      <range>
        <start>4158</start>
        <end>4158</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4158</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13636</key>
    <lineRanges>
      <range>
        <start>815</start>
        <end>818</end>
      </range>
    </lineRanges>
    <primaryLineNumber>815</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; to Protection Group&quot; appears 4 times in this file; the first occurrence is on line 2,820.</message>
    <priority>NORMAL</priority>
    <key>13751</key>
    <lineRanges>
      <range>
        <start>2820</start>
        <end>2820</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2820</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringToString</type>
    <tooltip>
    Avoid calling toString() on String objects; this is unnecessary.
    &lt;pre&gt;

public class Foo {
 private String baz() {
  String bar = &quot;howdy&quot;;
  return bar.toString();
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid calling toString() on String objects; this is unnecessary..</message>
    <priority>NORMAL</priority>
    <key>13424</key>
    <lineRanges>
      <range>
        <start>484</start>
        <end>484</end>
      </range>
    </lineRanges>
    <primaryLineNumber>484</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 813 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13933</key>
    <lineRanges>
      <range>
        <start>423</start>
        <end>423</end>
      </range>
    </lineRanges>
    <primaryLineNumber>423</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;An error occurred while checking permissions\n&quot; appears 5 times in this file; the first occurrence is on line 1,187.</message>
    <priority>NORMAL</priority>
    <key>13657</key>
    <lineRanges>
      <range>
        <start>1187</start>
        <end>1187</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1187</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14047</key>
    <lineRanges>
      <range>
        <start>14</start>
        <end>15</end>
      </range>
    </lineRanges>
    <primaryLineNumber>14</primaryLineNumber>
    <fileName>nih/nci/security/ws/utils/StringUtils.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.utils</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13470</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>nih/nci/security/authentication/LockoutManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;context-name&quot; appears 4 times in this file; the first occurrence is on line 164.</message>
    <priority>NORMAL</priority>
    <key>13974</key>
    <lineRanges>
      <range>
        <start>164</start>
        <end>164</end>
      </range>
    </lineRanges>
    <primaryLineNumber>164</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13149</key>
    <lineRanges>
      <range>
        <start>131</start>
        <end>131</end>
      </range>
    </lineRanges>
    <primaryLineNumber>131</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 19 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13911</key>
    <lineRanges>
      <range>
        <start>260</start>
        <end>260</end>
      </range>
    </lineRanges>
    <primaryLineNumber>260</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13565</key>
    <lineRanges>
      <range>
        <start>164</start>
        <end>164</end>
      </range>
    </lineRanges>
    <primaryLineNumber>164</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13600</key>
    <lineRanges>
      <range>
        <start>242</start>
        <end>242</end>
      </range>
    </lineRanges>
    <primaryLineNumber>242</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyIfStmt</type>
    <tooltip>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    &lt;pre&gt;
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       &lt;/pre&gt;</tooltip>
    <message>Avoid empty if statements.</message>
    <priority>NORMAL</priority>
    <key>13489</key>
    <lineRanges>
      <range>
        <start>320</start>
        <end>322</end>
      </range>
    </lineRanges>
    <primaryLineNumber>320</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14039</key>
    <lineRanges>
      <range>
        <start>70</start>
        <end>70</end>
      </range>
    </lineRanges>
    <primaryLineNumber>70</primaryLineNumber>
    <fileName>nih/nci/security/ws/common/ErrorDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.common</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13982</key>
    <lineRanges>
      <range>
        <start>238</start>
        <end>238</end>
      </range>
    </lineRanges>
    <primaryLineNumber>238</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14001</key>
    <lineRanges>
      <range>
        <start>56</start>
        <end>58</end>
      </range>
    </lineRanges>
    <primaryLineNumber>56</primaryLineNumber>
    <fileName>nih/nci/security/util/StringEncrypter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13314</key>
    <lineRanges>
      <range>
        <start>167</start>
        <end>167</end>
      </range>
    </lineRanges>
    <primaryLineNumber>167</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;simplelistdf&apos;..</message>
    <priority>NORMAL</priority>
    <key>14017</key>
    <lineRanges>
      <range>
        <start>90</start>
        <end>90</end>
      </range>
    </lineRanges>
    <primaryLineNumber>90</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13759</key>
    <lineRanges>
      <range>
        <start>2994</start>
        <end>2997</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2994</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13416</key>
    <lineRanges>
      <range>
        <start>317</start>
        <end>317</end>
      </range>
    </lineRanges>
    <primaryLineNumber>317</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13653</key>
    <lineRanges>
      <range>
        <start>1185</start>
        <end>1186</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1185</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13546</key>
    <lineRanges>
      <range>
        <start>315</start>
        <end>316</end>
      </range>
    </lineRanges>
    <primaryLineNumber>315</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; object|&quot; appears 14 times in this file; the first occurrence is on line 440.</message>
    <priority>NORMAL</priority>
    <key>13259</key>
    <lineRanges>
      <range>
        <start>440</start>
        <end>440</end>
      </range>
    </lineRanges>
    <primaryLineNumber>440</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13718</key>
    <lineRanges>
      <range>
        <start>2240</start>
        <end>2247</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2240</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13355</key>
    <lineRanges>
      <range>
        <start>334</start>
        <end>334</end>
      </range>
    </lineRanges>
    <primaryLineNumber>334</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13825</key>
    <lineRanges>
      <range>
        <start>4022</start>
        <end>4025</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4022</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13397</key>
    <lineRanges>
      <range>
        <start>630</start>
        <end>631</end>
      </range>
    </lineRanges>
    <primaryLineNumber>630</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13571</key>
    <lineRanges>
      <range>
        <start>88</start>
        <end>88</end>
      </range>
    </lineRanges>
    <primaryLineNumber>88</primaryLineNumber>
    <fileName>nih/nci/security/authorization/instancelevel/InstanceLevelSecurityHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.instancelevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13462</key>
    <lineRanges>
      <range>
        <start>247</start>
        <end>248</end>
      </range>
    </lineRanges>
    <primaryLineNumber>247</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13510</key>
    <lineRanges>
      <range>
        <start>364</start>
        <end>365</end>
      </range>
    </lineRanges>
    <primaryLineNumber>364</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13271</key>
    <lineRanges>
      <range>
        <start>574</start>
        <end>577</end>
      </range>
    </lineRanges>
    <primaryLineNumber>574</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13766</key>
    <lineRanges>
      <range>
        <start>3158</start>
        <end>3163</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3158</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13670</key>
    <lineRanges>
      <range>
        <start>1322</start>
        <end>1322</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1322</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13466</key>
    <lineRanges>
      <range>
        <start>269</start>
        <end>270</end>
      </range>
    </lineRanges>
    <primaryLineNumber>269</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13868</key>
    <lineRanges>
      <range>
        <start>4931</start>
        <end>4932</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4931</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and the result is &quot; appears 5 times in this file; the first occurrence is on line 1,201.</message>
    <priority>NORMAL</priority>
    <key>13661</key>
    <lineRanges>
      <range>
        <start>1201</start>
        <end>1201</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1201</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13359</key>
    <lineRanges>
      <range>
        <start>276</start>
        <end>276</end>
      </range>
    </lineRanges>
    <primaryLineNumber>276</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13649</key>
    <lineRanges>
      <range>
        <start>1093</start>
        <end>1096</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1093</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13141</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>137</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13420</key>
    <lineRanges>
      <range>
        <start>389</start>
        <end>389</end>
      </range>
    </lineRanges>
    <primaryLineNumber>389</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13393</key>
    <lineRanges>
      <range>
        <start>575</start>
        <end>576</end>
      </range>
    </lineRanges>
    <primaryLineNumber>575</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13779</key>
    <lineRanges>
      <range>
        <start>3335</start>
        <end>3338</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3335</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13159</key>
    <lineRanges>
      <range>
        <start>201</start>
        <end>203</end>
      </range>
    </lineRanges>
    <primaryLineNumber>201</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13770</key>
    <lineRanges>
      <range>
        <start>3207</start>
        <end>3212</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3207</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; object|&quot; appears 16 times in this file; the first occurrence is on line 155.</message>
    <priority>NORMAL</priority>
    <key>13198</key>
    <lineRanges>
      <range>
        <start>155</start>
        <end>155</end>
      </range>
    </lineRanges>
    <primaryLineNumber>155</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13267</key>
    <lineRanges>
      <range>
        <start>525</start>
        <end>527</end>
      </range>
    </lineRanges>
    <primaryLineNumber>525</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13978</key>
    <lineRanges>
      <range>
        <start>228</start>
        <end>228</end>
      </range>
    </lineRanges>
    <primaryLineNumber>228</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13523</key>
    <lineRanges>
      <range>
        <start>176</start>
        <end>177</end>
      </range>
    </lineRanges>
    <primaryLineNumber>176</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot; appears 5 times in this file; the first occurrence is on line 55.</message>
    <priority>NORMAL</priority>
    <key>13439</key>
    <lineRanges>
      <range>
        <start>55</start>
        <end>55</end>
      </range>
    </lineRanges>
    <primaryLineNumber>55</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 793 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13907</key>
    <lineRanges>
      <range>
        <start>225</start>
        <end>225</end>
      </range>
    </lineRanges>
    <primaryLineNumber>225</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14035</key>
    <lineRanges>
      <range>
        <start>26</start>
        <end>27</end>
      </range>
    </lineRanges>
    <primaryLineNumber>26</primaryLineNumber>
    <fileName>nih/nci/security/ws/cache/CacheManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.cache</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13527</key>
    <lineRanges>
      <range>
        <start>302</start>
        <end>304</end>
      </range>
    </lineRanges>
    <primaryLineNumber>302</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            csm_role_privilege rp,&quot; appears 5 times in this file; the first occurrence is on line 544.</message>
    <priority>NORMAL</priority>
    <key>13949</key>
    <lineRanges>
      <range>
        <start>544</start>
        <end>544</end>
      </range>
    </lineRanges>
    <primaryLineNumber>544</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13709</key>
    <lineRanges>
      <range>
        <start>2083</start>
        <end>2085</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2083</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13552</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>nih/nci/security/authorization/ObjectAccessMap.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13783</key>
    <lineRanges>
      <range>
        <start>3377</start>
        <end>3380</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3377</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13493</key>
    <lineRanges>
      <range>
        <start>234</start>
        <end>234</end>
      </range>
    </lineRanges>
    <primaryLineNumber>234</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_action&apos;..</message>
    <priority>NORMAL</priority>
    <key>13574</key>
    <lineRanges>
      <range>
        <start>113</start>
        <end>113</end>
      </range>
    </lineRanges>
    <primaryLineNumber>113</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14041</key>
    <lineRanges>
      <range>
        <start>28</start>
        <end>28</end>
      </range>
    </lineRanges>
    <primaryLineNumber>28</primaryLineNumber>
    <fileName>nih/nci/security/ws/factory/WebServiceRequestHandlerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.factory</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13985</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>137</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSessionFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13641</key>
    <lineRanges>
      <range>
        <start>940</start>
        <end>948</end>
      </range>
    </lineRanges>
    <primaryLineNumber>940</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13390</key>
    <lineRanges>
      <range>
        <start>569</start>
        <end>570</end>
      </range>
    </lineRanges>
    <primaryLineNumber>569</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;csm_pg_pe pgpe,&quot; appears 4 times in this file; the first occurrence is on line 192.</message>
    <priority>NORMAL</priority>
    <key>13898</key>
    <lineRanges>
      <range>
        <start>192</start>
        <end>192</end>
      </range>
    </lineRanges>
    <primaryLineNumber>192</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13767</key>
    <lineRanges>
      <range>
        <start>3179</start>
        <end>3183</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3179</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13295</key>
    <lineRanges>
      <range>
        <start>313</start>
        <end>315</end>
      </range>
    </lineRanges>
    <primaryLineNumber>313</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13619</key>
    <lineRanges>
      <range>
        <start>496</start>
        <end>500</end>
      </range>
    </lineRanges>
    <primaryLineNumber>496</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13270</key>
    <lineRanges>
      <range>
        <start>562</start>
        <end>563</end>
      </range>
    </lineRanges>
    <primaryLineNumber>562</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13274</key>
    <lineRanges>
      <range>
        <start>611</start>
        <end>612</end>
      </range>
    </lineRanges>
    <primaryLineNumber>611</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 22 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13894</key>
    <lineRanges>
      <range>
        <start>189</start>
        <end>189</end>
      </range>
    </lineRanges>
    <primaryLineNumber>189</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13787</key>
    <lineRanges>
      <range>
        <start>3447</start>
        <end>3450</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3447</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13203</key>
    <lineRanges>
      <range>
        <start>205</start>
        <end>205</end>
      </range>
    </lineRanges>
    <primaryLineNumber>205</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13560</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13327</key>
    <lineRanges>
      <range>
        <start>144</start>
        <end>144</end>
      </range>
    </lineRanges>
    <primaryLineNumber>144</primaryLineNumber>
    <fileName>nih/nci/security/upt/exceptionHandler/DefaultExceptionHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.exceptionHandler</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13844</key>
    <lineRanges>
      <range>
        <start>4468</start>
        <end>4471</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4468</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13483</key>
    <lineRanges>
      <range>
        <start>298</start>
        <end>298</end>
      </range>
    </lineRanges>
    <primaryLineNumber>298</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13186</key>
    <lineRanges>
      <range>
        <start>485</start>
        <end>488</end>
      </range>
    </lineRanges>
    <primaryLineNumber>485</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13532</key>
    <lineRanges>
      <range>
        <start>432</start>
        <end>435</end>
      </range>
    </lineRanges>
    <primaryLineNumber>432</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13744</key>
    <lineRanges>
      <range>
        <start>2708</start>
        <end>2711</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2708</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13760</key>
    <lineRanges>
      <range>
        <start>3015</start>
        <end>3018</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3015</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13207</key>
    <lineRanges>
      <range>
        <start>246</start>
        <end>249</end>
      </range>
    </lineRanges>
    <primaryLineNumber>246</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13542</key>
    <lineRanges>
      <range>
        <start>234</start>
        <end>235</end>
      </range>
    </lineRanges>
    <primaryLineNumber>234</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13890</key>
    <lineRanges>
      <range>
        <start>152</start>
        <end>152</end>
      </range>
    </lineRanges>
    <primaryLineNumber>152</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13716</key>
    <lineRanges>
      <range>
        <start>2217</start>
        <end>2225</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2217</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused method parameters such as &apos;newPerms&apos;..</message>
    <priority>NORMAL</priority>
    <key>13582</key>
    <lineRanges>
      <range>
        <start>179</start>
        <end>181</end>
      </range>
    </lineRanges>
    <primaryLineNumber>179</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AuthPolicy.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13839</key>
    <lineRanges>
      <range>
        <start>4305</start>
        <end>4310</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4305</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13154</key>
    <lineRanges>
      <range>
        <start>163</start>
        <end>164</end>
      </range>
    </lineRanges>
    <primaryLineNumber>163</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13487</key>
    <lineRanges>
      <range>
        <start>310</start>
        <end>310</end>
      </range>
    </lineRanges>
    <primaryLineNumber>310</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13173</key>
    <lineRanges>
      <range>
        <start>335</start>
        <end>335</end>
      </range>
    </lineRanges>
    <primaryLineNumber>335</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13686</key>
    <lineRanges>
      <range>
        <start>1631</start>
        <end>1634</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1631</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13148</key>
    <lineRanges>
      <range>
        <start>130</start>
        <end>130</end>
      </range>
    </lineRanges>
    <primaryLineNumber>130</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13382</key>
    <lineRanges>
      <range>
        <start>555</start>
        <end>556</end>
      </range>
    </lineRanges>
    <primaryLineNumber>555</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13312</key>
    <lineRanges>
      <range>
        <start>163</start>
        <end>163</end>
      </range>
    </lineRanges>
    <primaryLineNumber>163</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization|&quot; appears 10 times in this file; the first occurrence is on line 155.</message>
    <priority>NORMAL</priority>
    <key>13538</key>
    <lineRanges>
      <range>
        <start>155</start>
        <end>155</end>
      </range>
    </lineRanges>
    <primaryLineNumber>155</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13993</key>
    <lineRanges>
      <range>
        <start>133</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>133</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13255</key>
    <lineRanges>
      <range>
        <start>408</start>
        <end>410</end>
      </range>
    </lineRanges>
    <primaryLineNumber>408</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and pgpe.protection_element_id = pe.protection_element_id&quot; appears 4 times in this file; the first occurrence is on line 200.</message>
    <priority>NORMAL</priority>
    <key>13902</key>
    <lineRanges>
      <range>
        <start>200</start>
        <end>200</end>
      </range>
    </lineRanges>
    <primaryLineNumber>200</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;i&apos;..</message>
    <priority>NORMAL</priority>
    <key>13724</key>
    <lineRanges>
      <range>
        <start>2364</start>
        <end>2364</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2364</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13645</key>
    <lineRanges>
      <range>
        <start>1049</start>
        <end>1050</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1049</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13823</key>
    <lineRanges>
      <range>
        <start>3973</start>
        <end>3976</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3973</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13852</key>
    <lineRanges>
      <range>
        <start>4557</start>
        <end>4558</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4557</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13339</key>
    <lineRanges>
      <range>
        <start>371</start>
        <end>372</end>
      </range>
    </lineRanges>
    <primaryLineNumber>371</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/GroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14045</key>
    <lineRanges>
      <range>
        <start>40</start>
        <end>40</end>
      </range>
    </lineRanges>
    <primaryLineNumber>40</primaryLineNumber>
    <fileName>nih/nci/security/ws/handler/authorization/AuthorizationWebServiceRequestHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.handler.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;ErrorDetails&quot; appears 5 times in this file; the first occurrence is on line 36.</message>
    <priority>NORMAL</priority>
    <key>14008</key>
    <lineRanges>
      <range>
        <start>36</start>
        <end>36</end>
      </range>
    </lineRanges>
    <primaryLineNumber>36</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedFormalParameter</type>
    <tooltip>
Avoid passing parameters to methods or constructors and then not using those parameters.
    &lt;pre&gt;

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused constructor parameters such as &apos;member&apos;..</message>
    <priority>NORMAL</priority>
    <key>13568</key>
    <lineRanges>
      <range>
        <start>122</start>
        <end>124</end>
      </range>
    </lineRanges>
    <primaryLineNumber>122</primaryLineNumber>
    <fileName>nih/nci/security/authorization/domainobjects/UserRoleContext.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13763</key>
    <lineRanges>
      <range>
        <start>3118</start>
        <end>3123</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3118</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;ObjectUpdater|| Exception occured when updating object properties.&quot; appears 5 times in this file; the first occurrence is on line 58.</message>
    <priority>NORMAL</priority>
    <key>13997</key>
    <lineRanges>
      <range>
        <start>58</start>
        <end>58</end>
      </range>
    </lineRanges>
    <primaryLineNumber>58</primaryLineNumber>
    <fileName>nih/nci/security/util/ObjectUpdater.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13251</key>
    <lineRanges>
      <range>
        <start>352</start>
        <end>354</end>
      </range>
    </lineRanges>
    <primaryLineNumber>352</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13728</key>
    <lineRanges>
      <range>
        <start>2401</start>
        <end>2406</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2401</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13556</key>
    <lineRanges>
      <range>
        <start>49</start>
        <end>49</end>
      </range>
    </lineRanges>
    <primaryLineNumber>49</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13349</key>
    <lineRanges>
      <range>
        <start>434</start>
        <end>435</end>
      </range>
    </lineRanges>
    <primaryLineNumber>434</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 16 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13919</key>
    <lineRanges>
      <range>
        <start>403</start>
        <end>403</end>
      </range>
    </lineRanges>
    <primaryLineNumber>403</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13812</key>
    <lineRanges>
      <range>
        <start>3797</start>
        <end>3800</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3797</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13299</key>
    <lineRanges>
      <range>
        <start>142</start>
        <end>144</end>
      </range>
    </lineRanges>
    <primaryLineNumber>142</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LogoutAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13605</key>
    <lineRanges>
      <range>
        <start>314</start>
        <end>314</end>
      </range>
    </lineRanges>
    <primaryLineNumber>314</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13694</key>
    <lineRanges>
      <range>
        <start>1815</start>
        <end>1818</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1815</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13236</key>
    <lineRanges>
      <range>
        <start>188</start>
        <end>190</end>
      </range>
    </lineRanges>
    <primaryLineNumber>188</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;enumeration&apos;..</message>
    <priority>NORMAL</priority>
    <key>13412</key>
    <lineRanges>
      <range>
        <start>208</start>
        <end>208</end>
      </range>
    </lineRanges>
    <primaryLineNumber>208</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13323</key>
    <lineRanges>
      <range>
        <start>219</start>
        <end>222</end>
      </range>
    </lineRanges>
    <primaryLineNumber>219</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 23 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13856</key>
    <lineRanges>
      <range>
        <start>4599</start>
        <end>4599</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4599</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13343</key>
    <lineRanges>
      <range>
        <start>221</start>
        <end>221</end>
      </range>
    </lineRanges>
    <primaryLineNumber>221</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/PrivilegeForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13536</key>
    <lineRanges>
      <range>
        <start>55</start>
        <end>56</end>
      </range>
    </lineRanges>
    <primaryLineNumber>55</primaryLineNumber>
    <fileName>nih/nci/security/authentication/principal/BasePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization|||createObject|Failure|Error in Rolling Back Transaction|&quot; appears 9 times in this file; the first occurrence is on line 3,671.</message>
    <priority>NORMAL</priority>
    <key>13799</key>
    <lineRanges>
      <range>
        <start>3671</start>
        <end>3671</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3671</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InefficientStringBuffering</type>
    <tooltip>
Avoid concatenating non literals in a StringBuffer constructor or append().
    &lt;pre&gt;

public class Foo {
 void bar() {
  // Avoid this
  StringBuffer sb=new StringBuffer(&quot;tmp = &quot;+System.getProperty(&quot;java.io.tmpdir&quot;));
  // use instead something like this
  StringBuffer sb = new StringBuffer(&quot;tmp = &quot;);
  sb.append(System.getProperty(&quot;java.io.tmpdir&quot;));
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid concatenating nonliterals in a StringBuffer constructor or append()..</message>
    <priority>NORMAL</priority>
    <key>14004</key>
    <lineRanges>
      <range>
        <start>102</start>
        <end>102</end>
      </range>
    </lineRanges>
    <primaryLineNumber>102</primaryLineNumber>
    <fileName>nih/nci/security/util/StringUtilities.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 222 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13848</key>
    <lineRanges>
      <range>
        <start>4515</start>
        <end>4515</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4515</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13479</key>
    <lineRanges>
      <range>
        <start>240</start>
        <end>241</end>
      </range>
    </lineRanges>
    <primaryLineNumber>240</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13668</key>
    <lineRanges>
      <range>
        <start>1302</start>
        <end>1302</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1302</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13457</key>
    <lineRanges>
      <range>
        <start>205</start>
        <end>206</end>
      </range>
    </lineRanges>
    <primaryLineNumber>205</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;getAllowedLogonTime()&apos;..</message>
    <priority>NORMAL</priority>
    <key>13402</key>
    <lineRanges>
      <range>
        <start>43</start>
        <end>43</end>
      </range>
    </lineRanges>
    <primaryLineNumber>43</primaryLineNumber>
    <fileName>nih/nci/security/upt/logoninfo/LogonInfoManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.logoninfo</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13631</key>
    <lineRanges>
      <range>
        <start>674</start>
        <end>681</end>
      </range>
    </lineRanges>
    <primaryLineNumber>674</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13601</key>
    <lineRanges>
      <range>
        <start>244</start>
        <end>244</end>
      </range>
    </lineRanges>
    <primaryLineNumber>244</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13610</key>
    <lineRanges>
      <range>
        <start>334</start>
        <end>335</end>
      </range>
    </lineRanges>
    <primaryLineNumber>334</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13345</key>
    <lineRanges>
      <range>
        <start>346</start>
        <end>346</end>
      </range>
    </lineRanges>
    <primaryLineNumber>346</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13211</key>
    <lineRanges>
      <range>
        <start>284</start>
        <end>284</end>
      </range>
    </lineRanges>
    <primaryLineNumber>284</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13181</key>
    <lineRanges>
      <range>
        <start>419</start>
        <end>422</end>
      </range>
    </lineRanges>
    <primaryLineNumber>419</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;arraysf&apos;..</message>
    <priority>NORMAL</priority>
    <key>14012</key>
    <lineRanges>
      <range>
        <start>85</start>
        <end>85</end>
      </range>
    </lineRanges>
    <primaryLineNumber>85</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13497</key>
    <lineRanges>
      <range>
        <start>244</start>
        <end>244</end>
      </range>
    </lineRanges>
    <primaryLineNumber>244</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;rb&apos;..</message>
    <priority>NORMAL</priority>
    <key>13989</key>
    <lineRanges>
      <range>
        <start>82</start>
        <end>82</end>
      </range>
    </lineRanges>
    <primaryLineNumber>82</primaryLineNumber>
    <fileName>nih/nci/security/util/FileLoader.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13291</key>
    <lineRanges>
      <range>
        <start>254</start>
        <end>256</end>
      </range>
    </lineRanges>
    <primaryLineNumber>254</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13308</key>
    <lineRanges>
      <range>
        <start>155</start>
        <end>155</end>
      </range>
    </lineRanges>
    <primaryLineNumber>155</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14028</key>
    <lineRanges>
      <range>
        <start>166</start>
        <end>166</end>
      </range>
    </lineRanges>
    <primaryLineNumber>166</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;getConnection()&apos;..</message>
    <priority>NORMAL</priority>
    <key>13590</key>
    <lineRanges>
      <range>
        <start>192</start>
        <end>192</end>
      </range>
    </lineRanges>
    <primaryLineNumber>192</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 2096 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13942</key>
    <lineRanges>
      <range>
        <start>533</start>
        <end>533</end>
      </range>
    </lineRanges>
    <primaryLineNumber>533</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringToString</type>
    <tooltip>
    Avoid calling toString() on String objects; this is unnecessary.
    &lt;pre&gt;

public class Foo {
 private String baz() {
  String bar = &quot;howdy&quot;;
  return bar.toString();
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid calling toString() on String objects; this is unnecessary..</message>
    <priority>NORMAL</priority>
    <key>13429</key>
    <lineRanges>
      <range>
        <start>13</start>
        <end>13</end>
      </range>
    </lineRanges>
    <primaryLineNumber>13</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/StringUtils.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 20 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13915</key>
    <lineRanges>
      <range>
        <start>331</start>
        <end>331</end>
      </range>
    </lineRanges>
    <primaryLineNumber>331</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13516</key>
    <lineRanges>
      <range>
        <start>193</start>
        <end>194</end>
      </range>
    </lineRanges>
    <primaryLineNumber>193</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13177</key>
    <lineRanges>
      <range>
        <start>369</start>
        <end>372</end>
      </range>
    </lineRanges>
    <primaryLineNumber>369</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13690</key>
    <lineRanges>
      <range>
        <start>1705</start>
        <end>1707</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1705</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13215</key>
    <lineRanges>
      <range>
        <start>321</start>
        <end>322</end>
      </range>
    </lineRanges>
    <primaryLineNumber>321</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13807</key>
    <lineRanges>
      <range>
        <start>3724</start>
        <end>3727</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3724</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; to Group &quot; appears 7 times in this file; the first occurrence is on line 432.</message>
    <priority>NORMAL</priority>
    <key>13614</key>
    <lineRanges>
      <range>
        <start>432</start>
        <end>432</end>
      </range>
    </lineRanges>
    <primaryLineNumber>432</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13224</key>
    <lineRanges>
      <range>
        <start>409</start>
        <end>410</end>
      </range>
    </lineRanges>
    <primaryLineNumber>409</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13406</key>
    <lineRanges>
      <range>
        <start>85</start>
        <end>86</end>
      </range>
    </lineRanges>
    <primaryLineNumber>85</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;simplelistsf&apos;..</message>
    <priority>NORMAL</priority>
    <key>14016</key>
    <lineRanges>
      <range>
        <start>89</start>
        <end>89</end>
      </range>
    </lineRanges>
    <primaryLineNumber>89</primaryLineNumber>
    <fileName>nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;application-list&quot; appears 4 times in this file; the first occurrence is on line 159.</message>
    <priority>NORMAL</priority>
    <key>13972</key>
    <lineRanges>
      <range>
        <start>159</start>
        <end>159</end>
      </range>
    </lineRanges>
    <primaryLineNumber>159</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13331</key>
    <lineRanges>
      <range>
        <start>439</start>
        <end>439</end>
      </range>
    </lineRanges>
    <primaryLineNumber>439</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14032</key>
    <lineRanges>
      <range>
        <start>43</start>
        <end>43</end>
      </range>
    </lineRanges>
    <primaryLineNumber>43</primaryLineNumber>
    <fileName>nih/nci/security/ws/authorization/CheckPermissionResponse.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13228</key>
    <lineRanges>
      <range>
        <start>142</start>
        <end>144</end>
      </range>
    </lineRanges>
    <primaryLineNumber>142</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/HomeAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 734 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13938</key>
    <lineRanges>
      <range>
        <start>483</start>
        <end>483</end>
      </range>
    </lineRanges>
    <primaryLineNumber>483</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateMethod</type>
    <tooltip>
Unused Private Method detects when a private method is declared but is unused.
    &lt;pre&gt;

public class Something {
 private void foo() {} // unused
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private methods such as &apos;startSQLCapture(ByteArrayOutputStream)&apos;..</message>
    <priority>NORMAL</priority>
    <key>13425</key>
    <lineRanges>
      <range>
        <start>487</start>
        <end>487</end>
      </range>
    </lineRanges>
    <primaryLineNumber>487</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13501</key>
    <lineRanges>
      <range>
        <start>265</start>
        <end>266</end>
      </range>
    </lineRanges>
    <primaryLineNumber>265</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13740</key>
    <lineRanges>
      <range>
        <start>2631</start>
        <end>2638</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2631</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13453</key>
    <lineRanges>
      <range>
        <start>189</start>
        <end>190</end>
      </range>
    </lineRanges>
    <primaryLineNumber>189</primaryLineNumber>
    <fileName>nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13673</key>
    <lineRanges>
      <range>
        <start>1325</start>
        <end>1325</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1325</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13232</key>
    <lineRanges>
      <range>
        <start>158</start>
        <end>160</end>
      </range>
    </lineRanges>
    <primaryLineNumber>158</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13169</key>
    <lineRanges>
      <range>
        <start>304</start>
        <end>307</end>
      </range>
    </lineRanges>
    <primaryLineNumber>304</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13682</key>
    <lineRanges>
      <range>
        <start>1523</start>
        <end>1526</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1523</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13335</key>
    <lineRanges>
      <range>
        <start>490</start>
        <end>490</end>
      </range>
    </lineRanges>
    <primaryLineNumber>490</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13386</key>
    <lineRanges>
      <range>
        <start>502</start>
        <end>503</end>
      </range>
    </lineRanges>
    <primaryLineNumber>502</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13803</key>
    <lineRanges>
      <range>
        <start>3687</start>
        <end>3689</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3687</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>ForLoopsMustUseBraces</type>
    <tooltip>
Avoid using &apos;for&apos; statements without using curly braces.
       &lt;pre&gt;

public void foo() {
 for (int i=0; i&lt;42;i++)
   foo();
}

       &lt;/pre&gt;</tooltip>
    <message>Avoid using for statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13965</key>
    <lineRanges>
      <range>
        <start>137</start>
        <end>138</end>
      </range>
    </lineRanges>
    <primaryLineNumber>137</primaryLineNumber>
    <fileName>nih/nci/security/junk/RandomIntGenerator.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.junk</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13736</key>
    <lineRanges>
      <range>
        <start>2604</start>
        <end>2607</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2604</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13623</key>
    <lineRanges>
      <range>
        <start>564</start>
        <end>568</end>
      </range>
    </lineRanges>
    <primaryLineNumber>564</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13475</key>
    <lineRanges>
      <range>
        <start>185</start>
        <end>186</end>
      </range>
    </lineRanges>
    <primaryLineNumber>185</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyIfStmt</type>
    <tooltip>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    &lt;pre&gt;
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       &lt;/pre&gt;</tooltip>
    <message>Avoid empty if statements.</message>
    <priority>NORMAL</priority>
    <key>13859</key>
    <lineRanges>
      <range>
        <start>4760</start>
        <end>4763</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4760</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;targetClassAttributeName&apos;..</message>
    <priority>NORMAL</priority>
    <key>13421</key>
    <lineRanges>
      <range>
        <start>390</start>
        <end>390</end>
      </range>
    </lineRanges>
    <primaryLineNumber>390</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13677</key>
    <lineRanges>
      <range>
        <start>1396</start>
        <end>1403</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1396</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13140</key>
    <lineRanges>
      <range>
        <start>130</start>
        <end>130</end>
      </range>
    </lineRanges>
    <primaryLineNumber>130</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; pgpe.protection_element_id = pe.protection_element_id and&quot; appears 4 times in this file; the first occurrence is on line 416.</message>
    <priority>NORMAL</priority>
    <key>13930</key>
    <lineRanges>
      <range>
        <start>416</start>
        <end>416</end>
      </range>
    </lineRanges>
    <primaryLineNumber>416</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13217</key>
    <lineRanges>
      <range>
        <start>346</start>
        <end>349</end>
      </range>
    </lineRanges>
    <primaryLineNumber>346</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13338</key>
    <lineRanges>
      <range>
        <start>292</start>
        <end>292</end>
      </range>
    </lineRanges>
    <primaryLineNumber>292</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/GroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>StringInstantiation</type>
    <tooltip>
Avoid instantiating String objects; this is usually unnecessary.
    &lt;pre&gt;

public class Foo {
 private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid instantiating String objects; this is usually unnecessary..</message>
    <priority>HIGH</priority>
    <key>13366</key>
    <lineRanges>
      <range>
        <start>325</start>
        <end>325</end>
      </range>
    </lineRanges>
    <primaryLineNumber>325</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13456</key>
    <lineRanges>
      <range>
        <start>212</start>
        <end>213</end>
      </range>
    </lineRanges>
    <primaryLineNumber>212</primaryLineNumber>
    <fileName>nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14024</key>
    <lineRanges>
      <range>
        <start>45</start>
        <end>45</end>
      </range>
    </lineRanges>
    <primaryLineNumber>45</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginResponse.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13732</key>
    <lineRanges>
      <range>
        <start>2487</start>
        <end>2490</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2487</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13511</key>
    <lineRanges>
      <range>
        <start>381</start>
        <end>382</end>
      </range>
    </lineRanges>
    <primaryLineNumber>381</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13874</key>
    <lineRanges>
      <range>
        <start>5003</start>
        <end>5004</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5003</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13712</key>
    <lineRanges>
      <range>
        <start>2130</start>
        <end>2135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2130</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13520</key>
    <lineRanges>
      <range>
        <start>221</start>
        <end>222</end>
      </range>
    </lineRanges>
    <primaryLineNumber>221</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13162</key>
    <lineRanges>
      <range>
        <start>217</start>
        <end>218</end>
      </range>
    </lineRanges>
    <primaryLineNumber>217</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13199</key>
    <lineRanges>
      <range>
        <start>158</start>
        <end>161</end>
      </range>
    </lineRanges>
    <primaryLineNumber>158</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 5 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13937</key>
    <lineRanges>
      <range>
        <start>450</start>
        <end>450</end>
      </range>
    </lineRanges>
    <primaryLineNumber>450</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_role r,&quot; appears 4 times in this file; the first occurrence is on line 410.</message>
    <priority>NORMAL</priority>
    <key>13926</key>
    <lineRanges>
      <range>
        <start>410</start>
        <end>410</end>
      </range>
    </lineRanges>
    <primaryLineNumber>410</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13775</key>
    <lineRanges>
      <range>
        <start>3278</start>
        <end>3281</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3278</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13637</key>
    <lineRanges>
      <range>
        <start>820</start>
        <end>827</end>
      </range>
    </lineRanges>
    <primaryLineNumber>820</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13303</key>
    <lineRanges>
      <range>
        <start>142</start>
        <end>144</end>
      </range>
    </lineRanges>
    <primaryLineNumber>142</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13144</key>
    <lineRanges>
      <range>
        <start>153</start>
        <end>156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>153</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13871</key>
    <lineRanges>
      <range>
        <start>4955</start>
        <end>4956</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4955</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13240</key>
    <lineRanges>
      <range>
        <start>229</start>
        <end>231</end>
      </range>
    </lineRanges>
    <primaryLineNumber>229</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            AND rp.privilege_id = p.privilege_id&quot; appears 5 times in this file; the first occurrence is on line 548.</message>
    <priority>NORMAL</priority>
    <key>13953</key>
    <lineRanges>
      <range>
        <start>548</start>
        <end>548</end>
      </range>
    </lineRanges>
    <primaryLineNumber>548</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 109 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13883</key>
    <lineRanges>
      <range>
        <start>149</start>
        <end>149</end>
      </range>
    </lineRanges>
    <primaryLineNumber>149</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13795</key>
    <lineRanges>
      <range>
        <start>3625</start>
        <end>3626</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3625</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13166</key>
    <lineRanges>
      <range>
        <start>257</start>
        <end>258</end>
      </range>
    </lineRanges>
    <primaryLineNumber>257</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 6 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13878</key>
    <lineRanges>
      <range>
        <start>109</start>
        <end>109</end>
      </range>
    </lineRanges>
    <primaryLineNumber>109</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13307</key>
    <lineRanges>
      <range>
        <start>153</start>
        <end>153</end>
      </range>
    </lineRanges>
    <primaryLineNumber>153</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13626</key>
    <lineRanges>
      <range>
        <start>646</start>
        <end>649</end>
      </range>
    </lineRanges>
    <primaryLineNumber>646</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13815</key>
    <lineRanges>
      <range>
        <start>3823</start>
        <end>3826</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3823</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; csm_pg_pe pgpe,&quot; appears 4 times in this file; the first occurrence is on line 406.</message>
    <priority>NORMAL</priority>
    <key>13922</key>
    <lineRanges>
      <range>
        <start>406</start>
        <end>406</end>
      </range>
    </lineRanges>
    <primaryLineNumber>406</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13819</key>
    <lineRanges>
      <range>
        <start>3914</start>
        <end>3917</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3914</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13413</key>
    <lineRanges>
      <range>
        <start>249</start>
        <end>250</end>
      </range>
    </lineRanges>
    <primaryLineNumber>249</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13288</key>
    <lineRanges>
      <range>
        <start>218</start>
        <end>220</end>
      </range>
    </lineRanges>
    <primaryLineNumber>218</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13315</key>
    <lineRanges>
      <range>
        <start>169</start>
        <end>169</end>
      </range>
    </lineRanges>
    <primaryLineNumber>169</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13828</key>
    <lineRanges>
      <range>
        <start>4048</start>
        <end>4054</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4048</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13371</key>
    <lineRanges>
      <range>
        <start>447</start>
        <end>448</end>
      </range>
    </lineRanges>
    <primaryLineNumber>447</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authorization|||assignGroupRoleToProtectionGroup|Failure|Error in Closing Session |&quot; appears 5 times in this file; the first occurrence is on line 670.</message>
    <priority>NORMAL</priority>
    <key>13630</key>
    <lineRanges>
      <range>
        <start>670</start>
        <end>670</end>
      </range>
    </lineRanges>
    <primaryLineNumber>670</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13633</key>
    <lineRanges>
      <range>
        <start>730</start>
        <end>735</end>
      </range>
    </lineRanges>
    <primaryLineNumber>730</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13430</key>
    <lineRanges>
      <range>
        <start>173</start>
        <end>173</end>
      </range>
    </lineRanges>
    <primaryLineNumber>173</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;_htConnProp&apos;..</message>
    <priority>NORMAL</priority>
    <key>13587</key>
    <lineRanges>
      <range>
        <start>132</start>
        <end>132</end>
      </range>
    </lineRanges>
    <primaryLineNumber>132</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>CollapsibleIfStatements</type>
    <tooltip>
Sometimes two &apos;if&apos; statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      &lt;pre&gt;
  
public class Foo {
 void bar() {
  if (x) {
   if (y) {
    // do stuff
   }
  }
 }
}
 
      &lt;/pre&gt;</tooltip>
    <message>These nested if statements could be combined.</message>
    <priority>NORMAL</priority>
    <key>13564</key>
    <lineRanges>
      <range>
        <start>159</start>
        <end>162</end>
      </range>
    </lineRanges>
    <primaryLineNumber>159</primaryLineNumber>
    <fileName>nih/nci/security/authorization/attributeLevel/UserClassAttributeMapCache.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13863</key>
    <lineRanges>
      <range>
        <start>4809</start>
        <end>4816</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4809</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 20 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13961</key>
    <lineRanges>
      <range>
        <start>673</start>
        <end>673</end>
      </range>
    </lineRanges>
    <primaryLineNumber>673</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13752</key>
    <lineRanges>
      <range>
        <start>2831</start>
        <end>2834</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2831</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13756</key>
    <lineRanges>
      <range>
        <start>2928</start>
        <end>2931</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2928</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13284</key>
    <lineRanges>
      <range>
        <start>158</start>
        <end>160</end>
      </range>
    </lineRanges>
    <primaryLineNumber>158</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 20 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13934</key>
    <lineRanges>
      <range>
        <start>424</start>
        <end>424</end>
      </range>
    </lineRanges>
    <primaryLineNumber>424</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>UselessOverridingMethod</type>
    <tooltip>
The overriding method merely calls the same method defined in a superclass
        &lt;pre&gt;
public void foo(String bar) {
    super.foo(bar);      //Why bother overriding?
}
        &lt;/pre&gt;</tooltip>
    <message>Overriding method merely calls super.</message>
    <priority>NORMAL</priority>
    <key>13578</key>
    <lineRanges>
      <range>
        <start>122</start>
        <end>124</end>
      </range>
    </lineRanges>
    <primaryLineNumber>122</primaryLineNumber>
    <fileName>nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13609</key>
    <lineRanges>
      <range>
        <start>328</start>
        <end>328</end>
      </range>
    </lineRanges>
    <primaryLineNumber>328</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13319</key>
    <lineRanges>
      <range>
        <start>153</start>
        <end>154</end>
      </range>
    </lineRanges>
    <primaryLineNumber>153</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/ProtectionGroupAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13832</key>
    <lineRanges>
      <range>
        <start>4127</start>
        <end>4132</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4127</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14020</key>
    <lineRanges>
      <range>
        <start>93</start>
        <end>93</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>nih/nci/security/ws/authentication/LoginRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13507</key>
    <lineRanges>
      <range>
        <start>333</start>
        <end>334</end>
      </range>
    </lineRanges>
    <primaryLineNumber>333</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13362</key>
    <lineRanges>
      <range>
        <start>304</start>
        <end>304</end>
      </range>
    </lineRanges>
    <primaryLineNumber>304</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13708</key>
    <lineRanges>
      <range>
        <start>2076</start>
        <end>2078</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2076</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;messages&apos;..</message>
    <priority>NORMAL</priority>
    <key>13195</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authentication|&quot; appears 5 times in this file; the first occurrence is on line 185.</message>
    <priority>NORMAL</priority>
    <key>13452</key>
    <lineRanges>
      <range>
        <start>185</start>
        <end>185</end>
      </range>
    </lineRanges>
    <primaryLineNumber>185</primaryLineNumber>
    <fileName>nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13244</key>
    <lineRanges>
      <range>
        <start>255</start>
        <end>257</end>
      </range>
    </lineRanges>
    <primaryLineNumber>255</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13792</key>
    <lineRanges>
      <range>
        <start>3543</start>
        <end>3544</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3543</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13599</key>
    <lineRanges>
      <range>
        <start>233</start>
        <end>234</end>
      </range>
    </lineRanges>
    <primaryLineNumber>233</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;attemptToCast&apos;..</message>
    <priority>NORMAL</priority>
    <key>13438</key>
    <lineRanges>
      <range>
        <start>93</start>
        <end>93</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>nih/nci/security/acegi/CSMAfterInvocationProviderManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13278</key>
    <lineRanges>
      <range>
        <start>661</start>
        <end>664</end>
      </range>
    </lineRanges>
    <primaryLineNumber>661</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            csm_privilege p,&quot; appears 5 times in this file; the first occurrence is on line 538.</message>
    <priority>NORMAL</priority>
    <key>13946</key>
    <lineRanges>
      <range>
        <start>538</start>
        <end>538</end>
      </range>
    </lineRanges>
    <primaryLineNumber>538</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13658</key>
    <lineRanges>
      <range>
        <start>1196</start>
        <end>1197</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1196</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13469</key>
    <lineRanges>
      <range>
        <start>131</start>
        <end>131</end>
      </range>
    </lineRanges>
    <primaryLineNumber>131</primaryLineNumber>
    <fileName>nih/nci/security/authentication/LockoutManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13887</key>
    <lineRanges>
      <range>
        <start>151</start>
        <end>151</end>
      </range>
    </lineRanges>
    <primaryLineNumber>151</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;APPLICATION_ID&quot; appears 6 times in this file; the first occurrence is on line 48.</message>
    <priority>NORMAL</priority>
    <key>13570</key>
    <lineRanges>
      <range>
        <start>48</start>
        <end>48</end>
      </range>
    </lineRanges>
    <primaryLineNumber>48</primaryLineNumber>
    <fileName>nih/nci/security/authorization/instancelevel/InstanceLevelSecurityHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.instancelevel</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13461</key>
    <lineRanges>
      <range>
        <start>244</start>
        <end>244</end>
      </range>
    </lineRanges>
    <primaryLineNumber>244</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13354</key>
    <lineRanges>
      <range>
        <start>333</start>
        <end>333</end>
      </range>
    </lineRanges>
    <primaryLineNumber>333</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13717</key>
    <lineRanges>
      <range>
        <start>2234</start>
        <end>2237</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2234</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13375</key>
    <lineRanges>
      <range>
        <start>509</start>
        <end>510</end>
      </range>
    </lineRanges>
    <primaryLineNumber>509</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;application&quot; appears 4 times in this file; the first occurrence is on line 160.</message>
    <priority>NORMAL</priority>
    <key>13973</key>
    <lineRanges>
      <range>
        <start>160</start>
        <end>160</end>
      </range>
    </lineRanges>
    <primaryLineNumber>160</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AppendCharacterWithChar</type>
    <tooltip>
Avoid concatenating characters as strings in StringBuffer.append.
    &lt;pre&gt;

public class Foo {
 void bar() {
  StringBuffer sb=new StringBuffer();
  // Avoid this
  sb.append(&quot;a&quot;);

  // use instead something like this
  StringBuffer sb=new StringBuffer();
  sb.append(&apos;a&apos;);
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid appending characters as strings in StringBuffer.append..</message>
    <priority>NORMAL</priority>
    <key>13444</key>
    <lineRanges>
      <range>
        <start>83</start>
        <end>83</end>
      </range>
    </lineRanges>
    <primaryLineNumber>83</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedPrivateField</type>
    <tooltip>
Detects when a private field is declared and/or assigned a value, but not used.
    &lt;pre&gt;

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused private fields such as &apos;loginInfo&apos;..</message>
    <priority>NORMAL</priority>
    <key>13398</key>
    <lineRanges>
      <range>
        <start>14</start>
        <end>14</end>
      </range>
    </lineRanges>
    <primaryLineNumber>14</primaryLineNumber>
    <fileName>nih/nci/security/upt/logoninfo/LogonInfoManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.logoninfo</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13434</key>
    <lineRanges>
      <range>
        <start>353</start>
        <end>353</end>
      </range>
    </lineRanges>
    <primaryLineNumber>353</primaryLineNumber>
    <fileName>nih/nci/security/SecurityServiceProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot; and privilege name &quot; appears 10 times in this file; the first occurrence is on line 1,186.</message>
    <priority>NORMAL</priority>
    <key>13654</key>
    <lineRanges>
      <range>
        <start>1186</start>
        <end>1186</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1186</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 205 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13771</key>
    <lineRanges>
      <range>
        <start>3245</start>
        <end>3245</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3245</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13700</key>
    <lineRanges>
      <range>
        <start>1928</start>
        <end>1931</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1928</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;str&apos;..</message>
    <priority>NORMAL</priority>
    <key>13187</key>
    <lineRanges>
      <range>
        <start>500</start>
        <end>500</end>
      </range>
    </lineRanges>
    <primaryLineNumber>500</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13266</key>
    <lineRanges>
      <range>
        <start>517</start>
        <end>518</end>
      </range>
    </lineRanges>
    <primaryLineNumber>517</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;Authentication|||login|Failure| KeyStore could not be loaded.&quot; appears 8 times in this file; the first occurrence is on line 217.</message>
    <priority>NORMAL</priority>
    <key>13524</key>
    <lineRanges>
      <range>
        <start>217</start>
        <end>217</end>
      </range>
    </lineRanges>
    <primaryLineNumber>217</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13977</key>
    <lineRanges>
      <range>
        <start>226</start>
        <end>226</end>
      </range>
    </lineRanges>
    <primaryLineNumber>226</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 170 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13780</key>
    <lineRanges>
      <range>
        <start>3356</start>
        <end>3356</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3356</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 18 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13957</key>
    <lineRanges>
      <range>
        <start>600</start>
        <end>600</end>
      </range>
    </lineRanges>
    <primaryLineNumber>600</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>14036</key>
    <lineRanges>
      <range>
        <start>33</start>
        <end>33</end>
      </range>
    </lineRanges>
    <primaryLineNumber>33</primaryLineNumber>
    <fileName>nih/nci/security/ws/common/ErrorCodes.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.common</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13465</key>
    <lineRanges>
      <range>
        <start>262</start>
        <end>263</end>
      </range>
    </lineRanges>
    <primaryLineNumber>262</primaryLineNumber>
    <fileName>nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13662</key>
    <lineRanges>
      <range>
        <start>1226</start>
        <end>1227</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1226</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13867</key>
    <lineRanges>
      <range>
        <start>4899</start>
        <end>4905</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4899</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13358</key>
    <lineRanges>
      <range>
        <start>422</start>
        <end>423</end>
      </range>
    </lineRanges>
    <primaryLineNumber>422</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;http://security.nci.nih.gov/ws/common&quot; appears 4 times in this file; the first occurrence is on line 109.</message>
    <priority>NORMAL</priority>
    <key>14040</key>
    <lineRanges>
      <range>
        <start>109</start>
        <end>109</end>
      </range>
    </lineRanges>
    <primaryLineNumber>109</primaryLineNumber>
    <fileName>nih/nci/security/ws/common/ErrorDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.common</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13394</key>
    <lineRanges>
      <range>
        <start>577</start>
        <end>578</end>
      </range>
    </lineRanges>
    <primaryLineNumber>577</primaryLineNumber>
    <fileName>nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>ConsecutiveLiteralAppends</type>
    <tooltip>
Consecutively calling StringBuffer.append with String literals
    &lt;pre&gt;

public class Foo {
 private void bar() {
   StringBuffer buf = new StringBuffer();
   buf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;); //bad
   buf.append(&quot;Hello World&quot;);//good
 }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer.append is called 3 consecutive times with literal Strings. Use a single append with a single String..</message>
    <priority>NORMAL</priority>
    <key>13551</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>nih/nci/security/authorization/ObjectAccessMap.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13254</key>
    <lineRanges>
      <range>
        <start>395</start>
        <end>397</end>
      </range>
    </lineRanges>
    <primaryLineNumber>395</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Basic Rules</category>
    <type>EmptyCatchBlock</type>
    <tooltip>
Empty Catch Block finds instances where an exception is caught,
but nothing is done.  In most circumstances, this swallows an exception
which should either be acted on or reported.
      &lt;pre&gt;
  
public void doSomething() {
  try {
    FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);
  } catch (IOException ioe) {
      // not good
  }
}
 
      &lt;/pre&gt;</tooltip>
    <message>Avoid empty catch blocks.</message>
    <priority>NORMAL</priority>
    <key>13448</key>
    <lineRanges>
      <range>
        <start>231</start>
        <end>233</end>
      </range>
    </lineRanges>
    <primaryLineNumber>231</primaryLineNumber>
    <fileName>nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>InsufficientStringBufferDeclaration</type>
    <tooltip>
Failing to pre-size a StringBuffer properly could cause it to re-size many times
during runtime. This rule checks the characters that are actually passed into
StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An
empty StringBuffer constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    &lt;pre&gt;

public class Foo {
    void bar() {
        StringBuffer bad = new StringBuffer();
        bad.append(&quot;This is a long string, will exceed the default 16 characters&quot;);//bad
        StringBuffer good = new StringBuffer(41);
        good.append(&quot;This is a long string, which is pre-sized&quot;);//good
    }
}

    &lt;/pre&gt;</tooltip>
    <message>StringBuffer constructor is initialized with size 16, but has at least 820 characters appended..</message>
    <priority>NORMAL</priority>
    <key>13910</key>
    <lineRanges>
      <range>
        <start>259</start>
        <end>259</end>
      </range>
    </lineRanges>
    <primaryLineNumber>259</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13704</key>
    <lineRanges>
      <range>
        <start>1991</start>
        <end>1994</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1991</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13191</key>
    <lineRanges>
      <range>
        <start>536</start>
        <end>537</end>
      </range>
    </lineRanges>
    <primaryLineNumber>536</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13484</key>
    <lineRanges>
      <range>
        <start>300</start>
        <end>300</end>
      </range>
    </lineRanges>
    <primaryLineNumber>300</primaryLineNumber>
    <fileName>nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13650</key>
    <lineRanges>
      <range>
        <start>1114</start>
        <end>1115</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1114</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13262</key>
    <lineRanges>
      <range>
        <start>480</start>
        <end>483</end>
      </range>
    </lineRanges>
    <primaryLineNumber>480</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13784</key>
    <lineRanges>
      <range>
        <start>3390</start>
        <end>3393</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3390</primaryLineNumber>
    <fileName>nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13528</key>
    <lineRanges>
      <range>
        <start>307</start>
        <end>308</end>
      </range>
    </lineRanges>
    <primaryLineNumber>307</primaryLineNumber>
    <fileName>nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13417</key>
    <lineRanges>
      <range>
        <start>319</start>
        <end>319</end>
      </range>
    </lineRanges>
    <primaryLineNumber>319</primaryLineNumber>
    <fileName>nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfElseStmtsMustUseBraces</type>
    <tooltip>
Avoid using if..else statements without using curly braces.
       &lt;pre&gt;

 public void doSomething() {
   // this is OK
   if (foo) x++;
   // but this is not
   if (foo)
       x=x+1;
   else
       x=x-1;
 }

       &lt;/pre&gt;</tooltip>
    <message>Avoid using if...else statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13981</key>
    <lineRanges>
      <range>
        <start>236</start>
        <end>236</end>
      </range>
    </lineRanges>
    <primaryLineNumber>236</primaryLineNumber>
    <fileName>nih/nci/security/system/ApplicationSecurityConfigurationParser.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13158</key>
    <lineRanges>
      <range>
        <start>191</start>
        <end>192</end>
      </range>
    </lineRanges>
    <primaryLineNumber>191</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13547</key>
    <lineRanges>
      <range>
        <start>323</start>
        <end>324</end>
      </range>
    </lineRanges>
    <primaryLineNumber>323</primaryLineNumber>
    <fileName>nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </bug>
  <bug>
    <category>Braces Rules</category>
    <type>IfStmtsMustUseBraces</type>
    <tooltip>
Avoid using if statements without using curly braces.
     &lt;pre&gt;
 
 public class Foo {
   public void bar() {
     int x = 0;
     if (foo) x++;
   }
 }
 
     &lt;/pre&gt;</tooltip>
    <message>Avoid using if statements without curly braces.</message>
    <priority>NORMAL</priority>
    <key>13258</key>
    <lineRanges>
      <range>
        <start>438</start>
        <end>441</end>
      </range>
    </lineRanges>
    <primaryLineNumber>438</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>Unused Code Rules</category>
    <type>UnusedLocalVariable</type>
    <tooltip>
Detects when a local variable is declared and/or assigned, but not used.
    &lt;pre&gt;

public class Foo {
 public void doSomething() {
  int i = 5; // Unused
 }
}

    &lt;/pre&gt;</tooltip>
    <message>Avoid unused local variables such as &apos;errors&apos;..</message>
    <priority>NORMAL</priority>
    <key>13152</key>
    <lineRanges>
      <range>
        <start>156</start>
        <end>156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>156</primaryLineNumber>
    <fileName>nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </bug>
  <bug>
    <category>String and StringBuffer Rules</category>
    <type>AvoidDuplicateLiterals</type>
    <tooltip>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    &lt;pre&gt;

public class Foo {
 private void bar() {
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
    buz(&quot;Howdy&quot;);
 }
 private void buz(String x) {}
}

    &lt;/pre&gt;</tooltip>
    <message>The String literal &quot;            csm_user_group_role_pg ugrpg&quot; appears 5 times in this file; the first occurrence is on line 545.</message>
    <priority>NORMAL</priority>
    <key>13950</key>
    <lineRanges>
      <range>
        <start>545</start>
        <end>545</end>
      </range>
    </lineRanges>
    <primaryLineNumber>545</primaryLineNumber>
    <fileName>nih/nci/security/dao/Queries.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </bug>
</annotation-array>