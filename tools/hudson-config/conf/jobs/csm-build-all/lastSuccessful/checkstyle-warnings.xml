<?xml version='1.0' encoding='UTF-8'?>

<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC, SAIC-Frederick

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/common-security-module/LICENSE.txt for details.
L-->

<annotation-array>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 15 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1653</key>
    <lineRanges>
      <range>
        <start>252</start>
        <end>252</end>
      </range>
    </lineRanges>
    <primaryLineNumber>252</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1597</key>
    <lineRanges>
      <range>
        <start>47</start>
        <end>47</end>
      </range>
    </lineRanges>
    <primaryLineNumber>47</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/CSMAfterInvocationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 288,000 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1561</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSConfigurationException.</message>
    <priority>HIGH</priority>
    <key>1614</key>
    <lineRanges>
      <range>
        <start>98</start>
        <end>98</end>
      </range>
    </lineRanges>
    <primaryLineNumber>98</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1617</key>
    <lineRanges>
      <range>
        <start>164</start>
        <end>164</end>
      </range>
    </lineRanges>
    <primaryLineNumber>164</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1658</key>
    <lineRanges>
      <range>
        <start>581</start>
        <end>581</end>
      </range>
    </lineRanges>
    <primaryLineNumber>581</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 16 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1562</key>
    <lineRanges>
      <range>
        <start>124</start>
        <end>124</end>
      </range>
    </lineRanges>
    <primaryLineNumber>124</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/MenuSelectionAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1688</key>
    <lineRanges>
      <range>
        <start>4320</start>
        <end>4320</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4320</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.Subject.</message>
    <priority>HIGH</priority>
    <key>1707</key>
    <lineRanges>
      <range>
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/exceptions/CSLoginException.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.exceptions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.AuthorizationServiceException.</message>
    <priority>HIGH</priority>
    <key>1595</key>
    <lineRanges>
      <range>
        <start>15</start>
        <end>15</end>
      </range>
    </lineRanges>
    <primaryLineNumber>15</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/CSMAfterInvocationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 12 (max allowed is 7) classes [ActionError, ActionErrors, Application, ApplicationSearchCriteria, ArrayList, FormElement, ProtectionElement, ProtectionElementSearchCriteria, SearchResult, SimpleDateFormat, User, UserSearchCriteria].</message>
    <priority>HIGH</priority>
    <key>1563</key>
    <lineRanges>
      <range>
        <start>132</start>
        <end>132</end>
      </range>
    </lineRanges>
    <primaryLineNumber>132</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1627</key>
    <lineRanges>
      <range>
        <start>49</start>
        <end>49</end>
      </range>
    </lineRanges>
    <primaryLineNumber>49</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/BasePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1659</key>
    <lineRanges>
      <range>
        <start>763</start>
        <end>763</end>
      </range>
    </lineRanges>
    <primaryLineNumber>763</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1624</key>
    <lineRanges>
      <range>
        <start>170</start>
        <end>170</end>
      </range>
    </lineRanges>
    <primaryLineNumber>170</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 32 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1560</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 11 (max allowed is 7) classes [AuthorizationDAOImpl, CSTransactionException, Date, Group, Privilege, ProtectionElement, ProtectionElementSearchCriteria, ProtectionGroup, ProtectionGroupSearchCriteria, Role, java.util.Date].</message>
    <priority>HIGH</priority>
    <key>1708</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/provisioning/AuthorizationManagerImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.provisioning</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1714</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 880 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1613</key>
    <lineRanges>
      <range>
        <start>188</start>
        <end>188</end>
      </range>
    </lineRanges>
    <primaryLineNumber>188</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 18 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1686</key>
    <lineRanges>
      <range>
        <start>3737</start>
        <end>3737</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3737</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>BooleanExpressionComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Restrict the number of number of &lt;span class=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;, &lt;span class=&quot;code&quot;&gt;||&lt;/span&gt;,&lt;span class=&quot;code&quot;&gt;&amp;amp;&lt;/span&gt;, &lt;span class=&quot;code&quot;&gt;|&lt;/span&gt;
          and &lt;span class=&quot;code&quot;&gt;^&lt;/span&gt; in an expression.&lt;/p&gt;&lt;p&gt;
          Rationale: Too many conditions leads to code that is difficult
          to read and hence debug and maintain.&lt;/p&gt;&lt;p&gt;
          Note that the operators &lt;span class=&quot;code&quot;&gt;&amp;amp;&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt;|&lt;/span&gt; are not only integer bitwise operators, they are also the &lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2&quot;&gt;
          non-shortcut versions&lt;/a&gt; of the boolean operators&lt;span class=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span class=&quot;code&quot;&gt;||&lt;/span&gt;.&lt;/p&gt;</tooltip>
    <message>Boolean expression complexity is 9 (max allowed is 5).</message>
    <priority>HIGH</priority>
    <key>1565</key>
    <lineRanges>
      <range>
        <start>350</start>
        <end>350</end>
      </range>
    </lineRanges>
    <primaryLineNumber>350</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 22 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1713</key>
    <lineRanges>
      <range>
        <start>10</start>
        <end>10</end>
      </range>
    </lineRanges>
    <primaryLineNumber>10</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 208 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1693</key>
    <lineRanges>
      <range>
        <start>4819</start>
        <end>4819</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4819</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 15 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1558</key>
    <lineRanges>
      <range>
        <start>639</start>
        <end>639</end>
      </range>
    </lineRanges>
    <primaryLineNumber>639</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1649</key>
    <lineRanges>
      <range>
        <start>92</start>
        <end>92</end>
      </range>
    </lineRanges>
    <primaryLineNumber>92</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAO.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 17 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1716</key>
    <lineRanges>
      <range>
        <start>90</start>
        <end>90</end>
      </range>
    </lineRanges>
    <primaryLineNumber>90</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/authentication/LoginRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authentication</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.providers.AuthenticationProvider.</message>
    <priority>HIGH</priority>
    <key>1598</key>
    <lineRanges>
      <range>
        <start>15</start>
        <end>15</end>
      </range>
    </lineRanges>
    <primaryLineNumber>15</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 320 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1662</key>
    <lineRanges>
      <range>
        <start>1032</start>
        <end>1032</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1032</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1675</key>
    <lineRanges>
      <range>
        <start>2647</start>
        <end>2647</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2647</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSConfigurationException.</message>
    <priority>HIGH</priority>
    <key>1620</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/RDBMSLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.Subject.</message>
    <priority>HIGH</priority>
    <key>1631</key>
    <lineRanges>
      <range>
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/FirstNamePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1663</key>
    <lineRanges>
      <range>
        <start>1145</start>
        <end>1145</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1145</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.ws.common.ErrorDetails.</message>
    <priority>HIGH</priority>
    <key>1719</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/handler/WebServiceRequestHandler.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.handler</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1687</key>
    <lineRanges>
      <range>
        <start>4193</start>
        <end>4193</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4193</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [ArrayList, FormElement, ProtectionElement, ProtectionElementSearchCriteria, ProtectionGroup, ProtectionGroupSearchCriteria, SearchResult, SimpleDateFormat].</message>
    <priority>HIGH</priority>
    <key>1570</key>
    <lineRanges>
      <range>
        <start>128</start>
        <end>128</end>
      </range>
    </lineRanges>
    <primaryLineNumber>128</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/ProtectionGroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1676</key>
    <lineRanges>
      <range>
        <start>2856</start>
        <end>2856</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2856</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1564</key>
    <lineRanges>
      <range>
        <start>342</start>
        <end>342</end>
      </range>
    </lineRanges>
    <primaryLineNumber>342</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/ApplicationForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 320 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1664</key>
    <lineRanges>
      <range>
        <start>1145</start>
        <end>1145</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1145</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSException.</message>
    <priority>HIGH</priority>
    <key>1618</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/LDAPLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.UserProvisioningManager.</message>
    <priority>HIGH</priority>
    <key>1591</key>
    <lineRanges>
      <range>
        <start>106</start>
        <end>106</end>
      </range>
    </lineRanges>
    <primaryLineNumber>106</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthorizationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [ActionError, ActionErrors, ActionMessage, ActionMessages, ArrayList, File, FileOutputStream, FormFile].</message>
    <priority>HIGH</priority>
    <key>1554</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 23 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1559</key>
    <lineRanges>
      <range>
        <start>131</start>
        <end>131</end>
      </range>
    </lineRanges>
    <primaryLineNumber>131</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/LoginAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1681</key>
    <lineRanges>
      <range>
        <start>3342</start>
        <end>3342</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3342</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 15 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1550</key>
    <lineRanges>
      <range>
        <start>463</start>
        <end>463</end>
      </range>
    </lineRanges>
    <primaryLineNumber>463</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1661</key>
    <lineRanges>
      <range>
        <start>1032</start>
        <end>1032</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1032</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1553</key>
    <lineRanges>
      <range>
        <start>259</start>
        <end>259</end>
      </range>
    </lineRanges>
    <primaryLineNumber>259</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 29 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1717</key>
    <lineRanges>
      <range>
        <start>162</start>
        <end>162</end>
      </range>
    </lineRanges>
    <primaryLineNumber>162</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/authorization/CheckPermissionRequest.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.authorization</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.authorization.domainobjects.ProtectionGroupRoleContext.</message>
    <priority>HIGH</priority>
    <key>1551</key>
    <lineRanges>
      <range>
        <start>93</start>
        <end>93</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 21 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1594</key>
    <lineRanges>
      <range>
        <start>164</start>
        <end>164</end>
      </range>
    </lineRanges>
    <primaryLineNumber>164</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthorizationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - java.util.*.</message>
    <priority>HIGH</priority>
    <key>1699</key>
    <lineRanges>
      <range>
        <start>92</start>
        <end>92</end>
      </range>
    </lineRanges>
    <primaryLineNumber>92</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/SearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 23 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1574</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [ArrayList, FormElement, Privilege, PrivilegeSearchCriteria, Role, RoleSearchCriteria, SearchResult, SimpleDateFormat].</message>
    <priority>HIGH</priority>
    <key>1571</key>
    <lineRanges>
      <range>
        <start>128</start>
        <end>128</end>
      </range>
    </lineRanges>
    <primaryLineNumber>128</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/RoleForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.Subject.</message>
    <priority>HIGH</priority>
    <key>1635</key>
    <lineRanges>
      <range>
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/LoginIdPrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.util.TreeSet.</message>
    <priority>HIGH</priority>
    <key>1552</key>
    <lineRanges>
      <range>
        <start>107</start>
        <end>107</end>
      </range>
    </lineRanges>
    <primaryLineNumber>107</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/CommonDoubleAssociationAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1700</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/UserSearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 13 (max allowed is 7) classes [ArrayList, FormElement, Group, GroupSearchCriteria, HashSet, ProtectionGroup, ProtectionGroupSearchCriteria, Role, RoleSearchCriteria, SearchResult, SimpleDateFormat, User, UserSearchCriteria].</message>
    <priority>HIGH</priority>
    <key>1573</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.provisioning.AuthorizationManagerImpl.</message>
    <priority>HIGH</priority>
    <key>1636</key>
    <lineRanges>
      <range>
        <start>98</start>
        <end>98</end>
      </range>
    </lineRanges>
    <primaryLineNumber>98</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/AuthorizationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1696</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/ProtectionElementSearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [File, FileInputStream, Hashtable, KeyStoreException, LoginException, Principal, StringTokenizer, Vector].</message>
    <priority>HIGH</priority>
    <key>1622</key>
    <lineRanges>
      <range>
        <start>81</start>
        <end>81</end>
      </range>
    </lineRanges>
    <primaryLineNumber>81</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1632</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/LastNamePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [ArrayList, FormElement, ProtectionElement, ProtectionElementSearchCriteria, ProtectionGroup, ProtectionGroupSearchCriteria, SearchResult, SimpleDateFormat].</message>
    <priority>HIGH</priority>
    <key>1572</key>
    <lineRanges>
      <range>
        <start>128</start>
        <end>128</end>
      </range>
    </lineRanges>
    <primaryLineNumber>128</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/SearchProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.ConfigAttributeEditor.</message>
    <priority>HIGH</priority>
    <key>1596</key>
    <lineRanges>
      <range>
        <start>18</start>
        <end>18</end>
      </range>
    </lineRanges>
    <primaryLineNumber>18</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/CSMAfterInvocationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>RedundantImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks for redundant import statements. An import statement is
          considered redundant if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is a duplicate of another import. This is, when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package, e.g.  importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Duplicate import to line 94 - org.apache.log4j.Logger.</message>
    <priority>HIGH</priority>
    <key>1549</key>
    <lineRanges>
      <range>
        <start>109</start>
        <end>109</end>
      </range>
    </lineRanges>
    <primaryLineNumber>109</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSException.</message>
    <priority>HIGH</priority>
    <key>1621</key>
    <lineRanges>
      <range>
        <start>100</start>
        <end>100</end>
      </range>
    </lineRanges>
    <primaryLineNumber>100</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/RDBMSLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1610</key>
    <lineRanges>
      <range>
        <start>202</start>
        <end>202</end>
      </range>
    </lineRanges>
    <primaryLineNumber>202</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.SecurityServiceProvider.</message>
    <priority>HIGH</priority>
    <key>1593</key>
    <lineRanges>
      <range>
        <start>107</start>
        <end>107</end>
      </range>
    </lineRanges>
    <primaryLineNumber>107</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthorizationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1642</key>
    <lineRanges>
      <range>
        <start>311</start>
        <end>311</end>
      </range>
    </lineRanges>
    <primaryLineNumber>311</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/ProtectionGroup.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 18 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1685</key>
    <lineRanges>
      <range>
        <start>3640</start>
        <end>3640</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3640</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 14 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1654</key>
    <lineRanges>
      <range>
        <start>353</start>
        <end>353</end>
      </range>
    </lineRanges>
    <primaryLineNumber>353</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 21 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1611</key>
    <lineRanges>
      <range>
        <start>275</start>
        <end>275</end>
      </range>
    </lineRanges>
    <primaryLineNumber>275</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.upt.constants.DisplayConstants.</message>
    <priority>HIGH</priority>
    <key>1583</key>
    <lineRanges>
      <range>
        <start>4</start>
        <end>4</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/SessionListen.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1694</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/GroupSearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1630</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/FirstNamePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1695</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/PrivilegeSearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 1,744 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1668</key>
    <lineRanges>
      <range>
        <start>1274</start>
        <end>1274</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1274</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.io.File.</message>
    <priority>HIGH</priority>
    <key>1584</key>
    <lineRanges>
      <range>
        <start>6</start>
        <end>6</end>
      </range>
    </lineRanges>
    <primaryLineNumber>6</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/SessionListen.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 15 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1612</key>
    <lineRanges>
      <range>
        <start>188</start>
        <end>188</end>
      </range>
    </lineRanges>
    <primaryLineNumber>188</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/helper/RDBMSHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1656</key>
    <lineRanges>
      <range>
        <start>437</start>
        <end>437</end>
      </range>
    </lineRanges>
    <primaryLineNumber>437</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 11 (max allowed is 7) classes [CSInternalConfigurationException, CSInternalInsufficientAttributesException, CSInternalLoginException, EmailIdPrincipal, FirstNamePrincipal, Hashtable, InitialDirContext, LastNamePrincipal, LoginIdPrincipal, SearchControls, com.sun.net.ssl.internal.ssl.Provider].</message>
    <priority>HIGH</priority>
    <key>1609</key>
    <lineRanges>
      <range>
        <start>130</start>
        <end>130</end>
      </range>
    </lineRanges>
    <primaryLineNumber>130</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/helper/LDAPHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.helper</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1641</key>
    <lineRanges>
      <range>
        <start>156</start>
        <end>156</end>
      </range>
    </lineRanges>
    <primaryLineNumber>156</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/ProtectionElementPrivilegeContext.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 28 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1623</key>
    <lineRanges>
      <range>
        <start>81</start>
        <end>81</end>
      </range>
    </lineRanges>
    <primaryLineNumber>81</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 515 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1655</key>
    <lineRanges>
      <range>
        <start>353</start>
        <end>353</end>
      </range>
    </lineRanges>
    <primaryLineNumber>353</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1718</key>
    <lineRanges>
      <range>
        <start>66</start>
        <end>66</end>
      </range>
    </lineRanges>
    <primaryLineNumber>66</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/common/ErrorDetails.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws.common</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 24 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1582</key>
    <lineRanges>
      <range>
        <start>39</start>
        <end>39</end>
      </range>
    </lineRanges>
    <primaryLineNumber>39</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/JDBCHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.io.InputStream.</message>
    <priority>HIGH</priority>
    <key>1710</key>
    <lineRanges>
      <range>
        <start>95</start>
        <end>95</end>
      </range>
    </lineRanges>
    <primaryLineNumber>95</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/system/ApplicationSessionFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.system</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1689</key>
    <lineRanges>
      <range>
        <start>4570</start>
        <end>4570</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4570</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.spi.LoginModule.</message>
    <priority>HIGH</priority>
    <key>1607</key>
    <lineRanges>
      <range>
        <start>109</start>
        <end>109</end>
      </range>
    </lineRanges>
    <primaryLineNumber>109</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1670</key>
    <lineRanges>
      <range>
        <start>1757</start>
        <end>1757</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1757</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1579</key>
    <lineRanges>
      <range>
        <start>140</start>
        <end>140</end>
      </range>
    </lineRanges>
    <primaryLineNumber>140</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/ClassLoaderUtil.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1643</key>
    <lineRanges>
      <range>
        <start>158</start>
        <end>158</end>
      </range>
    </lineRanges>
    <primaryLineNumber>158</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/ProtectionGroupRoleContext.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 17 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1690</key>
    <lineRanges>
      <range>
        <start>4721</start>
        <end>4721</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4721</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1669</key>
    <lineRanges>
      <range>
        <start>1558</start>
        <end>1558</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1558</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1638</key>
    <lineRanges>
      <range>
        <start>237</start>
        <end>237</end>
      </range>
    </lineRanges>
    <primaryLineNumber>237</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/Application.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1588</key>
    <lineRanges>
      <range>
        <start>92</start>
        <end>92</end>
      </range>
    </lineRanges>
    <primaryLineNumber>92</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1644</key>
    <lineRanges>
      <range>
        <start>266</start>
        <end>266</end>
      </range>
    </lineRanges>
    <primaryLineNumber>266</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/Role.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1672</key>
    <lineRanges>
      <range>
        <start>2415</start>
        <end>2415</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2415</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.userdetails.UserDetailsService.</message>
    <priority>HIGH</priority>
    <key>1602</key>
    <lineRanges>
      <range>
        <start>23</start>
        <end>23</end>
      </range>
    </lineRanges>
    <primaryLineNumber>23</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 12 (max allowed is 7) classes [AnnotationConfiguration, ArrayList, ByteArrayInputStream, ByteArrayOutputStream, CSConfigurationException, CSException, DataInputStream, HashMap, LabelValueBean, SimpleLayout, StringTokenizer, WriterAppender].</message>
    <priority>HIGH</priority>
    <key>1580</key>
    <lineRanges>
      <range>
        <start>46</start>
        <end>46</end>
      </range>
    </lineRanges>
    <primaryLineNumber>46</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 704 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1691</key>
    <lineRanges>
      <range>
        <start>4721</start>
        <end>4721</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4721</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 37 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1581</key>
    <lineRanges>
      <range>
        <start>46</start>
        <end>46</end>
      </range>
    </lineRanges>
    <primaryLineNumber>46</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/HibernateHelper.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 30 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1709</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/provisioning/AuthorizationManagerImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.provisioning</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.providers.encoding.PlaintextPasswordEncoder.</message>
    <priority>HIGH</priority>
    <key>1601</key>
    <lineRanges>
      <range>
        <start>20</start>
        <end>20</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 15 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1608</key>
    <lineRanges>
      <range>
        <start>216</start>
        <end>216</end>
      </range>
    </lineRanges>
    <primaryLineNumber>216</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.Subject.</message>
    <priority>HIGH</priority>
    <key>1633</key>
    <lineRanges>
      <range>
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/LastNamePrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.util.Vector.</message>
    <priority>HIGH</priority>
    <key>1586</key>
    <lineRanges>
      <range>
        <start>8</start>
        <end>8</end>
      </range>
    </lineRanges>
    <primaryLineNumber>8</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/SessionListen.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.Subject.</message>
    <priority>HIGH</priority>
    <key>1629</key>
    <lineRanges>
      <range>
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/EmailIdPrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1575</key>
    <lineRanges>
      <range>
        <start>540</start>
        <end>540</end>
      </range>
    </lineRanges>
    <primaryLineNumber>540</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/SearchUserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.net.URLClassLoader.</message>
    <priority>HIGH</priority>
    <key>1585</key>
    <lineRanges>
      <range>
        <start>7</start>
        <end>7</end>
      </range>
    </lineRanges>
    <primaryLineNumber>7</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/SessionListen.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - java.security.*.</message>
    <priority>HIGH</priority>
    <key>1647</key>
    <lineRanges>
      <range>
        <start>95</start>
        <end>95</end>
      </range>
    </lineRanges>
    <primaryLineNumber>95</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1603</key>
    <lineRanges>
      <range>
        <start>45</start>
        <end>45</end>
      </range>
    </lineRanges>
    <primaryLineNumber>45</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.util.ArrayList.</message>
    <priority>HIGH</priority>
    <key>1548</key>
    <lineRanges>
      <range>
        <start>93</start>
        <end>93</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/CommonDBAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - java.sql.*.</message>
    <priority>HIGH</priority>
    <key>1648</key>
    <lineRanges>
      <range>
        <start>98</start>
        <end>98</end>
      </range>
    </lineRanges>
    <primaryLineNumber>98</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/jaas/PermissionRoleDBAdapter.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1698</key>
    <lineRanges>
      <range>
        <start>94</start>
        <end>94</end>
      </range>
    </lineRanges>
    <primaryLineNumber>94</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/RoleSearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>RedundantImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks for redundant import statements. An import statement is
          considered redundant if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is a duplicate of another import. This is, when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package, e.g.  importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Redundant import from the same package - gov.nih.nci.security.SecurityServiceProvider.</message>
    <priority>HIGH</priority>
    <key>1592</key>
    <lineRanges>
      <range>
        <start>107</start>
        <end>107</end>
      </range>
    </lineRanges>
    <primaryLineNumber>107</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthorizationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1634</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/LoginIdPrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1604</key>
    <lineRanges>
      <range>
        <start>145</start>
        <end>145</end>
      </range>
    </lineRanges>
    <primaryLineNumber>145</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authorization/CSMMethodDefinitionSource.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authorization</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 260 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1682</key>
    <lineRanges>
      <range>
        <start>3342</start>
        <end>3342</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3342</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1704</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/exceptions/CSInsufficientAttributesException.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.exceptions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 15 (max allowed is 7) classes [ActionError, ActionErrors, ArrayList, FormElement, Group, GroupSearchCriteria, HashSet, ProtectionGroup, ProtectionGroupSearchCriteria, Role, RoleSearchCriteria, SearchResult, SimpleDateFormat, User, UserSearchCriteria].</message>
    <priority>HIGH</priority>
    <key>1576</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1703</key>
    <lineRanges>
      <range>
        <start>103</start>
        <end>103</end>
      </range>
    </lineRanges>
    <primaryLineNumber>103</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/hibernate/UserGroup.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao.hibernate</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1671</key>
    <lineRanges>
      <range>
        <start>2165</start>
        <end>2165</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2165</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 15 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1692</key>
    <lineRanges>
      <range>
        <start>4819</start>
        <end>4819</end>
      </range>
    </lineRanges>
    <primaryLineNumber>4819</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.callback.CallbackHandler.</message>
    <priority>HIGH</priority>
    <key>1606</key>
    <lineRanges>
      <range>
        <start>106</start>
        <end>106</end>
      </range>
    </lineRanges>
    <primaryLineNumber>106</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/CommonAuthenticationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 35 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1625</key>
    <lineRanges>
      <range>
        <start>314</start>
        <end>314</end>
      </range>
    </lineRanges>
    <primaryLineNumber>314</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1678</key>
    <lineRanges>
      <range>
        <start>3145</start>
        <end>3145</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3145</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - java.security.*.</message>
    <priority>HIGH</priority>
    <key>1646</key>
    <lineRanges>
      <range>
        <start>92</start>
        <end>92</end>
      </range>
    </lineRanges>
    <primaryLineNumber>92</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/jaas/AuthPolicy.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1702</key>
    <lineRanges>
      <range>
        <start>101</start>
        <end>101</end>
      </range>
    </lineRanges>
    <primaryLineNumber>101</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/hibernate/RolePrivilege.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao.hibernate</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1679</key>
    <lineRanges>
      <range>
        <start>3232</start>
        <end>3232</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3232</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.SecurityServiceProvider.</message>
    <priority>HIGH</priority>
    <key>1605</key>
    <lineRanges>
      <range>
        <start>93</start>
        <end>93</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/AuthenticationManagerFactory.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 13,020 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1626</key>
    <lineRanges>
      <range>
        <start>314</start>
        <end>314</end>
      </range>
    </lineRanges>
    <primaryLineNumber>314</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/X509LoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.authorization.ObjectPrivilegeMap.</message>
    <priority>HIGH</priority>
    <key>1589</key>
    <lineRanges>
      <range>
        <start>91</start>
        <end>91</end>
      </range>
    </lineRanges>
    <primaryLineNumber>91</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthorizationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSException.</message>
    <priority>HIGH</priority>
    <key>1615</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 260 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1680</key>
    <lineRanges>
      <range>
        <start>3232</start>
        <end>3232</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3232</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSLoginException.</message>
    <priority>HIGH</priority>
    <key>1616</key>
    <lineRanges>
      <range>
        <start>100</start>
        <end>100</end>
      </range>
    </lineRanges>
    <primaryLineNumber>100</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/CSMLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 641 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1715</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1683</key>
    <lineRanges>
      <range>
        <start>3457</start>
        <end>3457</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3457</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.hibernate.SessionFactory.</message>
    <priority>HIGH</priority>
    <key>1587</key>
    <lineRanges>
      <range>
        <start>14</start>
        <end>14</end>
      </range>
    </lineRanges>
    <primaryLineNumber>14</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/util/SessionListen.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.util</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 26 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1555</key>
    <lineRanges>
      <range>
        <start>134</start>
        <end>134</end>
      </range>
    </lineRanges>
    <primaryLineNumber>134</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - gov.nih.nci.security.exceptions.CSLoginException.</message>
    <priority>HIGH</priority>
    <key>1619</key>
    <lineRanges>
      <range>
        <start>100</start>
        <end>100</end>
      </range>
    </lineRanges>
    <primaryLineNumber>100</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/loginmodules/LDAPLoginModule.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.loginmodules</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 320 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1666</key>
    <lineRanges>
      <range>
        <start>1206</start>
        <end>1206</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1206</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 28 (max allowed is 7) classes [Application, ArrayList, CSConfigurationException, CSException, CSObjectNotFoundException, CSTransactionException, Date, Group, GroupSearchCriteria, HashMap, HashSet, Hashtable, ObjectAccessMap, ObjectPrivilegeMap, Principal, Privilege, ProtectionElement, ProtectionElementPrivilegeContext, ProtectionElementSearchCriteria, ProtectionGroup, ProtectionGroupProtectionElement, ProtectionGroupRoleContext, Role, StringEncrypter, TreeSet, User, UserGroup, UserGroupRoleProtectionGroup].</message>
    <priority>HIGH</priority>
    <key>1651</key>
    <lineRanges>
      <range>
        <start>160</start>
        <end>160</end>
      </range>
    </lineRanges>
    <primaryLineNumber>160</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1697</key>
    <lineRanges>
      <range>
        <start>99</start>
        <end>99</end>
      </range>
    </lineRanges>
    <primaryLineNumber>99</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/ProtectionGroupSearchCriteria.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1677</key>
    <lineRanges>
      <range>
        <start>2944</start>
        <end>2944</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2944</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [ArrayList, FormElement, ProtectionElement, ProtectionElementSearchCriteria, ProtectionGroup, ProtectionGroupSearchCriteria, SearchResult, SimpleDateFormat].</message>
    <priority>HIGH</priority>
    <key>1568</key>
    <lineRanges>
      <range>
        <start>128</start>
        <end>128</end>
      </range>
    </lineRanges>
    <primaryLineNumber>128</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1660</key>
    <lineRanges>
      <range>
        <start>872</start>
        <end>872</end>
      </range>
    </lineRanges>
    <primaryLineNumber>872</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - java.util.*.</message>
    <priority>HIGH</priority>
    <key>1645</key>
    <lineRanges>
      <range>
        <start>93</start>
        <end>93</end>
      </range>
    </lineRanges>
    <primaryLineNumber>93</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/jaas/AccessPermission.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.jaas</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.sql.Statement.</message>
    <priority>HIGH</priority>
    <key>1650</key>
    <lineRanges>
      <range>
        <start>125</start>
        <end>125</end>
      </range>
    </lineRanges>
    <primaryLineNumber>125</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1569</key>
    <lineRanges>
      <range>
        <start>423</start>
        <end>423</end>
      </range>
    </lineRanges>
    <primaryLineNumber>423</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/ProtectionElementForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 12 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1665</key>
    <lineRanges>
      <range>
        <start>1206</start>
        <end>1206</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1206</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1657</key>
    <lineRanges>
      <range>
        <start>504</start>
        <end>504</end>
      </range>
    </lineRanges>
    <primaryLineNumber>504</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1578</key>
    <lineRanges>
      <range>
        <start>564</start>
        <end>564</end>
      </range>
    </lineRanges>
    <primaryLineNumber>564</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 17 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1673</key>
    <lineRanges>
      <range>
        <start>2543</start>
        <end>2543</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2543</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1706</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/exceptions/CSLoginException.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.exceptions</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1639</key>
    <lineRanges>
      <range>
        <start>198</start>
        <end>198</end>
      </range>
    </lineRanges>
    <primaryLineNumber>198</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/Privilege.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>RedundantImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks for redundant import statements. An import statement is
          considered redundant if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is a duplicate of another import. This is, when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package, e.g.  importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Redundant import from the same package - gov.nih.nci.security.UserProvisioningManager.</message>
    <priority>HIGH</priority>
    <key>1590</key>
    <lineRanges>
      <range>
        <start>106</start>
        <end>106</end>
      </range>
    </lineRanges>
    <primaryLineNumber>106</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/AuthorizationManager.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 704 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1674</key>
    <lineRanges>
      <range>
        <start>2543</start>
        <end>2543</end>
      </range>
    </lineRanges>
    <primaryLineNumber>2543</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 13 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1637</key>
    <lineRanges>
      <range>
        <start>21</start>
        <end>21</end>
      </range>
    </lineRanges>
    <primaryLineNumber>21</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/attributeLevel/AttributeSecuritySessionInterceptor.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.attributeLevel</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - java.util.*.</message>
    <priority>HIGH</priority>
    <key>1711</key>
    <lineRanges>
      <range>
        <start>98</start>
        <end>98</end>
      </range>
    </lineRanges>
    <primaryLineNumber>98</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/util/ObjectSetUtil.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.util</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 13 (max allowed is 7) classes [ArrayList, FormElement, Group, GroupSearchCriteria, HashSet, ProtectionGroup, ProtectionGroupSearchCriteria, Role, RoleSearchCriteria, SearchResult, SimpleDateFormat, User, UserSearchCriteria].</message>
    <priority>HIGH</priority>
    <key>1566</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/GroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 11 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1684</key>
    <lineRanges>
      <range>
        <start>3550</start>
        <end>3550</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3550</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 28 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1556</key>
    <lineRanges>
      <range>
        <start>300</start>
        <end>300</end>
      </range>
    </lineRanges>
    <primaryLineNumber>300</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>NPathComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The NPATH metric computes the number of possible execution
          paths through a function. It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (e.g., A &amp;amp;&amp;amp; B, C || D, etc.).&lt;/p&gt;&lt;p&gt;
          Rationale: Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.&lt;/p&gt;</tooltip>
    <message>NPath Complexity is 3,168 (max allowed is 200).</message>
    <priority>HIGH</priority>
    <key>1557</key>
    <lineRanges>
      <range>
        <start>300</start>
        <end>300</end>
      </range>
    </lineRanges>
    <primaryLineNumber>300</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/actions/InstanceLevelAction.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.actions</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>CyclomaticComplexityCheck</type>
    <tooltip>&lt;p&gt;
          Checks cyclomatic complexity against a specified limit. The
          complexity is measured by the number of &lt;span CLASS=&quot;code&quot;&gt;if&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;while&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;do&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;for&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;?:&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;catch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;switch&lt;/span&gt;, &lt;span CLASS=&quot;code&quot;&gt;case&lt;/span&gt;
          statements, and operators &lt;span CLASS=&quot;code&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; and &lt;span CLASS=&quot;code&quot;&gt;||&lt;/span&gt; (plus one) in the body of a
          constructor, method, static initializer, or instance
          initializer.  It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests. Generally 1-4 is considered good, 5-7 ok, 8-10
          consider re-factoring, and 11+ re-factor now!&lt;/p&gt;</tooltip>
    <message>Cyclomatic Complexity is 16 (max allowed is 10).</message>
    <priority>HIGH</priority>
    <key>1667</key>
    <lineRanges>
      <range>
        <start>1274</start>
        <end>1274</end>
      </range>
    </lineRanges>
    <primaryLineNumber>1274</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 54 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1652</key>
    <lineRanges>
      <range>
        <start>160</start>
        <end>160</end>
      </range>
    </lineRanges>
    <primaryLineNumber>160</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/AuthorizationDAOImpl.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>AvoidStarImportCheck</type>
    <tooltip>&lt;p&gt;
          Checks that there are no import statements that use the * notation.&lt;/p&gt;&lt;p&gt;
          Rationale: Importing all classes from a package leads to tight
          coupling between packages and might lead to problems when a new
          version of a library introduces name clashes.&lt;/p&gt;</tooltip>
    <message>Using the &apos;.*&apos; form of import should be avoided - gov.nih.nci.security.authorization.domainobjects.*.</message>
    <priority>HIGH</priority>
    <key>1701</key>
    <lineRanges>
      <range>
        <start>103</start>
        <end>103</end>
      </range>
    </lineRanges>
    <primaryLineNumber>103</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/dao/hibernate/ProtectionGroupProtectionElement.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.dao.hibernate</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassDataAbstractionCouplingCheck</type>
    <tooltip>&lt;p&gt;
          This metric measures the number of instantiations of other
          classes within the given class. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any abstract data type with
          other abstract data types as members has data abstraction
          coupling; therefore, if a class has a local variable that is
          an instantiation (object) of another class, there is data
          abstraction coupling. The higher the DAC, the more complex the
          data structure (classes) of the system.&lt;/p&gt;</tooltip>
    <message>Class Data Abstraction Coupling is 8 (max allowed is 7) classes [java.util.Vector, javax.xml.namespace.QName, org.apache.axis.AxisFault, org.apache.axis.NoEndPointException, org.apache.axis.client.Service, org.apache.axis.description.FaultDesc, org.apache.axis.description.OperationDesc, org.apache.axis.description.ParameterDesc].</message>
    <priority>HIGH</priority>
    <key>1712</key>
    <lineRanges>
      <range>
        <start>10</start>
        <end>10</end>
      </range>
    </lineRanges>
    <primaryLineNumber>10</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/securityws/src/gov/nih/nci/security/ws/SecurityServiceSoapBindingStub.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.ws</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.providers.dao.SaltSource.</message>
    <priority>HIGH</priority>
    <key>1599</key>
    <lineRanges>
      <range>
        <start>18</start>
        <end>18</end>
      </range>
    </lineRanges>
    <primaryLineNumber>18</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 23 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1567</key>
    <lineRanges>
      <range>
        <start>135</start>
        <end>135</end>
      </range>
    </lineRanges>
    <primaryLineNumber>135</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/GroupForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - org.acegisecurity.providers.encoding.PasswordEncoder.</message>
    <priority>HIGH</priority>
    <key>1600</key>
    <lineRanges>
      <range>
        <start>19</start>
        <end>19</end>
      </range>
    </lineRanges>
    <primaryLineNumber>19</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/acegi/authentication/CSMAuthenticationProvider.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.acegi.authentication</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - java.security.Principal.</message>
    <priority>HIGH</priority>
    <key>1628</key>
    <lineRanges>
      <range>
        <start>3</start>
        <end>3</end>
      </range>
    </lineRanges>
    <primaryLineNumber>3</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authentication/principal/EmailIdPrincipal.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authentication.principal</packageName>
  </warning>
  <warning>
    <category>Metrics</category>
    <type>ClassFanOutComplexityCheck</type>
    <tooltip>&lt;p&gt;
          The number of other classes a given class relies on. Also the
          square of this has been shown to indicate the amount of
          maintenence required in functional programs (on a file basis)
          at least.&lt;/p&gt;</tooltip>
    <message>Class Fan-Out Complexity is 24 (max allowed is 20).</message>
    <priority>HIGH</priority>
    <key>1577</key>
    <lineRanges>
      <range>
        <start>136</start>
        <end>136</end>
      </range>
    </lineRanges>
    <primaryLineNumber>136</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/upt/webapp/src/gov/nih/nci/security/upt/forms/UserForm.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.upt.forms</packageName>
  </warning>
  <warning>
    <category>Coding</category>
    <type>EqualsHashCodeCheck</type>
    <tooltip>&lt;p&gt;
          Checks that classes that override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt;
          also override &lt;span class=&quot;code&quot;&gt;hashCode()&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;
          Rationale: The contract of &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; and&lt;span class=&quot;code&quot;&gt; hashCode()&lt;/span&gt; requires that equal objects
          have the same hashCode. Hence, whenever you override &lt;span class=&quot;code&quot;&gt;equals()&lt;/span&gt; you must override &lt;span class=&quot;code&quot;&gt;
          hashCode()&lt;/span&gt; to ensure that your class can be used in
          collections that are hash based.&lt;/p&gt;</tooltip>
    <message>Definition of &apos;equals()&apos; without corresponding definition of &apos;hashCode()&apos;.</message>
    <priority>HIGH</priority>
    <key>1640</key>
    <lineRanges>
      <range>
        <start>347</start>
        <end>347</end>
      </range>
    </lineRanges>
    <primaryLineNumber>347</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/authorization/domainobjects/ProtectionElement.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.authorization.domainobjects</packageName>
  </warning>
  <warning>
    <category>Imports</category>
    <type>UnusedImportsCheck</type>
    <tooltip>&lt;p&gt;
          Checks for unused import statements. Checkstyle uses a simple but
          very reliable algorithm to report on unused import statements. An
          import statement is considered unused if:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;
            It is not referenced in the file. The algorithm does not support
            wild-card imports like &lt;span class=&quot;code&quot;&gt;import
            java.io.*;&lt;/span&gt;. Most IDE&apos;s provide very sophisticated checks
            for imports that handle wild-card imports.&lt;/li&gt;&lt;li&gt;
            It is a duplicate of another import. This is when a class is
            imported more than once.&lt;/li&gt;&lt;li&gt;
            The class imported is from the &lt;span class=&quot;code&quot;&gt;java.lang&lt;/span&gt;
            package. For example importing &lt;span class=&quot;code&quot;&gt;java.lang.String&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;
            The class imported is from the same package.&lt;/li&gt;&lt;/ul&gt;</tooltip>
    <message>Unused import - javax.security.auth.Subject.</message>
    <priority>HIGH</priority>
    <key>1705</key>
    <lineRanges>
      <range>
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/home/csmuser/hudson/jobs/csm-build-all/workspace/security/api/src/gov/nih/nci/security/exceptions/CSInsufficientAttributesException.java</fileName>
    <moduleName></moduleName>
    <packageName>gov.nih.nci.security.exceptions</packageName>
  </warning>
</annotation-array>