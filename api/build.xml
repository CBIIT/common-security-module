<project name="csm-api" default="run" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>CSM API Project Build File</description>

	<property name="common.dir" value="${basedir}/../" />
	<property name="global.ivy.settings.file" location="${common.dir}/common/ivysettings.xml" />

	<!-- set global properties for this build -->
	<property name="src.dir" location="src" />

	<property name="lib.dir" value="${common.dir}/lib/api" />

	<!-- This will be removed once all jars are retrieved from Ivy -->
	<property name="local.lib.dir" value="lib" />
	<property name="base.lib.dir" value="../lib" />

	<property name="classes.dir" location="${basedir}/classes" />
	<property name="dist" location="dist" />
	<property name="resources" location="resources" />
	<property name="common.resources" location="../common/resources/jboss-conf" />
	<property name="jar.name" value="csmapi.jar" />

	<!-- Paths -->
	<path id="common.classpath">
		<fileset dir="${common.dir}/lib">
			<include name="ivy-core-2.0.0-beta2.jar" />
			<include name="ivy-2.0.0-beta2.jar" />
		</fileset>
	</path>

	<path id="project.compile.classpath">
		<fileset dir="${lib.dir}/compile">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${local.lib.dir}">
			<include name="*.jar" />
			<exclude name="hibernate-commons-annotations.jar" />
		</fileset>
	</path>

	<!-- Task definitions -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="common.classpath" />


	<!-- Targets -->

	<target name="ivy-settings">
		<ivy:settings file="${global.ivy.settings.file}" />
	</target>

	<target name="ivy-compile" depends="ivy-settings" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="compile" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="compile" />
	</target>

	<target name="ivy-clean-cache" description="Cleans local Ivy cache">
		<delete dir="${user.home}/.ivy-${ant.project.name}" />
	</target>

	<target name="-pre-clean" depends="ivy-clean-cache" description="Performs all necessary clean-up before a build">
		<delete dir="${classes.dir}" quiet="false" />
		<delete file="${target.dir}/${jar.name}" quiet="false" />
		<delete dir="${lib.dir}" />
	</target>

	<target name="-init" description="Initializes the system before a build">
		<!-- Create the time stamp -->
		<tstamp />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${dist}" />
	</target>

	<target name="compile" depends="-pre-clean, -init, ivy-compile" description="compile the source ">

		<!-- Compile the java code from ${src.dir} into ${classes.dir} -->
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true" deprecation="true" classpathref="project.compile.classpath" />

		<copy todir="${classes.dir}/gov/nih/nci/security/authorization/domainobjects">
			<fileset dir="${src.dir}/gov/nih/nci/security/authorization/domainobjects">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<copy todir="${classes.dir}/gov/nih/nci/security/dao/hibernate">
			<fileset dir="${src.dir}/gov/nih/nci/security/dao/hibernate">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<!---<copy file="${src.dir}/hibernate.properties" todir="${classes.dir}" />-->
		<copy file="${common.resources}/ObjectStateLoggerConfig.xml" todir="${classes.dir}" />
		<copy file="${src.dir}/ApplicationSecurityConfig.xsd" todir="${classes.dir}" />
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Put everything in ${classes.dir} into the csmapi.jar file -->
		<jar jarfile="${dist}/${jar.name}" basedir="${classes.dir}" />

		<copy todir="${dist}">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<copy todir="${dist}">
			<fileset dir="${common.resources}" />
			<fileset dir="${resources}" />
		</copy>

		<delete quiet="true" file="${dist}/ObjectStateLoggerConfig.xml" />
	</target>

	<target name="distupt" depends="dist" description="propogates the distribution to upt project">
		<property name="distupt" location="../upt/webapp/public_html/WEB-INF/lib" />
		<property name="distuptresources" location="../resources" />
		<copy todir="${distupt}">
			<fileset dir="${dist}">
				<include name="csmapi.jar" />
			</fileset>
		</copy>
		<copy todir="${distuptresources}">
			<fileset dir="${dist}">
				<exclude name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- Does this even work? directory does not exist -->
	<target name="distws" depends="dist" description="propogates the distribution to webservices project">
		<property name="distws" location="./../webservices/WebRoot/WEB-INF/lib" />
		<property name="distwsresources" location="./../webservices/resources" />
		<property name="ws.src" location="./../webservices/src/gov/nih/nci/security/ws" />
		<copy todir="${distws}">
			<fileset dir="${dist}">
				<include name="csmapi.jar" />
			</fileset>
		</copy>
		<copy todir="${distwsresources}/csmapi">
			<fileset dir="${dist}">
				<exclude name="**/*.jar" />
				<exclude name="**/*.wsdd" />
			</fileset>
		</copy>
		<copy todir="${distwsresources}">
			<fileset dir="${ws.src}">
				<include name="**/*.wsdd" />
			</fileset>
		</copy>
	</target>

	<target name="clean" description="perform the clean up">
		<delete dir="${classes.dir}" />
	</target>

	<target name="-post-clean" description="Performs necessary clean-up after a build">
		<delete dir="${classes.dir}" quiet="false" />
		<delete dir="${lib.dir}" />
		<delete dir="${dist}" />
	</target>

	<target name="run" depends="dist, -post-clean" description="Default project target" />

</project>
